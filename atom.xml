<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I&#39;m yunlong</title>
  <subtitle>Web(App) Developer with simple code life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yunlzheng.github.io/"/>
  <updated>2017-03-16T05:39:19.000Z</updated>
  <id>http://yunlzheng.github.io/</id>
  
  <author>
    <name>云龙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yunlzheng.github.io/2017/03/16/fluentd-with-rancher-and-es/"/>
    <id>http://yunlzheng.github.io/2017/03/16/fluentd-with-rancher-and-es/</id>
    <published>2017-03-16T05:26:45.000Z</published>
    <updated>2017-03-16T05:39:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>微服务是这样一种软件架构模式：独立进程，独立部署，独立发布。而一个业务通常会由多个服务进行支撑，这就带来一个问题，当用户的操作分布到了不同的服务当中之后，如果出现了异常开发人员如何才能快速完成问题定位？这篇文章我们就来聊聊关于日志的那些事儿</p>
<p>关键字：Fluentd, Elasticsearch, Kibana，日志相关性定位</p>
</blockquote>
<h3 id="场景假设"><a href="#场景假设" class="headerlink" title="场景假设"></a>场景假设</h3><p>假定我们有这样一个项目：</p>
<ul>
<li>前端使用是独立构建的Vuejs应用程序；</li>
<li>API Gateway代理所有的前端请求同时提供认证授权接口；</li>
<li>对于所有后端服务的请求实际都由API Gateway完成；</li>
<li>后端有4个不同的服务分别提供不同的功能；</li>
</ul>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/api_gateway.png" alt="http://7pn5d3.com1.z0.glb.clouddn.com/api_gateway.png"></p>
<p>基于微服务架构我们可以实现服务的独立部署，独立发布。而一个业务通常会由多个服务进行支撑，这就带来一个问题，当用户的操作分布到了不同的服务当中之后，如果出现了异常开发人员如何才能快速完成问题定位。</p>
<h3 id="容器日志聚合"><a href="#容器日志聚合" class="headerlink" title="容器日志聚合"></a>容器日志聚合</h3><p>对于Docker容器而言，通常有两种方式来进行日志的聚合分析。</p>
<ul>
<li>docker logging driver</li>
</ul>
<p>docker原生支持多种logging driver用于支持用户从容器中获取输出信息</p>
<table>
<thead>
<tr>
<th>驱动</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>容器不会产生任何日志输出，docker logs不会显示任何信息</td>
</tr>
<tr>
<td>json-file</td>
<td>默认设置，将日志格式化为json并且保存到文件</td>
</tr>
<tr>
<td>syslog</td>
<td>docker将会日志输出到syslog,需要在主机上运行syslog进程</td>
</tr>
<tr>
<td>fluentd</td>
<td>将日志输出到fluentd,fluentd需要提供forward源支持, docker logs无法查看日志信息</td>
</tr>
<tr>
<td>其它</td>
<td><a href="https://docs.docker.com/engine/admin/logging/overview/#supported-logging-drivers" target="_blank" rel="external">点击查看详情</a></td>
</tr>
</tbody>
</table>
<p>当使用默认的json-file方式时，所有的日志文件都输出到/var/lib/docker/containers/<contaner_id>/<container_id>-json.log</container_id></contaner_id></p>
<p>以Fluentd为例</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">run</span><span class="bash"> --log-driver=fluentd ubuntu <span class="built_in">echo</span> <span class="string">"Hello Fluentd!"</span></span></div></pre></td></tr></table></figure>
<p>对于垮主机的情况可以使用</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --<span class="built_in">log</span>-<span class="built_in">driver</span>=fluentd --<span class="built_in">log</span>-opt fluentd-address=<span class="number">192.168</span>.<span class="number">50.101</span>:<span class="number">24225</span> ubuntu <span class="built_in">echo</span> <span class="string">"..."</span></div></pre></td></tr></table></figure>
<p>同时通过log-opt我们可以定义fluentd收集时的日志标签等信息</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --<span class="built_in">log</span>-driver=fluentd --<span class="built_in">log</span>-<span class="keyword">opt</span> fluentd-<span class="keyword">tag</span>=docker.&#123;&#123;.ID&#125;&#125; ubuntu <span class="keyword">echo</span> <span class="string">"..."</span></div></pre></td></tr></table></figure>
<p>而如上面的表所示，只有在logging driver为json-file或者journald时会才能支持使用docker logs查看日志信息，因此对于个别情况需要对单独容器进行容器查看的时候多少会带来很多麻烦，包括日志不实时\,查询复杂等。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker logs</div><div class="line"><span class="string">"logs"</span> <span class="keyword">command</span> <span class="keyword">is</span> supported <span class="keyword">only</span> <span class="keyword">for</span> <span class="string">"json-file"</span> <span class="built_in">and</span> <span class="string">"journald"</span> logging drivers (<span class="keyword">go</span><span class="variable">t:</span> fluentd)</div></pre></td></tr></table></figure>
<ul>
<li>基于主机Agent的日志采集方式</li>
</ul>
<p>上文有说docker默认使用json-file作为日志输出，同时所有的日志都会以Json的形式存储于日志文件当中/var/lib/docker/containers/<contaner_id>/<container_id>-json.log</container_id></contaner_id></p>
<p>通过对日志文件的收集，在满足中心化收集和处理容器日志的同时，还能支持对于单个容器的本地化操作。</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/efk.png" alt=""></p>
<h3 id="日志输出规范"><a href="#日志输出规范" class="headerlink" title="日志输出规范"></a>日志输出规范</h3><p>除了日志收集以外，我们还需要对于用户操作产生的日志做相关性处理，由于在微服务模式下应用程序可能由不同的服务是由不同应用开发框架完成，因此对于日志规范更多是“约定大于实现”。通过在各个服务中添加当前用户信息即可如user-<uuid>即可。由于日志的输出本身是满足时间序列性的，因此可以通过用户标识，时间等维度通过Kibana查询相关的日志输出信息。</uuid></p>
<h3 id="基于Fluentd搭建日志聚合分析平台"><a href="#基于Fluentd搭建日志聚合分析平台" class="headerlink" title="基于Fluentd搭建日志聚合分析平台"></a>基于Fluentd搭建日志聚合分析平台</h3><ul>
<li>Fluentd是什么？</li>
</ul>
<p>Fluentd是一个开源的数据收集方案，用于统一数据的收集和处理。Fluentd通过类似于Data Pipeline的形式完成对日志以及其它格式化数据的统一收集和处理。</p>
<p>同时提供了大量的插件用以支持各种不同的需求如，日志持久化，告警通知等等。</p>
<ul>
<li>在Rancher下部署Fluentd</li>
</ul>
<p>这里主要分享基于Fluentd在Rancher下搭建日志聚合分析相关工具的内容。</p>
<blockquote>
<p>用于示例的镜像可<a href="https://hub.docker.com/r/yunlzheng/fluent-es/" target="_blank" rel="external">点击查看详情</a></p>
</blockquote>
<p>创建fluentd配置文件内容如下所示：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">&lt;source&gt;</span></div><div class="line">  <span class="built_in">type</span> forward</div><div class="line">  port <span class="number">24224</span></div><div class="line">  bind <span class="number">0.0</span>.<span class="number">0.0</span></div><div class="line">&lt;/<span class="keyword">source</span>&gt;</div><div class="line"></div><div class="line"><span class="symbol">&lt;source&gt;</span></div><div class="line">  <span class="built_in">type</span> tail</div><div class="line">  path /var/lib/docker/containers/*/*-json.<span class="built_in">log</span></div><div class="line">  pos_file /fluentd/pos_file/fluentd-docker.pos</div><div class="line">  time_format %Y-%<span class="keyword">m</span>-%dT%H:%M:%S</div><div class="line">  <span class="keyword">tag</span> docker.*</div><div class="line">  format json</div><div class="line">&lt;/<span class="keyword">source</span>&gt;</div><div class="line"></div><div class="line">&lt;<span class="keyword">match</span> docker.var.lib.docker.containers.*.*.<span class="built_in">log</span>&gt;</div><div class="line">  <span class="built_in">type</span> record_reformer</div><div class="line">  container_id $&#123;tag_parts[<span class="number">5</span>]&#125;</div><div class="line">  <span class="keyword">tag</span> docker.<span class="keyword">all</span></div><div class="line">&lt;/<span class="keyword">match</span>&gt;</div><div class="line"></div><div class="line">&lt;<span class="keyword">match</span> *.*&gt;</div><div class="line">  <span class="built_in">type</span> elasticsearch</div><div class="line">  logstash_format true</div><div class="line">  host <span class="string">"elasticsearch"</span></div><div class="line">  port <span class="number">9200</span></div><div class="line">  flush_interval <span class="number">5</span>s</div><div class="line">&lt;/<span class="keyword">match</span>&gt;</div></pre></td></tr></table></figure>
<p>这里我们添加了两个数据源分别是:</p>
<ul>
<li>forward以及tail，forward用于接收docker logging driver产生的日志;</li>
<li>tail则实现对当前主机上的容器日志的统一收集。</li>
</ul>
<p>为了将Fluentd的部署到Rancher的所有主机上，通过在服务启动时添加标签<strong>io.rancher.scheduler.global=true</strong>即可，当容器启动后Rancher会自动将Fluentd容器部署到所有Envionment下的Host主机</p>
<p>同时对主机的目录进行映射即可/var/lib/docker/containers:/var/lib/docker/containers</p>
<p>这里已经在Docker HUb构建了用于示例的镜像可<a href="https://hub.docker.com/r/yunlzheng/fluent-es/" target="_blank" rel="external">点击查看详情</a></p>
<p>用于部署Rancher的docker-compose内容如下：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">version</span>: <span class="string">'2'</span></div><div class="line"><span class="attribute">services</span>:</div><div class="line">  <span class="attribute">fluent-es</span>:</div><div class="line">    <span class="attribute">image</span>: yunlzheng/fluent-es</div><div class="line">    <span class="attribute">stdin_open</span>: true</div><div class="line">    <span class="attribute">tty</span>: true</div><div class="line">    <span class="attribute">ports</span>:</div><div class="line">    - <span class="number">24224</span>:<span class="number">24224</span>/tcp</div><div class="line">    <span class="attribute">external_links</span>:</div><div class="line">    - elasticsearch-<span class="number">2</span>/<span class="attribute">elasticsearch-masters</span>:elasticsearch</div><div class="line">    <span class="attribute">labels</span>:</div><div class="line">      io.rancher.container.<span class="attribute">pull_image</span>: always</div><div class="line">      io.rancher.scheduler.<span class="attribute">global</span>: true</div></pre></td></tr></table></figure>
<p>完整Catalog示例可访问:<a href="https://github.com/yunlzheng/rancher-catalog/tree/master/templates/fluentd" target="_blank" rel="external">Github</a>获取</p>
<p>Rancher Catalog中社区已经提供了ElasticSearch以及Kinana的相关Catalog，这里就不在过多说明了。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>日志聚合分析是支撑微服务架构应用的重要基础设施之一。同时通过对日志内容进行规范进行约定就可以达到对日志以及问题快速定位的需求，避免从技术层面引入更多的框架所引入的开发的复杂度。</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/kibana-demo.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;微服务是这样一种软件架构模式：独立进程，独立部署，独立发布。而一个业务通常会由多个服务进行支撑，这就带来一个问题，当用户的操作分布到了不同的服务当中之后，如果出现了异常开发人员如何才能快速完成问题定位？这篇文章我们就来聊聊关于日志的那些事儿&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>API网关那些儿</title>
    <link href="http://yunlzheng.github.io/2017/03/14/the-things-about-api-gateway/"/>
    <id>http://yunlzheng.github.io/2017/03/14/the-things-about-api-gateway/</id>
    <published>2017-03-14T07:23:58.000Z</published>
    <updated>2017-03-14T07:27:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>现在越来越多的技术团队开始尝试采纳微服务架构进行产品开发。而基于微服务架构后后端服务通常而言是动态的，为了简化前端的调用逻辑，通常会引入API Gateway作为轻量级网关，同时API Gateway中也会实现相关的认证逻辑从而简化内部服务之间相互调用的复杂度，这边文章我们就来聊聊API Gateway的那些事。<br>关键字：API Gateway, Spring Cloud Zuul, Nginx，Consul，Consul-Template。</p>
</blockquote>
<h2 id="为什么需要API-Gateway"><a href="#为什么需要API-Gateway" class="headerlink" title="为什么需要API Gateway"></a>为什么需要API Gateway</h2><ul>
<li>简化客户端调用复杂度</li>
</ul>
<p>在微服务架构模式下后端服务的实例数一般是动态的，对于客户端而言如何发现这些动态改变的服务实例的访问地址信息？因此在基于微服务的项目中为了简化前端的调用逻辑，通常会引入API Gateway作为轻量级网关，同时API Gateway中也会实现相关的认证逻辑从而简化内部服务之间相互调用的复杂度。</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/api_gateway.png" alt="http://7pn5d3.com1.z0.glb.clouddn.com/api_gateway.png"></p>
<ul>
<li>数据裁剪以及聚合</li>
</ul>
<p>通常而言多余不同的客户端对于显示时对于数据的需求是不一致的，比如手机端或者Web端又或者在低延迟的网络环境或者高延迟的网络环境。</p>
<p>因此为了优化客户端的使用体验，API Gateway可以对通用性的响应数据进行裁剪以适应不同客户端的使用需求。同时还可以将多个API调用逻辑进行聚合，从而减少客户端的请求数，优化客户端用户体验</p>
<ul>
<li>多渠道支持</li>
</ul>
<p>当然我们还可以针对不同的渠道和客户端提供不同的API Gateway,对于该模式的使用由另外一个大家熟知的方式叫<strong>Backend for front-end</strong>, 在Backend for front-end模式当中，我们可以针对不同的客户端分别创建其BFF</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/bff.png" alt="backend for front-end"></p>
<ul>
<li>遗留系统的微服务化改造</li>
</ul>
<p>对于系统系统而言进行微服务改造通常是由于原有的系统存在或多或少的问题，比如技术债务，代码质量，可维护性，可扩展性等等。API Gateway的模式同样适用于这一类遗留系统的改造，通过微服务化的改造逐步实现对原有系统中的问题的修复，从而提升对于原有业务<strong>响应力</strong>的提升。<strong>通过引入抽象层，逐步使用新的实现替换旧的实现。</strong></p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/bff-process.png" alt=""></p>
<h2 id="使用Zuul实现API网关"><a href="#使用Zuul实现API网关" class="headerlink" title="使用Zuul实现API网关"></a>使用Zuul实现API网关</h2><p>Spring Cloud的Zuul组件提供了轻量级网关的功能支持，通过定义路由规则可以快速实现一个轻量级的API网关</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">zuul:</span></div><div class="line"><span class="symbol">  ignoredPatterns:</span> <span class="meta-keyword">/api/</span>auth</div><div class="line">  sensitive-headers: <span class="string">"*"</span></div><div class="line"><span class="symbol">  ignoreLocalService:</span> true</div><div class="line"><span class="symbol">  retryable:</span> false</div><div class="line"><span class="symbol">  host:</span></div><div class="line">    max-total-connections: <span class="number">500</span></div><div class="line"><span class="symbol">  routes:</span></div><div class="line"><span class="symbol">    service01:</span></div><div class="line"><span class="symbol">      pateh:</span> <span class="meta-keyword">/service01/</span>**</div><div class="line"><span class="symbol">      serviceId:</span> service01</div><div class="line"><span class="symbol">      stripPrefix:</span> true</div><div class="line"><span class="symbol">    thirdpart:</span></div><div class="line"><span class="symbol">      pateh:</span> <span class="meta-keyword">/thirdpart/</span>**</div><div class="line"><span class="symbol">      url:</span> http:<span class="comment">//thirdpart.api.com</span></div></pre></td></tr></table></figure>
<p>同时除了通过serviceId关联已经注册到Consul的服务实例以外，我们也可以通过zuul直接定义实现对已有服务的直接集成。</p>
<p>这里我们就不过多介绍Zuul的细节，在实际使用中我们会发现直接使用Zuul会存在诸多问题，包括：</p>
<ul>
<li>性能问题：当存在大量请求超时后会造成Zuul阻塞，目前只能通过横向扩展Zuul实例实现对高并发的支持；</li>
<li>WebSocket的支持问题： Zuul中并不直接提供对WebSocket的支持，需要添加额外的过滤器实现对WebSocket的支持；</li>
</ul>
<p>为了解决以上问题，可以通过在Zuul前端部署Nginx实现对Zuul实例的反向代理，同时适当的通过添加Cache以及请求压缩减少对后端Zuul实例的压力。</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/nginx-with-zuul.png" alt=""></p>
<h2 id="实现Nginx的动态代理"><a href="#实现Nginx的动态代理" class="headerlink" title="实现Nginx的动态代理"></a>实现Nginx的动态代理</h2><p>通过Nginx我们可以实现对多实例Zuul的请求代理，同时通过添加适当的缓存以及请求压缩配置可以提升前端UI的请求响应时间。这里需要解决的问题是Nginx如何动态发现Zuul实例信息并且将请求转发到Zuul当中。</p>
<p><a href="https://github.com/hashicorp/consul-template" target="_blank" rel="external">consul-template</a>可以帮助我们解决以上问题,consul-template是一个命令行工具，结合consul实现配置文件的动态生成并且支持在配置文件发生变化后触发用户自定义命令。</p>
<p>我们使用了如下的Dockerfile用于构建我们的Nginx服务</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> nginx:<span class="number">1.11</span>.<span class="number">10</span></div><div class="line"></div><div class="line"><span class="keyword">ADD</span><span class="bash"> consul-template /usr/<span class="built_in">local</span>/bin</span></div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /etc/consul-templates</span></div><div class="line"></div><div class="line"><span class="comment"># 模板文件</span></div><div class="line"><span class="keyword">ADD</span><span class="bash"> nginx.tpl /etc/consul-templates/nginx.tpl</span></div><div class="line"><span class="keyword">ENV</span> CT_FILE /etc/consul-templates/nginx.tpl</div><div class="line"></div><div class="line"><span class="keyword">ENV</span> NX_FILE /etc/nginx/conf.d/default.conf <span class="comment"># 目标文件</span></div><div class="line"></div><div class="line"><span class="keyword">ENV</span> SERVICE identity <span class="comment"># 注册在Consul的服务名</span></div><div class="line"></div><div class="line"><span class="keyword">COPY</span><span class="bash"> dist /usr/share/nginx/html</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /data/cache</span></div><div class="line"></div><div class="line"><span class="keyword">CMD</span><span class="bash"> /usr/sbin/nginx -c /etc/nginx/nginx.conf  \</span></div><div class="line">  &amp; CONSUL_TEMPLATE_LOG=debug \</div><div class="line">  consul-template -consul-addr=<span class="variable">$CONSUL</span> -template <span class="string">"<span class="variable">$CT_FILE</span>:<span class="variable">$NX_FILE</span>:/usr/sbin/nginx -s reload"</span>;</div></pre></td></tr></table></figure>
<p>Nginx配置模板文件</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># nginx.tpl</span></div><div class="line">upstream api_server &#123;</div><div class="line">  least_conn;</div><div class="line">  &#123;&#123;range service <span class="string">"identity"</span>&#125;&#125;</div><div class="line">  <span class="keyword">server</span>  &#123;&#123;.Address&#125;&#125;:&#123;&#123;.Port&#125;&#125;;</div><div class="line">  &#123;&#123;<span class="keyword">else</span>&#125;&#125;<span class="keyword">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9191</span>;&#123;&#123;end&#125;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">server</span> &#123;</div><div class="line">    listen       <span class="number">80</span>;</div><div class="line">    server_name  localhost;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        root   /usr/share/nginx/html;</div><div class="line">        <span class="keyword">index</span>  <span class="keyword">index</span>.html <span class="keyword">index</span>.htm;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location /api &#123;</div><div class="line">      proxy_pass http:<span class="comment">//api_server;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">upstream api_server &#123;</div><div class="line">  least_conn;</div><div class="line">  &#123;&#123;range service <span class="string">"identity"</span>&#125;&#125;</div><div class="line">  server  &#123;&#123;.Address&#125;&#125;:&#123;&#123;.Port&#125;&#125;;</div><div class="line">  &#123;&#123;else&#125;&#125;server <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">9191</span>;&#123;&#123;end&#125;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>会根据当前consul中注册的所有identity服务实例进行模板渲染，并且当配置文件内容发生变化后调用nginx -s reload重新加载Nginx配置从而实现对于后端服务实例的动态代理。</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CMD</span><span class="bash"> /usr/sbin/nginx -c /etc/nginx/nginx.conf  \</span></div><div class="line">  &amp; CONSUL_TEMPLATE_LOG=debug \</div><div class="line">  consul-template -consul-addr=<span class="variable">$CONSUL</span> -template <span class="string">"<span class="variable">$CT_FILE</span>:<span class="variable">$NX_FILE</span>:/usr/sbin/nginx -s reload"</span>;</div></pre></td></tr></table></figure>
<h2 id="其它的一些优化建议"><a href="#其它的一些优化建议" class="headerlink" title="其它的一些优化建议"></a>其它的一些优化建议</h2><p>启用Nginx的Gzip可以对服务器端响应内容进行压缩从而减少一定的客户端响应时间</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gzip <span class="keyword">on</span>;</div><div class="line">gzip_min_length <span class="number">1</span>k;</div><div class="line">gzip_buffers  <span class="number">4</span> <span class="number">32</span>k;</div><div class="line">gzip_types    <span class="built_in">text</span>/plain <span class="built_in">application</span>/x-javascript <span class="built_in">application</span>/javascript <span class="built_in">text</span>/xml <span class="built_in">text</span>/css;</div><div class="line">gzip_vary <span class="keyword">on</span>;</div></pre></td></tr></table></figure>
<p>缓存图片以及其它静态资源可以减少对Zuul实例的请求量</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">proxy_buffering</span> <span class="literal">on</span>;</div><div class="line"><span class="attribute">proxy_cache_valid</span> any <span class="number">10m</span>;</div><div class="line"><span class="attribute">proxy_cache_path</span> /data/cache levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=my-cache:<span class="number">8m</span> max_size=<span class="number">1000m</span> inactive=<span class="number">600m</span>;</div><div class="line"><span class="attribute">proxy_temp_path</span> /data/temp;</div><div class="line"><span class="attribute">proxy_buffer_size</span> <span class="number">4k</span>;</div><div class="line"><span class="attribute">proxy_buffers</span> <span class="number">100</span> <span class="number">8k</span>;</div><div class="line"></div><div class="line"><span class="attribute">location</span> <span class="regexp">~* (images)</span>    &#123;</div><div class="line">  <span class="attribute">proxy_pass</span> http://api_server;</div><div class="line">  <span class="comment"># cache setting</span></div><div class="line">  <span class="attribute">proxy_cache</span> my-cache;</div><div class="line">  <span class="attribute">proxy_cache_valid</span> <span class="number">200</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果需要通过Nginx实现对Websocket的代理可以添加一下配置</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">location</span> /sockjs &#123;</div><div class="line">    <span class="attribute">proxy_pass</span> http://api_server;</div><div class="line"></div><div class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</div><div class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line"></div><div class="line">    <span class="comment"># WebSocket support (nginx 1.4)</span></div><div class="line">    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</div><div class="line">    <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</div><div class="line">    <span class="attribute">proxy_set_header</span> Connection <span class="string">"upgrade"</span>;</div><div class="line">    <span class="attribute">proxy_connect_timeout</span> <span class="number">90</span>;</div><div class="line">    <span class="attribute">proxy_send_timeout</span> <span class="number">90</span>;</div><div class="line">    <span class="attribute">proxy_read_timeout</span> <span class="number">90</span>;</div><div class="line"></div><div class="line">    <span class="comment"># !!!Support Spring Boot</span></div><div class="line">    <span class="attribute">proxy_pass_header</span> X-XSRF-TOKEN;</div><div class="line">    <span class="attribute">proxy_set_header</span> Origin <span class="string">"http://localhost:4000"</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;现在越来越多的技术团队开始尝试采纳微服务架构进行产品开发。而基于微服务架构后后端服务通常而言是动态的，为了简化前端的调用逻辑，通常会引入API Gateway作为轻量级网关，同时API Gateway中也会实现相关的认证逻辑从而简化内部服务之间相互
    
    </summary>
    
    
      <category term="microservice" scheme="http://yunlzheng.github.io/tags/microservice/"/>
    
  </entry>
  
  <entry>
    <title>我们应该如何基于容器来进行软件的持续交付的（一）？</title>
    <link href="http://yunlzheng.github.io/2016/12/14/how-to-use-container-in-cd/"/>
    <id>http://yunlzheng.github.io/2016/12/14/how-to-use-container-in-cd/</id>
    <published>2016-12-14T03:31:44.000Z</published>
    <updated>2016-12-20T07:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在过去的一段时间里容器已经大量的使用到了IT软件生产的各个环节当中：从软件开发，持续集成，持续部署，测试环境到生产环境。</p>
<p>除了Docker官方的Docker Swarm, Docker Machine以及Docker Compose以外，开源软件社区还涌现了一系列的与容器相关的工具，涵盖了从容器编排，调度，监控，日志等等各个方面的需求。</p>
<p>本文将从针对软件研发流程，基于容器解决软件的持续交付问题，以及团队协作问题</p>
<h3 id="在持续集成中使用容器"><a href="#在持续集成中使用容器" class="headerlink" title="在持续集成中使用容器"></a>在持续集成中使用容器</h3><ul>
<li>构建环境统一管理</li>
</ul>
<p>在传统模式下使用持续集成工具诸如Jenkins，在部署企业持续持续集成平台的第一个问题就是多样化的构建构建环境需求，而通常的做法是将构建Agent（服务器或者虚拟机）分配给团队由团队自己管理构建服务器的环境配置信息，安装相应的构建依赖等</p>
<ul>
<li>在持续集成中使用docker</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --rm -v `pwd`:<span class="regexp">/workspace -v /</span>tmp<span class="regexp">/.m2/</span><span class="string">repository:</span><span class="regexp">/root/</span>.m2<span class="regexp">/repository --workdir /</span>workspace  <span class="string">maven:</span><span class="number">3</span>-jdk<span class="number">-8</span> <span class="regexp">/bin/</span>sh -c <span class="string">'mvn clean package'</span></div></pre></td></tr></table></figure>
<p>如上所示，我们可以非常方便的通过容器来完成软件包的构建，其中有几个点需要注意的是：</p>
<ul>
<li>[x] –rm 命令可以确保当命令执行完成后能够自动清理构建时产生的容器，我想你应该不太希望需要不定期清理构建服务器磁盘的问题吧</li>
<li>[x] -v 除了将当前源码挂载到容器当中以外，我们还可以通过挂载磁盘来缓存一些构建所需的依赖，比如maven下载的jar包，从而提高编译效率</li>
<li>[x] –workerdir 用以指定构建命令执行的工作路径，当然需要和workspace保持一致</li>
</ul>
<p>如上，基于容器我们可以快速搭建适应多种构建需求的CI构建环境，所有需要的一起就是你的构建服务器上需要的只有Docker</p>
<ul>
<li>在持续集成中使用docker-compose</li>
</ul>
<p>在某些情况下，在构建或者集成测试阶段我们可能需要使用到一些真正的第三方依赖，比如数据库或者缓存服务器。在传统的持续集成实践中，通常要么你直接使用已经部署的数据库（记得清理测试数据，并发如何保证），直接使用内存数据库来代替真实数据库，要不使用mock或者stub来进行测试。</p>
<p>当然在理想情况下我们还是希望能够使用与真实环境一直的真正的数据库或者其他中间件服务。基于docker-compose我们可以非常方便的实现对于复杂构建环境的需求</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">build</span>:</div><div class="line">  <span class="attribute">command</span>: sh -c <span class="string">'mvn --help'</span></div><div class="line">  <span class="attribute">image</span>: <span class="attribute">maven</span>:<span class="number">3</span>-jdk8</div><div class="line">  <span class="attribute">links</span>: [mysql]</div><div class="line">  <span class="attribute">volumes</span>:</div><div class="line">    - <span class="string">'.:/code'</span></div><div class="line">    - <span class="string">'/tmp/.m2/repository:/root/.m2/repository'</span></div><div class="line">  <span class="attribute">working_dir</span>: /code</div><div class="line"><span class="attribute">mysql</span>:</div><div class="line">  <span class="attribute">environment</span>: &#123;<span class="attribute">MYSQL_DATABASE</span>: test, <span class="attribute">MYSQL_PASSWORD</span>: test, <span class="attribute">MYSQL_ROOT_PASSWORD</span>: test, <span class="attribute">MYSQL_USER</span>: test&#125;</div><div class="line">  <span class="attribute">image</span>: <span class="attribute">mysql</span>:<span class="number">5.5</span></div></pre></td></tr></table></figure>
<p>同样我们以maven为例，假设我们需要在构建中使用到mysql以支持集成测试的需求</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker-compose <span class="keyword">run</span> --<span class="keyword">rm</span> build <span class="keyword">sh</span> -c 'mvn clean package' &amp;&amp; docker-compose stop &amp;&amp; docker-compose <span class="keyword">rm</span> -<span class="built_in">f</span></div></pre></td></tr></table></figure>
<ul>
<li>[x] –rm 确保在构建命令执行完成后自动清理build所产生的容器</li>
<li>[x] - docker-compose stop &amp;&amp; docker-compose rm -f 确保依赖的其它服务如mysql能够正常的退出并且清理所产生的容器</li>
</ul>
<h3 id="持续交付是文化，自动化是基石，垮职能团队协作是根本"><a href="#持续交付是文化，自动化是基石，垮职能团队协作是根本" class="headerlink" title="持续交付是文化，自动化是基石，垮职能团队协作是根本"></a>持续交付是文化，自动化是基石，垮职能团队协作是根本</h3><p>建立基于共同目标的具有跨职能协同的研发团队，是DevOps运动的根本。而自动化则是提高效率的基石。基于以上我们是如何基于容器建立我们的持续交付解决方案？</p>
<ul>
<li>基础设施自动化</li>
</ul>
<p>使用Rancher理由很简单，Rancher是目前市面上唯一一个能满足开箱即用的容器管理平台，同时能够支持多种编排引擎，如Rancher自己的Cattle，Google的K8S,以及Docker官方的Swarm作为容器编排引擎。同时Rancher提供的Catalog应用商店能够帮助研发团队自主创建所需要的服务实例</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/rancher.png" alt="http://7pn5d3.com1.z0.glb.clouddn.com/rancher.png"></p>
<ul>
<li>创建持续交付流水线</li>
</ul>
<p>建立持续交付流水线的核心问题是如何定义企业的软件交付<strong>价值流动</strong>。</p>
<p>如下图所示，我们总结了从开发，持续集成，持续交付各个阶段所使用的一些典型工具的使用，以及在各个阶段中的相关团队的相关活动，典型的DevOps相关的活动</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/devops_and_cd_pipeline.png" alt="http://7pn5d3.com1.z0.glb.clouddn.com/devops_and_cd_pipeline.png"></p>
<ul>
<li>在持续交付流水线下的团队协作</li>
</ul>
<p>正如上文所说，创建持续交付流水线的本质就是定义软件的交付的价值流动，反应正式的软件交付流程。价值的流动则涉及到团队中各个职能的成员的高度协同</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/image-base-cd-3.png" alt="http://7pn5d3.com1.z0.glb.clouddn.com/image-base-cd-3.png"></p>
<p>基于容器的持续交付实践当中以镜像作为在不同职能人员之间的价值传递物</p>
<ul>
<li>开发人员：频繁提交持续集成，通过持续的编译，打包，测试，镜像构建，自动化验收测试等环节产生可测试的候选镜像列表(如：0.1-dev)</li>
<li>测试人员：从候选测试镜像列表中，选择需要测试的目标镜像，标记为测试版本(将0.1-dev标记为0.1-test)，并且将待测试镜像自动部署到验收测试环境，完成手动探索性测试，对于已测试完成的镜像标记为预发布版本(0.1-test 标记为 0.1-beta)</li>
<li>运维人员：从预发布镜像列表中选择镜像部署到预发布环境，并且在验证通过后标记为release版本（如将0.1-beta 标记为 0.1-release）,并且发布到生产环境</li>
</ul>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/harbor_in_pratices2.png" alt="http://7pn5d3.com1.z0.glb.clouddn.com/harbor_in_pratices2.png"></p>
<p>在基于容器的持续交付实现方案当中，我们以镜像为价值传递的单元，通过镜像的持续测试以及验证，完成镜像从开发，测试到可发布的状态转变，完成软件的交付流程</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;在过去的一段时间里容器已经大量的使用到了IT软件生产的各个环节当中：从软件开发，持续集成，持续部署，测试环境到生产环境。&lt;/p&gt;
&lt;p&gt;除了
    
    </summary>
    
    
      <category term="devops" scheme="http://yunlzheng.github.io/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>关于持续交付你准备好了吗？</title>
    <link href="http://yunlzheng.github.io/2016/11/29/are-you-ready-for-cd/"/>
    <id>http://yunlzheng.github.io/2016/11/29/are-you-ready-for-cd/</id>
    <published>2016-11-29T14:05:41.000Z</published>
    <updated>2016-12-20T07:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>持续交付理论要解决的最重要的问题就是，如何以最快的方式将我们的软件交付到客户手上；如何实现可靠，迅速并且低风险的软件发布</p>
<p>在传统的软件开发方法中我们更多的关注软件研发环节，而DevOps运动则将软件研发活动的视角从传统的需求，开发，测试等活动延伸到了部署，发布以及运维过程中。</p>
<p>软件的核心价值是为软件的使用者带来收益，在过去我们经常听到开发人员说这个功能已经开发完成了。 但是在持续交付中我们认为之后将特性真正的发布到用户手上才以为则完成</p>
<a id="more"></a>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/cd.png" alt="image"></p>
<blockquote>
<p>持续交付</p>
</blockquote>
<p>而要想达到持续交付的目标即实现可靠，迅速并且低风险的软件交付需要所有相关人员（需求，开发，测试，运维）的协同工作才能保证这一目标的实现。</p>
<p>在持续交付过程中我们希望一个团队是能够充分自治的，能够完成从软件的需求，设计，开发，部署以及运维的端到端所有工作。</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/team_crop.png" alt="image"></p>
<blockquote>
<p>全功能团队</p>
</blockquote>
<p>本文将以持续交付的8个原则来阐述在持续交付过程中的那些方法和实践</p>
<h4 id="原则一-为软件的发布创建一个可重复且可靠的过程"><a href="#原则一-为软件的发布创建一个可重复且可靠的过程" class="headerlink" title="原则一 为软件的发布创建一个可重复且可靠的过程"></a>原则一 为软件的发布创建一个可重复且可靠的过程</h4><p>在传统的软件研发模式中瀑布式的工作方式深入到软件研发的各个环境。</p>
<p>在软件的发布过程中充满了各种等待：</p>
<ul>
<li>构建和运维人员在等待说明文档或者缺陷修复</li>
<li>测试人员等待“好的”版本构建出来</li>
<li>研发团队可能在新功能发布几周后才收到缺陷报告</li>
</ul>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/vms.png" alt="image"></p>
<p>最终的结果就是软件产品迟迟不能发布甚至延期，同时由于开发与测试，开发和运维之间的过长的反馈周期直接导致软件产品的质量低下，同时可能并不能真正的为使用者带来价值</p>
<p>同时如果管理者想要对整个软件交付过程进行改善将会很容易陷入到局部优化的恶性循环当中，很难真正了解交付的问题瓶颈</p>
<p>而持续部署流水线则是解决这一问题的最佳方式，建立持续部署流水线即建立了一套端到端的软件交付流程，同时在持续部署流水线的流程当中参与到软件交付的各个角色都能各司其职，形成一套高效的“拉动系统”</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/pipeline.png" alt="image"></p>
<p>开发人员持续的查看代码度量数据以及测试失败等问题，测试人员自助部署测试环境，同时运维人员也可以通过一键方式将软件部署到预生产环境以及生产环境。同时对于管理人员也可以通过度量持续部署流水线的各个环境来分析交付问题，通过合理的方式优化软件交付流程当中存在的问题。</p>
<p>而将持续部署流水线中的各个环节可以划分为如下几个不同的阶段</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/stages.png" alt="image"></p>
<ul>
<li>提交阶段</li>
</ul>
<p>该阶段主要从技术层面证明软件系统是<strong>可以工作</strong>的，该阶段会进行软件的编译，以及以单元测试为主的自动化测试，以及代码分析</p>
<ul>
<li>自动化验收测试阶段</li>
</ul>
<p>该阶段主要从功能和非功能需求角度正面软件是能够满足用户的需求以及相关的需求验收条件</p>
<ul>
<li>手动测试阶段</li>
</ul>
<p>该阶段主要试图发现那些自动化验收测试不能覆盖的缺陷，同时证明系统是否能够真正的为用户提供价值，所以在该阶段中通常需要由测试人员完成相关的探索性测试，集成测试以及用户验收测试</p>
<ul>
<li>发布阶段</li>
</ul>
<p>发布阶段则旨在将软件产品发布到用户手中包括软件包发布或者是直接将软件部署到生产环境</p>
<h4 id="原则二-将几乎所有事情自动化"><a href="#原则二-将几乎所有事情自动化" class="headerlink" title="原则二 将几乎所有事情自动化"></a>原则二 将几乎所有事情自动化</h4><p>为了搞笑的支持持续部署流水线，我们需要将除了探索性测试以外几乎所有的事情都自动化。</p>
<p>在软件交付过程中对于自动化我们可以分为两个方面，一方面是指在产生软件包过程中的如：编译，打包，单元测试，集成测试，自动化验收测试等活动。</p>
<ul>
<li>自动化构建</li>
</ul>
<p>在这个过程中我们使用例如maven,gradle这样的构建工具可以帮助自动化的完成软件的构建以及解决软件依赖问题</p>
<ul>
<li>自动化测试</li>
</ul>
<p>同时借助诸如robotframework,以及cucumber这样的自动化测试工具，以及采用BDD或者ATDD的开发实践能够帮助我们产生高质量的自动化验收测试集</p>
<ul>
<li>基础设施及代码</li>
</ul>
<p>在虚拟化技术和容器化技术盛行的今天，通过诸如AWS的CloudFormation以及Docker的Dockerfile等我们可以将我们的基础设施也变成自动化的</p>
<p>另一方面则涉及到与软件运行相关的自动化如包括基础设施的自动化管理，运行环境的自动化配置，软件本身的安装与配置等等</p>
<ul>
<li>自动化配置管理</li>
</ul>
<p>自动化配置管理工具如ansible,puppet,chef等相比传统的脚本。通过dsl环境描述的过程将服务器环境的准备过程变成自动化的，可重复的，并且能够支持大规模的集群管理</p>
<h4 id="原则三-把所有东西都纳入版本控制"><a href="#原则三-把所有东西都纳入版本控制" class="headerlink" title="原则三 把所有东西都纳入版本控制"></a>原则三 把所有东西都纳入版本控制</h4><p>在过去通常而言我们的svn或者git当中只存在我们源代码本身，而在持续交付过程当中我们认为任何会对软件的行为，质量产生影响的部分都应该要做版本化的，并且这些任何部分的每一次变更都应该通过持续部署流水线的形式来进行自动化的验证。确保任何的变更，如代码变更，测试用例变更，环境配置变更都能得到快速的验证，以及反馈</p>
<p>这些相关的“变更集”包括：基础设施描述文件,源代码，测试脚本，自动化测试用例，环境配置脚本，部署脚本，以及数据库的创建，升级，以及回滚脚本等。</p>
<p>从上面的“变更集”也可以看出，持续交付是一个团队所有人员和角色都应该参与的事情，并且每一个人都对软件交付富有责任</p>
<h4 id="原则四-提前并频繁的做让你感到痛苦的事情"><a href="#原则四-提前并频繁的做让你感到痛苦的事情" class="headerlink" title="原则四 提前并频繁的做让你感到痛苦的事情"></a>原则四 提前并频繁的做让你感到痛苦的事情</h4><p>“如果集成是让你感到痛苦的，那么每一次代码提交都应该进行集成，而且应该从项目一开始就开始这么做；如果发布软件过程前测试是一件痛苦的事情，那么就应该从项目一开始就不断的进行测试；如果软件发布是一件痛苦的事情，那么每一次代码提交在完成自动化验收测试之后都应该进行发布，或者至少发布到类生产环境”</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/ci-cd.png" alt="image"></p>
<h4 id="原则五-内建质量"><a href="#原则五-内建质量" class="headerlink" title="原则五 内建质量"></a>原则五 内建质量</h4><p>在持续交付过程中持续交付流水线定义了一套标准的，可重复的软件交付流程；同时借助大量的工具我们可以将这个流程中的机会所有事情都进行自动化。但是另外一个点就是软件质量。</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/test.jpg" alt="image"></p>
<p>根据原则四，其实我们也可以推断出如果对代码进行测试是一件痛苦的事情，那么在编写实现代码之前我们就应该写测试，TDD，ATDD，BDD等软件研发实践正是体现了这一基本原则。</p>
<p>内建质量是戴明提出的名言之一。越早的发现缺陷，修复它们的成本越低。</p>
<p>根据内建质量的原则我们可以知道在软件交付过程中，测试并不是一个阶段，所以并不应该在开发介绍之后才开始。同时测试也不应该主要是测试人员的职责，参与交付的所有人都应该对软件的质量负责</p>
<p>其中测试四象限很好的阐述了为了确保软件质量而应该做的各种类型的测试建模</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/test4.png" alt="image"></p>
<h4 id="原则六-“Done”意味着“已发布”"><a href="#原则六-“Done”意味着“已发布”" class="headerlink" title="原则六 “Done”意味着“已发布”"></a>原则六 “Done”意味着“已发布”</h4><p>在持续交付过程中认为一个特性的交付在理想状态下应该是已经发布到用户手中，或者至少已经向用户进行了演示。</p>
<p>相应的在敏捷开发中，我们每一个迭代结束后都应该想”用户代表”进行演示，并且在“用户代表”试用认为是完成了之后才意味则“Done”</p>
<p>其中“用户代表”可以是正在的用户，也可以是相关的业务人员</p>
<h4 id="原则七-交付过程是每个成员的责任"><a href="#原则七-交付过程是每个成员的责任" class="headerlink" title="原则七 交付过程是每个成员的责任"></a>原则七 交付过程是每个成员的责任</h4><p>在现实情况下，测试部门总是抱怨研发交付的软件质量差，运维总是抱怨软件不够稳定，开发总是抱怨缺陷反馈周期太长，解决问题的成本过高。</p>
<p>而在持续交付当中我们知道，对于交付团队而言最终目标是确保软件能够交付到用户手中，并且产生相应的价值。</p>
<p>而通过持续部署流水线，我们将所有参与到软件交付中的角色都联合成了一个整体，并且各个部分之间是能够快速的产生反馈，促成各个成员和角色之间的交流，并且快速的解决问题</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/SHTT-Lead-Image-Costumes.jpg" alt="image"></p>
<h4 id="原则八-持续改进"><a href="#原则八-持续改进" class="headerlink" title="原则八 持续改进"></a>原则八 持续改进</h4><p>在任何一个充满生机的组织当中持续改进是这个组织保持活力的基本要素之一。</p>
<p>参与软件交付的成员需要定期对过去一段时间内的交付工作进行回顾，去发现在这个流程当中的做的好的方面，以及做的不好的方面，并且提出解决方案。</p>
<h3 id="为了持续交付组织应该做好哪些准备？"><a href="#为了持续交付组织应该做好哪些准备？" class="headerlink" title="为了持续交付组织应该做好哪些准备？"></a>为了持续交付组织应该做好哪些准备？</h3><h4 id="交付团队而非部门"><a href="#交付团队而非部门" class="headerlink" title="交付团队而非部门"></a>交付团队而非部门</h4><p>根据康威定律“设计系统的组织，其产生的设计和架构等价于组织间的沟通结构”</p>
<p>由于存在部门墙的存在，导致开发，测试，运维之间的大量沟通成本，严重影响效率。甚至严重时部门和部门之间甚至会非常容易起冲突。</p>
<p>开发人员只管完成既定的功能缺乏系统整体性思考；测试人员根据需求文档完成测试用例，但是却不思考需求本身的合理性；运维人员则缺少对软件架构本身的理解。各个部门看似各司其职进井有条，但是却很难对软件交付的效率和质量做出太多实质性的贡献。正如开篇所述，</p>
<p>而通过“交付团队”从项目一开始让所有项目成员能够参与到软件的交付过程中，确保各个角色的人员能够频繁的进行交流，并且为了一致的目标而共同努力，这也是DevOps运动核心价值</p>
<p>而相同角色之间的沟通交流通过社团COP的形式来进行领域知识的交流和提升是一个不错的方式</p>
<h4 id="充分授权团队"><a href="#充分授权团队" class="headerlink" title="充分授权团队"></a>充分授权团队</h4><p>确保持续交付实践的成功，赋能团队，授权团队也是整个组织应该思考的问题。在持续交付中我们知道一个团队是一个应该是以做产品而非做项目为目标，需要充分授权团队，使得团队能够完成从需求，开发，测试，上线的端到端过程。</p>
<p>当然在实际情况中，组织会有更多的因素需要考虑，比如最典型的场景比如由于落后的基础设施管理方式导致运维团队往往是被动的响应研发团队的需求，并且存在大量手动的操作环节导致时间和资源的浪费</p>
<h4 id="平台化，服务化"><a href="#平台化，服务化" class="headerlink" title="平台化，服务化"></a>平台化，服务化</h4><ul>
<li>公有云，私有云，容器云</li>
</ul>
<p>通过组织级别引入虚拟化或者容器化技术以及相应的管理平台如OpenStack,Rancher,Ks8等工具可以大大减少Ops团队的运维团队，在过去需要大量手工操作的过程都可以通过虚拟化平台或者容器化平台完成，研发团队或者资源的周期从之前的几天缩短到几分钟。</p>
<ul>
<li>基础设施自服务</li>
</ul>
<p>同时对于Ops团队则专注于提供底层的基础设施资源，包括网络，安全等相关管理。并将相关的资源以服务的形式暴露给团队，各个产品团队管理自己的基础设施环境，维护持续部署流水线，以及软件运行环境的变更</p>
<ul>
<li>平台化服务</li>
</ul>
<p>同时对于企业和组织而言通过引入统一的平台化服务，可以完成对所有产品团队的统一管理，和监控。这些关键的平台化服务可能包括：统一的日志管理平台，持续交付平台，以及监控和运营平台等。</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/devops_platform.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;持续交付理论要解决的最重要的问题就是，如何以最快的方式将我们的软件交付到客户手上；如何实现可靠，迅速并且低风险的软件发布&lt;/p&gt;
&lt;p&gt;在传统的软件开发方法中我们更多的关注软件研发环节，而DevOps运动则将软件研发活动的视角从传统的需求，开发，测试等活动延伸到了部署，发布以及运维过程中。&lt;/p&gt;
&lt;p&gt;软件的核心价值是为软件的使用者带来收益，在过去我们经常听到开发人员说这个功能已经开发完成了。 但是在持续交付中我们认为之后将特性真正的发布到用户手上才以为则完成&lt;/p&gt;
    
    </summary>
    
    
      <category term="DevOps" scheme="http://yunlzheng.github.io/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Docker Registry V2浅析</title>
    <link href="http://yunlzheng.github.io/2016/11/29/docker-registry-details/"/>
    <id>http://yunlzheng.github.io/2016/11/29/docker-registry-details/</id>
    <published>2016-11-29T13:56:41.000Z</published>
    <updated>2016-12-20T07:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果你有一下需求，请阅读本文：</p>
<ul>
<li>想要理解Docker Registry V2认证机制</li>
<li>想要根据自己的业务构建企业级镜像仓库</li>
<li>想要理解Haboar这类工具的实现方式，不甘只是工具的使用者</li>
</ul>
<blockquote>
<p>当然文章的内容虽然也有参考价值，但是如果能自己阅读参考文献的内容显然意义更大。文章只是作为记录</p>
</blockquote>
<h2 id="Docker-Registry-V2的认证过程"><a href="#Docker-Registry-V2的认证过程" class="headerlink" title="Docker Registry V2的认证过程"></a>Docker Registry V2的认证过程</h2><p>首先我们来了解一下当我们尝试从docker registry拉取镜像时实际的流程是什么样的？如下图所示</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/registry_v2_auth_server.png" alt=""></p>
<ol>
<li>docker daemon尝试从docker registry拉取镜像；</li>
<li>如果docker registry需要进行授权时，registry将会放回401 Unauthorized响应，同时在返回的头信息中包含了docker client如何进行认证的信息</li>
<li>docker client根据registry返回的信息，向auth server发送请求获取认证token</li>
<li>auth server则根据自己的业务实现去验证提交的用户信息查询用户数据仓库中是否存在相关信息（数据库或者LDAP）</li>
<li>用户数据仓库返回用户的相关信息</li>
<li>auth server将会根据查询的用户信息，生成token令牌，以及当前用户所具有的相关权限信息</li>
<li>docker client携带auth server返回的token令牌再次尝试访问docker registry.</li>
<li>docker registry验证用户提交的token令牌信息，通过后则开始镜像的pull或者push动作</li>
</ol>
<h2 id="配置并启用Docker-Registry启用用户认证"><a href="#配置并启用Docker-Registry启用用户认证" class="headerlink" title="配置并启用Docker Registry启用用户认证"></a>配置并启用Docker Registry启用用户认证</h2><p>默认情况下docker registry将会从/etc/docker/registry/config.yml读取所有的配置信息。</p>
<p>完整的registry配置信息如下：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">version:</span> <span class="number">0.1</span></div><div class="line"><span class="symbol">log:</span></div><div class="line"><span class="symbol">  level:</span> debug</div><div class="line"><span class="symbol">  formatter:</span> text</div><div class="line"><span class="symbol">  fields:</span></div><div class="line"><span class="symbol">    service:</span> registry</div><div class="line"><span class="symbol">    environment:</span> staging</div><div class="line"><span class="symbol">  hooks:</span></div><div class="line">    - type: mail</div><div class="line"><span class="symbol">      disabled:</span> true</div><div class="line"><span class="symbol">      levels:</span></div><div class="line">        - panic</div><div class="line"><span class="symbol">      options:</span></div><div class="line"><span class="symbol">        smtp:</span></div><div class="line"><span class="symbol">          addr:</span> mail.example.com:<span class="number">25</span></div><div class="line"><span class="symbol">          username:</span> mailuser</div><div class="line"><span class="symbol">          password:</span> password</div><div class="line"><span class="symbol">          insecure:</span> true</div><div class="line"><span class="symbol">        from:</span> sender@example.com</div><div class="line"><span class="symbol">        to:</span></div><div class="line">          - errors@example.com</div><div class="line"><span class="symbol">loglevel:</span> debug <span class="meta"># deprecated: use <span class="string">"log"</span></span></div><div class="line"><span class="symbol">storage:</span></div><div class="line"><span class="symbol">  filesystem:</span></div><div class="line"><span class="symbol">    rootdirectory:</span> <span class="meta-keyword">/var/</span>lib/registry</div><div class="line"><span class="symbol">	maxthreads:</span> <span class="number">100</span></div><div class="line"><span class="symbol">  azure:</span></div><div class="line"><span class="symbol">    accountname:</span> accountname</div><div class="line"><span class="symbol">    accountkey:</span> base64encodedaccountkey</div><div class="line"><span class="symbol">    container:</span> containername</div><div class="line"><span class="symbol">  gcs:</span></div><div class="line"><span class="symbol">    bucket:</span> bucketname</div><div class="line"><span class="symbol">    keyfile:</span> <span class="meta-keyword">/path/</span>to/keyfile</div><div class="line"><span class="symbol">    rootdirectory:</span> <span class="meta-keyword">/gcs/</span>object<span class="meta-keyword">/name/</span>prefix</div><div class="line"><span class="symbol">    chunksize:</span> <span class="number">5242880</span></div><div class="line"><span class="symbol">  s3:</span></div><div class="line"><span class="symbol">    accesskey:</span> awsaccesskey</div><div class="line"><span class="symbol">    secretkey:</span> awssecretkey</div><div class="line"><span class="symbol">    region:</span> us-west<span class="number">-1</span></div><div class="line"><span class="symbol">    regionendpoint:</span> http:<span class="comment">//myobjects.local</span></div><div class="line"><span class="symbol">    bucket:</span> bucketname</div><div class="line"><span class="symbol">    encrypt:</span> true</div><div class="line"><span class="symbol">    keyid:</span> mykeyid</div><div class="line"><span class="symbol">    secure:</span> true</div><div class="line"><span class="symbol">    v4auth:</span> true</div><div class="line"><span class="symbol">    chunksize:</span> <span class="number">5242880</span></div><div class="line"><span class="symbol">    rootdirectory:</span> <span class="meta-keyword">/s3/</span>object<span class="meta-keyword">/name/</span>prefix</div><div class="line"><span class="symbol">  swift:</span></div><div class="line"><span class="symbol">    username:</span> username</div><div class="line"><span class="symbol">    password:</span> password</div><div class="line"><span class="symbol">    authurl:</span> https:<span class="comment">//storage.myprovider.com/auth/v1.0 or https://storage.myprovider.com/v2.0 or https://storage.myprovider.com/v3/auth</span></div><div class="line"><span class="symbol">    tenant:</span> tenantname</div><div class="line"><span class="symbol">    tenantid:</span> tenantid</div><div class="line"><span class="symbol">    domain:</span> domain name for Openstack Identity v3 API</div><div class="line"><span class="symbol">    domainid:</span> domain id for Openstack Identity v3 API</div><div class="line"><span class="symbol">    insecureskipverify:</span> true</div><div class="line"><span class="symbol">    region:</span> fr</div><div class="line"><span class="symbol">    container:</span> containername</div><div class="line"><span class="symbol">    rootdirectory:</span> <span class="meta-keyword">/swift/</span>object<span class="meta-keyword">/name/</span>prefix</div><div class="line"><span class="symbol">  oss:</span></div><div class="line"><span class="symbol">    accesskeyid:</span> accesskeyid</div><div class="line"><span class="symbol">    accesskeysecret:</span> accesskeysecret</div><div class="line"><span class="symbol">    region:</span> OSS region name</div><div class="line"><span class="symbol">    endpoint:</span> optional endpoints</div><div class="line"><span class="symbol">    internal:</span> optional internal endpoint</div><div class="line"><span class="symbol">    bucket:</span> OSS bucket</div><div class="line"><span class="symbol">    encrypt:</span> optional data encryption setting</div><div class="line"><span class="symbol">    secure:</span> optional ssl setting</div><div class="line"><span class="symbol">    chunksize:</span> optional size valye</div><div class="line"><span class="symbol">    rootdirectory:</span> optional root directory</div><div class="line"><span class="symbol">  inmemory:</span>  <span class="meta"># This driver takes no parameters</span></div><div class="line"><span class="symbol">  delete:</span></div><div class="line"><span class="symbol">    enabled:</span> false</div><div class="line"><span class="symbol">  redirect:</span></div><div class="line"><span class="symbol">    disable:</span> false</div><div class="line"><span class="symbol">  cache:</span></div><div class="line"><span class="symbol">    blobdescriptor:</span> redis</div><div class="line"><span class="symbol">  maintenance:</span></div><div class="line"><span class="symbol">    uploadpurging:</span></div><div class="line"><span class="symbol">      enabled:</span> true</div><div class="line"><span class="symbol">      age:</span> <span class="number">168</span>h</div><div class="line"><span class="symbol">      interval:</span> <span class="number">24</span>h</div><div class="line"><span class="symbol">      dryrun:</span> false</div><div class="line"><span class="symbol">    readonly:</span></div><div class="line"><span class="symbol">      enabled:</span> false</div><div class="line"><span class="symbol">auth:</span></div><div class="line"><span class="symbol">  silly:</span></div><div class="line"><span class="symbol">    realm:</span> silly-realm</div><div class="line"><span class="symbol">    service:</span> silly-service</div><div class="line"><span class="symbol">  token:</span></div><div class="line"><span class="symbol">    realm:</span> token-realm</div><div class="line"><span class="symbol">    service:</span> token-service</div><div class="line"><span class="symbol">    issuer:</span> registry-token-issuer</div><div class="line"><span class="symbol">    rootcertbundle:</span> <span class="meta-keyword">/root/</span>certs/bundle</div><div class="line"><span class="symbol">  htpasswd:</span></div><div class="line"><span class="symbol">    realm:</span> basic-realm</div><div class="line"><span class="symbol">    path:</span> <span class="meta-keyword">/path/</span>to/htpasswd</div><div class="line"><span class="symbol">middleware:</span></div><div class="line"><span class="symbol">  registry:</span></div><div class="line">    - name: ARegistryMiddleware</div><div class="line"><span class="symbol">      options:</span></div><div class="line"><span class="symbol">        foo:</span> bar</div><div class="line"><span class="symbol">  repository:</span></div><div class="line">    - name: ARepositoryMiddleware</div><div class="line"><span class="symbol">      options:</span></div><div class="line"><span class="symbol">        foo:</span> bar</div><div class="line"><span class="symbol">  storage:</span></div><div class="line">    - name: cloudfront</div><div class="line"><span class="symbol">      options:</span></div><div class="line"><span class="symbol">        baseurl:</span> https:<span class="comment">//my.cloudfronted.domain.com/</span></div><div class="line"><span class="symbol">        privatekey:</span> <span class="meta-keyword">/path/</span>to/pem</div><div class="line"><span class="symbol">        keypairid:</span> cloudfrontkeypairid</div><div class="line"><span class="symbol">        duration:</span> <span class="number">3000</span>s</div><div class="line"><span class="symbol">  storage:</span></div><div class="line">    - name: redirect</div><div class="line"><span class="symbol">      options:</span></div><div class="line"><span class="symbol">        baseurl:</span> https:<span class="comment">//example.com/</span></div><div class="line"><span class="symbol">reporting:</span></div><div class="line"><span class="symbol">  bugsnag:</span></div><div class="line"><span class="symbol">    apikey:</span> bugsnagapikey</div><div class="line"><span class="symbol">    releasestage:</span> bugsnagreleasestage</div><div class="line"><span class="symbol">    endpoint:</span> bugsnagendpoint</div><div class="line"><span class="symbol">  newrelic:</span></div><div class="line"><span class="symbol">    licensekey:</span> newreliclicensekey</div><div class="line"><span class="symbol">    name:</span> newrelicname</div><div class="line"><span class="symbol">    verbose:</span> true</div><div class="line"><span class="symbol">http:</span></div><div class="line"><span class="symbol">  addr:</span> localhost:<span class="number">5000</span></div><div class="line"><span class="symbol">  prefix:</span> <span class="meta-keyword">/my/</span>nested<span class="meta-keyword">/registry/</span></div><div class="line"><span class="symbol">  host:</span> https:<span class="comment">//myregistryaddress.org:5000</span></div><div class="line"><span class="symbol">  secret:</span> asecretforlocaldevelopment</div><div class="line"><span class="symbol">  relativeurls:</span> false</div><div class="line"><span class="symbol">  tls:</span></div><div class="line"><span class="symbol">    certificate:</span> <span class="meta-keyword">/path/</span>to<span class="meta-keyword">/x509/</span>public</div><div class="line"><span class="symbol">    key:</span> <span class="meta-keyword">/path/</span>to<span class="meta-keyword">/x509/</span>private</div><div class="line"><span class="symbol">    clientcas:</span></div><div class="line">      - <span class="meta-keyword">/path/</span>to/ca.pem</div><div class="line">      - <span class="meta-keyword">/path/</span>to<span class="meta-keyword">/another/</span>ca.pem</div><div class="line"><span class="symbol">    letsencrypt:</span></div><div class="line"><span class="symbol">      cachefile:</span> <span class="meta-keyword">/path/</span>to/cache-file</div><div class="line"><span class="symbol">      email:</span> emailused@letsencrypt.com</div><div class="line"><span class="symbol">  debug:</span></div><div class="line"><span class="symbol">    addr:</span> localhost:<span class="number">5001</span></div><div class="line"><span class="symbol">  headers:</span></div><div class="line">    X-Content-Type-Options: [nosniff]</div><div class="line"><span class="symbol">notifications:</span></div><div class="line"><span class="symbol">  endpoints:</span></div><div class="line">    - name: alistener</div><div class="line"><span class="symbol">      disabled:</span> false</div><div class="line"><span class="symbol">      url:</span> https:<span class="comment">//my.listener.com/event</span></div><div class="line"><span class="symbol">      headers:</span> <span class="params">&lt;http.Header&gt;</span></div><div class="line"><span class="symbol">      timeout:</span> <span class="number">500</span></div><div class="line"><span class="symbol">      threshold:</span> <span class="number">5</span></div><div class="line"><span class="symbol">      backoff:</span> <span class="number">1000</span></div><div class="line"><span class="symbol">redis:</span></div><div class="line"><span class="symbol">  addr:</span> localhost:<span class="number">6379</span></div><div class="line"><span class="symbol">  password:</span> asecret</div><div class="line"><span class="symbol">  db:</span> <span class="number">0</span></div><div class="line"><span class="symbol">  dialtimeout:</span> <span class="number">10</span>ms</div><div class="line"><span class="symbol">  readtimeout:</span> <span class="number">10</span>ms</div><div class="line"><span class="symbol">  writetimeout:</span> <span class="number">10</span>ms</div><div class="line"><span class="symbol">  pool:</span></div><div class="line"><span class="symbol">    maxidle:</span> <span class="number">16</span></div><div class="line"><span class="symbol">    maxactive:</span> <span class="number">64</span></div><div class="line"><span class="symbol">    idletimeout:</span> <span class="number">300</span>s</div><div class="line"><span class="symbol">health:</span></div><div class="line"><span class="symbol">  storagedriver:</span></div><div class="line"><span class="symbol">    enabled:</span> true</div><div class="line"><span class="symbol">    interval:</span> <span class="number">10</span>s</div><div class="line"><span class="symbol">    threshold:</span> <span class="number">3</span></div><div class="line"><span class="symbol">  file:</span></div><div class="line">    - file: <span class="meta-keyword">/path/</span>to<span class="meta-keyword">/checked/</span>file</div><div class="line"><span class="symbol">      interval:</span> <span class="number">10</span>s</div><div class="line"><span class="symbol">  http:</span></div><div class="line">    - uri: http:<span class="comment">//server.to.check/must/return/200</span></div><div class="line"><span class="symbol">      headers:</span></div><div class="line"><span class="symbol">        Authorization:</span> [Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==]</div><div class="line"><span class="symbol">      statuscode:</span> <span class="number">200</span></div><div class="line"><span class="symbol">      timeout:</span> <span class="number">3</span>s</div><div class="line"><span class="symbol">      interval:</span> <span class="number">10</span>s</div><div class="line"><span class="symbol">      threshold:</span> <span class="number">3</span></div><div class="line"><span class="symbol">  tcp:</span></div><div class="line">    - addr: redis-server.domain.com:<span class="number">6379</span></div><div class="line"><span class="symbol">      timeout:</span> <span class="number">3</span>s</div><div class="line"><span class="symbol">      interval:</span> <span class="number">10</span>s</div><div class="line"><span class="symbol">      threshold:</span> <span class="number">3</span></div><div class="line"><span class="symbol">proxy:</span></div><div class="line"><span class="symbol">  remoteurl:</span> https:<span class="comment">//registry-1.docker.io</span></div><div class="line"><span class="symbol">  username:</span> [username]</div><div class="line"><span class="symbol">  password:</span> [password]</div><div class="line"><span class="symbol">compatibility:</span></div><div class="line"><span class="symbol">  schema1:</span></div><div class="line"><span class="symbol">    signingkeyfile:</span> <span class="meta-keyword">/etc/</span>registry/key.json</div></pre></td></tr></table></figure>
<p>在本文当中我们主要关注auth部分配置</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">auth:</span></div><div class="line"><span class="symbol">  silly:</span></div><div class="line"><span class="symbol">    realm:</span> silly-realm</div><div class="line"><span class="symbol">    service:</span> silly-service</div><div class="line"><span class="symbol">  token:</span></div><div class="line"><span class="symbol">    realm:</span> token-realm</div><div class="line"><span class="symbol">    service:</span> token-service</div><div class="line"><span class="symbol">    issuer:</span> registry-token-issuer</div><div class="line"><span class="symbol">    rootcertbundle:</span> <span class="meta-keyword">/root/</span>certs/bundle</div><div class="line"><span class="symbol">  htpasswd:</span></div><div class="line"><span class="symbol">    realm:</span> basic-realm</div><div class="line"><span class="symbol">    path:</span> <span class="meta-keyword">/path/</span>to/htpasswd</div></pre></td></tr></table></figure>
<p>auth配置部分是可选的，docker registry当前支持3种认证实现方式：silly，token，htpasswd;registry默认不开启auth配置。用户可以自定义其中一种实现来完成registry的认证配置。</p>
<p>我们有两种方式可以实现自定义配置：</p>
<ol>
<li>创建新的config.xml,并覆盖默认配置</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker run -d -<span class="selector-tag">p</span> <span class="number">5000</span>:<span class="number">5000</span> --restart=always --name registry \</div><div class="line">  -v `pwd`/config<span class="selector-class">.yml</span>:/etc/docker/registry/config<span class="selector-class">.yml</span> \</div><div class="line">  registry:<span class="number">2</span></div></pre></td></tr></table></figure>
<ol>
<li>使用环境变量覆盖默认registry配置，以docker-compose为例：</li>
</ol>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">registry:</div><div class="line">  ports:</div><div class="line">    -<span class="ruby"> <span class="number">5000</span><span class="symbol">:</span><span class="number">5000</span>/tcp</span></div><div class="line">  image: registry:2</div><div class="line">  volumes:</div><div class="line">    -<span class="ruby"> <span class="string">"./certs:/certs:ro"</span></span></div><div class="line">    -<span class="ruby"> <span class="string">"./registry/storage:/var/lib/registry:rw"</span></span></div><div class="line">  environment:</div><div class="line">    -<span class="ruby"> REGISTRY_AUTH=token</span></div><div class="line">    -<span class="ruby"> REGISTRY_AUTH_TOKEN_REALM=<span class="symbol">http:</span>/<span class="regexp">/172.16.137.217:8080/auth</span></span></div><div class="line">    -<span class="ruby"> REGISTRY_AUTH_TOKEN_SERVICE=<span class="string">"Docker registry"</span></span></div><div class="line">    -<span class="ruby"> REGISTRY_AUTH_TOKEN_ISSUER=<span class="string">"Auth Service"</span></span></div><div class="line">    -<span class="ruby"> REGISTRY_HTTP_SECRET=secretkey</span></div><div class="line">    -<span class="ruby"> REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE=<span class="regexp">/certs/auth</span>.crt</span></div><div class="line">    -<span class="ruby"> REGISTRY_LOG_LEVEL=debug</span></div></pre></td></tr></table></figure>
<p>为了实现registry与业务系统的集成，我们配置registry auth的实现方式为token</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">auth:</span></div><div class="line"><span class="symbol">  token:</span></div><div class="line"><span class="symbol">    realm:</span> http:<span class="comment">//172.16.137.217:8080/auth</span></div><div class="line"><span class="symbol">    service:</span> Docker registry</div><div class="line"><span class="symbol">    issuer:</span> Auth Service</div><div class="line"><span class="symbol">    rootcertbundle:</span> <span class="meta-keyword">/certs/</span>auth.crt</div></pre></td></tr></table></figure>
<ul>
<li>auth.token.realm: auth server用于认证的Endpoint地址</li>
<li>auth.token.service: 用于请求auth server的携带的service名称</li>
<li>auth.token.issuer: registry信任的auth server名称</li>
<li>auth.token.rootcertbundle: 用户验证token签名的公钥文件</li>
</ul>
<blockquote>
<p>其中auth.crt为使用openssl生成的公钥文件，用于registry验证token的合法性</p>
</blockquote>
<p>以以上配置为例，我们来看看registry与auth server的实际交互过程：</p>
<p>例如当用户尝试向registry push镜像samalba/my-app时，为了完成当前操作，用户需要对repository samalba/my-app具有push的权限，registry将会返回401 Unuthorized信息</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 <span class="number">401</span> Unauthorized</div><div class="line"><span class="attribute">Content-Type</span>: application/json; charset=utf-8</div><div class="line"><span class="attribute">Docker-Distribution-Api-Version</span>: registry/2.0</div><div class="line"><span class="attribute">Www-Authenticate</span>: Bearer realm="http://172.16.137.217:8080/auth",service="Docker registry",scope="repository:samalba/my-app:pull,push"</div><div class="line"><span class="attribute">Date</span>: Thu, 10 Sep 2015 19:32:31 GMT</div><div class="line"><span class="attribute">Content-Length</span>: 235</div><div class="line"><span class="attribute">Strict-Transport-Security</span>: max-age=31536000</div><div class="line"></div><div class="line"><span class="json">&#123;<span class="attr">"errors"</span>:[&#123;<span class="attr">"code"</span>:<span class="string">"UNAUTHORIZED"</span>,<span class="attr">"message"</span>:<span class="string">"access to the requested resource is not authorized"</span>,<span class="attr">"detail"</span>:[&#123;<span class="attr">"Type"</span>:<span class="string">"repository"</span>,<span class="attr">"Name"</span>:<span class="string">"samalba/my-app"</span>,<span class="attr">"Action"</span>:<span class="string">"pull"</span>&#125;,&#123;<span class="attr">"Type"</span>:<span class="string">"repository"</span>,<span class="attr">"Name"</span>:<span class="string">"samalba/my-app"</span>,<span class="attr">"Action"</span>:<span class="string">"push"</span>&#125;]&#125;]&#125;</span></div></pre></td></tr></table></figure>
<p>其中需要注意的内容是：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Www</span>-Authenticate: <span class="keyword">Bearer </span>realm=<span class="string">"http://172.16.137.217:8080/auth"</span>,service=<span class="string">"Docker registry"</span>,scope=<span class="string">"repository:samalba/my-app:pull,push"</span></div></pre></td></tr></table></figure>
<p>这里registry告诉docker client你需要从<a href="http://172.16.137.217:8080/auth获取认证信息，并且携带请求参数service以及scope" target="_blank" rel="external">http://172.16.137.217:8080/auth获取认证信息，并且携带请求参数service以及scope</a></p>
<blockquote>
<p>返回信息根据用户设置的auth配置产生</p>
</blockquote>
<p>Docker Client提供用户输入用户名和密码后向auth server的Endpoint发送请求：</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span>//<span class="number">172.16</span><span class="meta">.137</span><span class="meta">.217</span>:<span class="number">8080</span>/auth?service=Docker registry&amp;scope=repository:samalba/my-app:pull,<span class="keyword">push</span></div></pre></td></tr></table></figure>
<p>同时在http head中包含用户相关的登录信息</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">authorized</span>: <span class="keyword">Basic </span>YWtaW46cGzc3dvmcQ=</div></pre></td></tr></table></figure>
<p>此时我们自己实现的auth server只需要从http head中通过base64获取登录的用户名和密码，并且验证登录信息的合法性，同时根据业务数据返回用户的实际权限(pull, push)即可.</p>
<p>基于JWT协议规范使用私钥对返回内容签名生成相应的Token即可。</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 <span class="number">200</span> OK</div><div class="line"><span class="attribute">Content-Type</span>: application/json</div><div class="line"></div><div class="line"><span class="json">&#123;<span class="attr">"token"</span>: <span class="string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IlBZWU86VEVXVTpWN0pIOjI2SlY6QVFUWjpMSkMzOlNYVko6WEdIQTozNEYyOjJMQVE6WlJNSzpaN1E2In0.eyJpc3MiOiJhdXRoLmRvY2tlci5jb20iLCJzdWIiOiJqbGhhd24iLCJhdWQiOiJyZWdpc3RyeS5kb2NrZXIuY29tIiwiZXhwIjoxNDE1Mzg3MzE1LCJuYmYiOjE0MTUzODcwMTUsImlhdCI6MTQxNTM4NzAxNSwianRpIjoidFlKQ08xYzZjbnl5N2tBbjBjN3JLUGdiVjFIMWJGd3MiLCJhY2Nlc3MiOlt7InR5cGUiOiJyZXBvc2l0b3J5IiwibmFtZSI6InNhbWFsYmEvbXktYXBwIiwiYWN0aW9ucyI6WyJwdXNoIl19XX0.QhflHPfbd6eVF4lM9bwYpFZIV0PfikbyXuLx959ykRTBpe3CYnzs6YBK8FToVb5R47920PVLrh8zuLzdCr9t3w"</span>, <span class="attr">"expires_in"</span>: <span class="number">3600</span>,<span class="attr">"issued_at"</span>: <span class="string">"2009-11-10T23:00:00Z"</span>&#125;</span></div></pre></td></tr></table></figure>
<p>当docker client获取到token之后，client会将得到的token作为http请求头信息再次尝试访问registry，registry使用公钥解密并验证token内容，并根据token包含的权限信息完成实际的操作</p>
<h2 id="如何生成符合Docker-Registry规范的Json-Web-Token详解"><a href="#如何生成符合Docker-Registry规范的Json-Web-Token详解" class="headerlink" title="如何生成符合Docker Registry规范的Json Web Token详解"></a>如何生成符合Docker Registry规范的Json Web Token详解</h2><p>生成用户加密的公私钥</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">openssl req -newkey rsa:<span class="number">4096</span> -nodes -sha256 -keyout auth.key -x509 -days <span class="number">365</span> -out auth.crt</div><div class="line">Generating a <span class="number">4096</span> bit RSA private key</div><div class="line">................................................................................................................................................................................................................++</div><div class="line">........................................................................++</div><div class="line">writing new private key to <span class="string">'auth.key'</span></div><div class="line">-----</div><div class="line">You are about to be asked to enter information that will be incorporated</div><div class="line">into your certificate request.</div><div class="line">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class="line">There are quite a few fields but you can leave some blank</div><div class="line">For some fields there will be a default value,</div><div class="line">If you enter <span class="string">'.'</span>, the field will be left blank.</div><div class="line">-----</div><div class="line">Country Name (<span class="number">2</span> letter <span class="keyword">code</span>) [AU]:DE</div><div class="line">State or Province Name (full name) [Some-State]:Example State</div><div class="line">Locality Name (eg, city) []:Example City</div><div class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:Example Company</div><div class="line">Organizational Unit Name (eg, section) []:Example Organizational Unit</div><div class="line">Common Name (e.g. server FQDN or YOUR name) []:auth.example.com</div><div class="line">Email Address []:admin@auth.example.com</div></pre></td></tr></table></figure>
<p>此时我们将得到两个文件加密文件auth.cert和auth.key</p>
<h3 id="Docker-Registry端"><a href="#Docker-Registry端" class="headerlink" title="Docker Registry端"></a>Docker Registry端</h3><p>auth.cert对应docker registry的auth.token.rootcertbundle配置项，用户验证docker client请求时提供的token是否合法</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">auth:</span></div><div class="line"><span class="symbol">  token:</span></div><div class="line"><span class="symbol">    realm:</span> http:<span class="comment">//172.16.137.217:8080/auth</span></div><div class="line"><span class="symbol">    service:</span> Docker registry</div><div class="line"><span class="symbol">    issuer:</span> Auth Service</div><div class="line"><span class="symbol">    rootcertbundle:</span> <span class="meta-keyword">/certs/</span>auth.crt</div></pre></td></tr></table></figure>
<h3 id="Auth-Server端"><a href="#Auth-Server端" class="headerlink" title="Auth Server端"></a>Auth Server端</h3><p>当Auth Server拦截到到认证请求</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span>//<span class="number">172.16</span><span class="meta">.137</span><span class="meta">.217</span>:<span class="number">8080</span>/auth?service=Docker registry&amp;scope=repository:samalba/my-app:pull,<span class="keyword">push</span></div></pre></td></tr></table></figure>
<p>根据请求信息验证授权完成之后，我们将根据以下规则生成json web token内容。</p>
<p>生成token主要由3个部分组成：</p>
<ol>
<li>生成jwt的Header信息</li>
</ol>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"typ"</span>: <span class="string">"JWT"</span>,</div><div class="line">    <span class="attr">"alg"</span>: <span class="string">"ES256"</span>,</div><div class="line">    <span class="attr">"kid"</span>: <span class="string">"PYYO:TEWU:V7JH:26JV:AQTZ:LJC3:SXVJ:XGHA:34F2:2LAQ:ZRMK:Z7Q6"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>typ: 当使用JWT时，typ固定为“JWT”</li>
<li>alg: 对应私钥文件的加密方式，本示例中即对应auth.key文件的加密方式，可以通过代码读取私钥文件获取</li>
<li>kid: 根据docker提供的规则生成公钥文件的kid,registry会根据同样的算法获取公钥的kid,如果匹配失败则认证失败</li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- Take <span class="keyword">the</span> DER encoded public key which <span class="keyword">the</span> JWT <span class="keyword">token</span> was signed against.</div><div class="line">- Create <span class="keyword">a</span> SHA256 hash out <span class="keyword">of</span> <span class="keyword">it</span> <span class="keyword">and</span> truncate <span class="built_in">to</span> <span class="number">240</span>bits.</div><div class="line">- Split <span class="keyword">the</span> <span class="built_in">result</span> <span class="keyword">into</span> <span class="number">12</span> base32 encoded groups <span class="keyword">with</span> : <span class="keyword">as</span> delimiter.</div></pre></td></tr></table></figure>
<blockquote>
<p>对于基于golang开发的同学而言可以直接使用<a href="https://github.com/docker/libtrust/blob/master/key.go提供的KeyID方法获取公钥的keyid" target="_blank" rel="external">https://github.com/docker/libtrust/blob/master/key.go提供的KeyID方法获取公钥的keyid</a></p>
</blockquote>
<ol>
<li>设置jwt的payload信息Claim Set</li>
</ol>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"iss"</span>: <span class="string">"Auth Service"</span>, <span class="comment">//需要注意必须与auth.token.issuer配置保持一致</span></div><div class="line">    <span class="string">"sub"</span>: <span class="string">"some id"</span>, <span class="comment">//根据业务系统的规则自定义生成即可</span></div><div class="line">    <span class="string">"aud"</span>: <span class="string">"Docker registry"</span>,<span class="comment">// 从请求的service参数获取</span></div><div class="line">    <span class="string">"exp"</span>: <span class="number">1415387315</span>, <span class="comment">//过期时间</span></div><div class="line">    <span class="string">"nbf"</span>: <span class="number">1415387015</span>, <span class="comment">// not before 可选参数</span></div><div class="line">    <span class="string">"iat"</span>: <span class="number">1415387015</span>, <span class="comment">// 正式发行时间</span></div><div class="line">    <span class="string">"jti"</span>: <span class="string">"tYJCO1c6cnyy7kAn0c7rKPgbV1H1bFws"</span>, <span class="comment">//随机生成即可</span></div><div class="line">    <span class="comment">// access根据请求的scope获取，当然业务系统要判断用户的实际权限并在actions中放回</span></div><div class="line">    <span class="string">"access"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="string">"type"</span>: <span class="string">"repository"</span>,</div><div class="line">            <span class="string">"name"</span>: <span class="string">"samalba/my-app"</span>,</div><div class="line">            <span class="string">"actions"</span>: [</div><div class="line">                <span class="string">"pull"</span>,</div><div class="line">                <span class="string">"push"</span></div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3,最后使用auth.key私钥进行签名</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">RSASHA256(</div><div class="line">  <span class="name">base64UrlEncode</span>(<span class="name">header</span>) + <span class="string">"."</span> +</div><div class="line">  base64UrlEncode(<span class="name">payload</span>),</div><div class="line">  'auth.key file content'  </div><div class="line">)</div></pre></td></tr></table></figure>
<p>从代码来看应该更容易理解</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; header = getJWTHeader();</div><div class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; claims = getJWTClaims();</div><div class="line"></div><div class="line"><span class="keyword">return</span> Jwts.builder()</div><div class="line">            .setHeader(header)</div><div class="line">            .setClaims(claims)</div><div class="line">            .signWith(SignatureAlgorithm.RS256,getPrivateKey());</div></pre></td></tr></table></figure>
<h2 id="代码实现简化版"><a href="#代码实现简化版" class="headerlink" title="代码实现简化版"></a>代码实现简化版</h2><p>添加Endpoint用于响应docker client认证请求</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistryAuthController</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RegistryAuthServer registryAuthServer;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/auth"</span>)</span></div><div class="line">    <span class="keyword">public</span> ResponseEntity auth(<span class="keyword">final</span> HttpServletRequest request) &#123;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.ok(registryAuthServer.auth(request));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加RegistryAuthServer实现授权验证以及生成Token令牌</p>
<blockquote>
<p>备注：作为示例keyid我们直接使用docker提供的libtrust库从公钥文件生成，另外代码中的硬编码，字符常量请忽略~just demo..</p>
</blockquote>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> RegistryAuthServer &#123;</div><div class="line"></div><div class="line">   <span class="keyword">public</span> RegistryTokenResponse auth(HttpServletRequest request) &#123;</div><div class="line">        <span class="keyword">String</span> token = getDefaultJwtToken(request.getParameter(<span class="string">"client_id"</span>),</div><div class="line">                request.getParameter(<span class="string">"service"</span>),</div><div class="line">                getAccess(request.getParameter(<span class="string">"scope"</span>))).compact();</div><div class="line">        <span class="built_in">return</span> <span class="keyword">new</span> RegistryTokenResponse(token);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;AccessScope&gt; getAccess(<span class="keyword">String</span> scope) &#123;</div><div class="line">        <span class="built_in">return</span> Strings.isNullOrEmpty(scope) ?</div><div class="line">                Collections.EMPTY_LIST : Collections.singletonList(<span class="keyword">new</span> AccessScope(scope));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> JwtBuilder getDefaultJwtToken(<span class="keyword">String</span> clientId, <span class="keyword">String</span> service, List&lt;AccessScope&gt; access) &#123;</div><div class="line">        <span class="built_in">try</span> &#123;</div><div class="line">            <span class="built_in">return</span> Jwts.builder()</div><div class="line">                    .setHeader(getJWTHeader())</div><div class="line">                    .setClaims(getDefaultClaims(clientId, service, access))</div><div class="line">                    .signWith(SignatureAlgorithm.RS256, getPrivateKey());</div><div class="line"></div><div class="line">        &#125; <span class="built_in">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServiceRuntimeException(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Map&lt;<span class="keyword">String</span>, Object&gt; getDefaultClaims(<span class="keyword">String</span> clientId, <span class="keyword">String</span> service, List&lt;AccessScope&gt; access) &#123;</div><div class="line">        Map&lt;<span class="keyword">String</span>, Object&gt; claims = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        claims.<span class="built_in">put</span>(<span class="string">"access"</span>, access);</div><div class="line">        claims.<span class="built_in">put</span>(<span class="string">"iss"</span>, <span class="string">"Auth Service"</span>);</div><div class="line">        claims.<span class="built_in">put</span>(<span class="string">"sub"</span>, clientId);</div><div class="line">        claims.<span class="built_in">put</span>(<span class="string">"aud"</span>, service);</div><div class="line">        claims.<span class="built_in">put</span>(<span class="string">"exp"</span>, <span class="keyword">new</span> Date(DateTime.now().plusDays(<span class="number">7</span>).getMillis()));</div><div class="line">        claims.<span class="built_in">put</span>(<span class="string">"iat"</span>, <span class="keyword">new</span> Date());</div><div class="line">        claims.<span class="built_in">put</span>(<span class="string">"jti"</span>, <span class="string">"jwtid"</span>);</div><div class="line">        <span class="built_in">return</span> claims;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> HashMap&lt;<span class="keyword">String</span>, Object&gt; getJWTHeader() throws Exception &#123;</div><div class="line">        PrivateKey privateKey = <span class="keyword">this</span>.getPrivateKey();</div><div class="line">        HashMap&lt;<span class="keyword">String</span>, Object&gt; header = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        header.<span class="built_in">put</span>(<span class="string">"typ"</span>, <span class="string">"JWT"</span>);</div><div class="line">        header.<span class="built_in">put</span>(<span class="string">"alg"</span>, privateKey.getAlgorithm());</div><div class="line">        header.<span class="built_in">put</span>(<span class="string">"kid"</span>, getPublicKeyId());</div><div class="line">        <span class="built_in">return</span> header;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">protected</span> PublicKey getPublicCertKey() throws Exception &#123;</div><div class="line">        <span class="keyword">byte</span>[] keyBytes = DatatypeConverter</div><div class="line">                .parseBase64Binary(<span class="keyword">new</span> <span class="keyword">String</span>(formatPublicKey(<span class="string">"auth.crt"</span>).getBytes(), Charset.forName(<span class="string">"UTF-8"</span>)));</div><div class="line">        <span class="built_in">return</span> CertificateFactory.getInstance(<span class="string">"X509"</span>).generateCertificate(<span class="keyword">new</span> ByteArrayInputStream(keyBytes)).getPublicKey();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> PrivateKey getPrivateKey() throws Exception &#123;</div><div class="line">        java.security.Security.addProvider(<span class="keyword">new</span> org.bouncycastle.jce.provider.BouncyCastleProvider());</div><div class="line">        <span class="keyword">byte</span>[] keyBytes = <span class="keyword">new</span> Base64().decode(formatPrivateKey(getResourceBytes(<span class="string">"auth.key"</span>)));</div><div class="line">        <span class="built_in">return</span> KeyFactory.getInstance(<span class="string">"RSA"</span>).generatePrivate(<span class="keyword">new</span> PKCS8EncodedKeySpec(keyBytes));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> formatPrivateKey(<span class="keyword">byte</span>[] keyBytes) throws UnsupportedEncodingException &#123;</div><div class="line">        <span class="built_in">return</span> <span class="keyword">new</span> <span class="keyword">String</span>(keyBytes, <span class="string">"UTF-8"</span>)</div><div class="line">                .replaceAll(<span class="string">"(-+BEGIN RSA PRIVATE KEY-+\\r?\\n|-+END RSA PRIVATE KEY-+\\r?\\n?)"</span>, <span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> formatPublicKey(<span class="keyword">String</span> resources) throws IOException &#123;</div><div class="line">        <span class="built_in">return</span> <span class="keyword">new</span> <span class="keyword">String</span>(getResourceBytes(resources), <span class="string">"UTF-8"</span>)</div><div class="line">                .replaceAll(<span class="string">"(-+BEGIN CERTIFICATE-+\\r?\\n|-+END CERTIFICATE-+\\r?\\n?)"</span>, <span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> getPublicKeyId() &#123;</div><div class="line">        <span class="built_in">return</span> <span class="string">"MXNV:KLDD:GEH3:DWME:7CTG:E2HZ:QJDM:LJXI:35NL:FZZ3:LPE2:IOKY"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getResourceBytes(<span class="keyword">String</span> publicCertKeyFileName) throws IOException &#123;</div><div class="line">        ClassPathResource classPathResource = <span class="keyword">new</span> ClassPathResource(publicCertKeyFileName);</div><div class="line">        <span class="built_in">File</span> file = classPathResource.getFile();</div><div class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(file);</div><div class="line">        <span class="keyword">byte</span>[] keyBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[in.<span class="built_in">available</span>()];</div><div class="line">        in.<span class="built_in">read</span>(keyBytes);</div><div class="line">        in.<span class="built_in">close</span>();</div><div class="line">        <span class="built_in">return</span> keyBytes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://docs.docker.com/registry/spec/auth/token/" target="_blank" rel="external">https://docs.docker.com/registry/spec/auth/token/</a></li>
<li><a href="https://github.com/docker/distribution/blob/master/docs/spec/auth/token.md" target="_blank" rel="external">https://github.com/docker/distribution/blob/master/docs/spec/auth/token.md</a></li>
<li><a href="https://docs.docker.com/registry/configuration/" target="_blank" rel="external">https://docs.docker.com/registry/configuration/</a></li>
<li><a href="https://github.com/cesanta/docker_auth" target="_blank" rel="external">https://github.com/cesanta/docker_auth</a></li>
<li><a href="https://github.com/kwk/docker-registry-setup" target="_blank" rel="external">https://github.com/kwk/docker-registry-setup</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你有一下需求，请阅读本文：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;想要理解Docker Registry V2认证机制&lt;/li&gt;
&lt;li&gt;想要根据自己的业务构建企业级镜像仓库&lt;/li&gt;
&lt;li&gt;想要理解Haboar这类工具的实现方式，不甘只是工具的使用者&lt;/li&gt;
&lt;/ul&gt;
&lt;b
    
    </summary>
    
    
      <category term="docker" scheme="http://yunlzheng.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>ES6 10分钟入门</title>
    <link href="http://yunlzheng.github.io/2016/09/18/startup-es6/"/>
    <id>http://yunlzheng.github.io/2016/09/18/startup-es6/</id>
    <published>2016-09-18T07:36:15.000Z</published>
    <updated>2016-12-20T07:38:54.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="转换器"><a href="#转换器" class="headerlink" title="转换器"></a>转换器</h4><p>目前ES6并没有在主流浏览器上直接支持，如果想使用ES6的新特性需要使用转换器，将ES6的代码转换成ES5</p>
<ul>
<li>Tracerur</li>
<li>Babeljs</li>
</ul>
<h4 id="变量定义Let"><a href="#变量定义Let" class="headerlink" title="变量定义Let"></a>变量定义Let</h4><p>在ES6之前的版本当中我们使用var来声明变量，但是var的行为和其它编程语言相比显得非常奇怪，通常而言变量的作用范围只存在于其声明的作用域当中，但是在js中var直接声明的变量不同，无论何时声明，其作用域都是顶级作用域</p>
<p>我们在if作用域中声明了name变量</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span></span> getPonyFullName(pony) &#123;</div><div class="line">    <span class="keyword">if</span> (pony.isChampion) &#123;</div><div class="line">        var <span class="keyword">name</span> = <span class="string">'Champion '</span> + pony.<span class="keyword">name</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">name</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> pony.<span class="keyword">name</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其等同于</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span></span> getPonyFullName(pony) &#123;</div><div class="line">    var <span class="keyword">name</span>;</div><div class="line">    <span class="keyword">if</span> (pony.isChampion) &#123;</div><div class="line">      <span class="keyword">name</span> = <span class="string">'Champion '</span> + pony.<span class="keyword">name</span>;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">name</span>;</div><div class="line">    &#125;</div><div class="line">    // <span class="keyword">name</span> is still accessible here,</div><div class="line">    // and can have a <span class="keyword">value</span> from the <span class="keyword">if</span> block</div><div class="line">    <span class="keyword">return</span> pony.<span class="keyword">name</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>无论在何处使用var声明变量，其作用域都是作用的整个函数块当中</p>
<p>而es6中引入了let关键字用于声明变量，可以确保变量的作用域只存在于其声明的地方</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span></span> getPonyFullName(pony) &#123;</div><div class="line">  <span class="keyword">if</span> (pony.isChampion) &#123;</div><div class="line">      let <span class="keyword">name</span> = <span class="string">'Champion '</span> + pony.<span class="keyword">name</span>;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">name</span>;</div><div class="line">    &#125;</div><div class="line">    // <span class="keyword">name</span> is not accessible here</div><div class="line">    <span class="keyword">return</span> pony.<span class="keyword">name</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="常量定义-Constants"><a href="#常量定义-Constants" class="headerlink" title="常量定义-Constants"></a>常量定义-Constants</h4><p>除了let意外，es6还定义了一个新的keywords用于定义常量<strong>const</strong>,当你使用const声明一个变量时，这个变量必须立即初始化，并且不能再次赋值</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const PONIES_IN_RACE = <span class="number">6</span>;</div><div class="line">PONIES_IN_RACE = <span class="number">7</span>; <span class="comment">// SyntaxError</span></div></pre></td></tr></table></figure>
<p>和let一样，const声明的常量作用范围和其声明范围一致；</p>
<p>主要注意的是，当你使用对象初始化一个常量是你是可以继续修改这个常量的</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> PONY = &#123;&#125;</div><div class="line">PONY.<span class="built_in">color</span> = <span class="string">'blue'</span></div></pre></td></tr></table></figure>
<p>但是你不能对这个常量重新赋值</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">const PONY</span> = &#123;&#125;;</div><div class="line"><span class="attribute">PONY</span> = &#123;color: <span class="string">'red'</span>&#125; // SyntaxError</div></pre></td></tr></table></figure>
<h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><p>在新的ES6中当我们要创建对象的属性和变量名一致时，我们可以通过ES6提供的语法糖快速创建对象</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPony</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> name = <span class="string">'Rainbow Dash'</span>;</div><div class="line">    <span class="keyword">let</span> <span class="built_in">color</span> = <span class="string">'blue'</span>;</div><div class="line">    <span class="keyword">return</span> &#123; <span class="attribute">name</span>: name, <span class="attribute">color</span>: <span class="built_in">color</span> &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以简化为</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPony</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> name = <span class="string">'Rainbow Dash'</span>;</div><div class="line">    <span class="keyword">let</span> <span class="built_in">color</span> = <span class="string">'blue'</span>;</div><div class="line">    <span class="keyword">return</span> &#123; name, <span class="built_in">color</span> &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><p>在ES6中支持一种新的方式来从对象或者数组中获取值</p>
<p>在ES5中</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var httpOptions</span> = &#123; timeout: 2000, isCache: true &#125;;</div><div class="line"></div><div class="line"><span class="attribute">var httpTimeout</span> = httpOptions.timeout;</div><div class="line"><span class="attribute">var httpCache</span> = httpOptions.isCache;</div></pre></td></tr></table></figure>
<p>而在ES6中我们可以这样写</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let httpOptions = &#123; <span class="string">timeout:</span> <span class="number">2000</span>, <span class="string">isCache:</span> <span class="literal">true</span> &#125;;</div><div class="line"></div><div class="line">let &#123; <span class="string">timeout:</span> httpTimeout, <span class="string">isCache:</span> httpCache &#125; = httpOptions;</div></pre></td></tr></table></figure>
<p>当你希望声明的变量和对象的属性一致时，甚至可以直接写成</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> httpOptions = &#123; <span class="built_in">timeout</span>: <span class="number">2000</span>, isCache: true &#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123; <span class="built_in">timeout</span>, isCache &#125; = httpOptions;</div><div class="line">// 这里定义了名为<span class="built_in">timeout</span>和isCache的两个变量</div></pre></td></tr></table></figure>
<p>对于嵌套的对象同样适用</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> httpOptions = &#123; timeout: <span class="number">2000</span>, cache: &#123; age: <span class="number">2</span> &#125; &#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123; cache: &#123; age &#125; &#125; = httpOptions;</div><div class="line">// 这里我们得到一个名为age的变量其值为<span class="number">2</span></div></pre></td></tr></table></figure>
<p>解构赋值同样适用于数组对象</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let timeouts = [<span class="number">1000</span>, <span class="number">2000</span>, <span class="number">3000</span>];</div><div class="line"></div><div class="line">let [shortTimeout, mediumTimeout] = timeouts;</div></pre></td></tr></table></figure>
<p>另外一个有趣的用法是在函数的多返回值上</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomPonyInRace</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> pony = &#123; <span class="attr">name</span>: <span class="string">'Rainbow Dash'</span> &#125;;</div><div class="line">    <span class="keyword">let</span> position = <span class="number">2</span>;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">return</span> &#123; pony, position &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> &#123; position, pony &#125; = randomPonyInRace();</div></pre></td></tr></table></figure>
<p>同理如果你只关心函数返回值得一部分，那么这样既可</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomPonyInRace</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> pony = &#123; <span class="attr">name</span>: <span class="string">'Rainbow Dash'</span> &#125;;</div><div class="line">    <span class="keyword">let</span> position = <span class="number">2</span>;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">return</span> &#123; pony, position &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> &#123; pony &#125; = randomPonyInRace();</div></pre></td></tr></table></figure>
<h4 id="默认参数和默认值"><a href="#默认参数和默认值" class="headerlink" title="默认参数和默认值"></a>默认参数和默认值</h4><p>当我们定义函数时，对于可选参数我们可以这样写：</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPonies</span>(<span class="params">size, page</span>) </span>&#123;</div><div class="line">    <span class="built_in">size</span> = <span class="built_in">size</span> || <span class="number">10</span>;</div><div class="line">    page = page || <span class="number">1</span>;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    server.get(<span class="built_in">size</span>, page);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可选参数通常具有默认值，当“||”操作左边的值为undefined时，将会返回右边的值</p>
<p>所以此时，当使用函数时</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">getPonies</span>(<span class="number">20</span>, <span class="number">2</span>);</div><div class="line"><span class="selector-tag">getPonies</span>(); <span class="comment">// 等价于 getPonies(10, 1);</span></div><div class="line"><span class="selector-tag">getPonies</span>(<span class="number">15</span>); <span class="comment">// 等价于 getPonies(15, 1);</span></div></pre></td></tr></table></figure>
<p>当然为了更好的可读性，ES6还提供了更好的方式，我们还可以直接在函数声明时定义默认值</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span></span> getPonies(<span class="built_in">size</span> = <span class="number">10</span>, page = <span class="number">1</span>) &#123;</div><div class="line">    server.get(<span class="built_in">size</span>, page);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除此之外，默认参数的的值还可以是函数调用</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span></span> getPonies(<span class="built_in">size</span> = defaultSize(), page = <span class="number">1</span>) &#123;</div><div class="line">    //  defaultSize方法将在未提供<span class="built_in">size</span>参数的情况下调用</div><div class="line">    server.get(<span class="built_in">size</span>, page);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>甚至还可以使用其它变量，全局变量，函数参数</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span></span> getPonies(<span class="built_in">size</span> = defaultSize(), page = <span class="built_in">size</span> - <span class="number">1</span>) &#123;</div><div class="line">    server.get(<span class="built_in">size</span>, page);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认参数在解构赋值时同样适用</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123; <span class="built_in">timeout</span> = <span class="number">1000</span> &#125; = httpOptions;</div></pre></td></tr></table></figure>
<h4 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a>可变长参数</h4><p>在之前版本的JS当中我们可以通过arguments来获取函数的所有操作</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addPonies</span><span class="params">(ponies)</span> &#123;</span></div><div class="line">    <span class="keyword">for</span> (var <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; arguments.<span class="built_in">length</span>; <span class="built_in">i</span>++) &#123;</div><div class="line">      poniesInRace.push(arguments[i]);</div><div class="line">    &#125;</div><div class="line"> &#125;</div><div class="line"> addPonies(<span class="string">'Rainbow Dash'</span>, <span class="string">'Pinkie Pie'</span>);</div></pre></td></tr></table></figure>
<p>在上面的例子里面我们声明了ponies变量，但是实际上没有任何用处</p>
<p>在ES6中提供了更好的语法来帮助我们创建可变参数的函数</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addPonies</span><span class="params">(<span class="rest_arg">...ponies</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (let pony of ponies) &#123;</div><div class="line">      poniesInRace.push(pony);</div><div class="line">&#125; &#125;</div></pre></td></tr></table></figure>
<p>相比于ES5中的实现，此时ponies是一个真正的数组对象，我们可以更加显示的进行操作</p>
<p>该操作在解构赋值时同样适用</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [winner, ...losers] = poniesInRace;</div></pre></td></tr></table></figure>
<p>该操作同时还支持反向操作，如：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">let ponyPrices</span> = [12, 3, 4];</div><div class="line"><span class="attribute">let minPrice</span> = Math.min(...ponyPrices);</div></pre></td></tr></table></figure>
<h4 id="类-class"><a href="#类-class" class="headerlink" title="类-class"></a>类-class</h4><p>在ES6中引入的另外一个非常重要的概念类。</p>
<p>在新的ES6语法当中我们可以非常简单的去创建一个对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pony</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(color) &#123;</div><div class="line">      <span class="keyword">this</span>.color = color;</div><div class="line">    &#125;</div><div class="line">    toString() &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.color&#125;</span> pony`</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> bluePony = <span class="keyword">new</span> Pony(<span class="string">'blue'</span>);</div><div class="line"><span class="built_in">console</span>.log(bluePony.toString()); <span class="comment">// blue pony</span></div></pre></td></tr></table></figure>
<p>同样的ES6中的class也支持静态方法</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Pony</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="title">defaultSpeed</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> speed = Pony.defaultSpeed();</div></pre></td></tr></table></figure>
<p>class还可以包含自己的get,set属性</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pony</span> </span>&#123;</div><div class="line">    <span class="keyword">get</span> color() &#123;</div><div class="line">      console.log(<span class="string">'get color'</span>);</div><div class="line">      <span class="keyword">return</span> <span class="built_in">this</span>._color;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">set</span> color(<span class="keyword">new</span><span class="type">Color</span>) &#123;</div><div class="line">      console.log(`<span class="keyword">set</span> color $&#123;<span class="keyword">new</span><span class="type">Color</span>&#125;`);</div><div class="line">      <span class="built_in">this</span>._color = <span class="keyword">new</span><span class="type">Color</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let pony = <span class="keyword">new</span> <span class="type">Pony</span>();</div><div class="line">pony.color = <span class="string">'red'</span>; <span class="comment">// set color red</span></div><div class="line">console.log(pony.color); <span class="comment">// get color</span></div></pre></td></tr></table></figure>
<p>类的继承也是同样支持的</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">    speed() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pony</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let pony = <span class="keyword">new</span> <span class="type">Pony</span>();</div><div class="line">console.log(pony.speed());</div></pre></td></tr></table></figure>
<p>Animal被称为基类，Pony则称为派生类。派生类可以覆盖基类的方法</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">    speed() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pony</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">    speed() &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.speed() + <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">let pony = <span class="keyword">new</span> <span class="type">Pony</span>();</div><div class="line">console.log(pony.speed());</div></pre></td></tr></table></figure>
<p>通过关键字super我们可以在派生类中调用基的方法</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">    constructor(speed) &#123;</div><div class="line">        <span class="keyword">this</span>.speed = speed;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pony</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line"></div><div class="line">    constructor(speed, color) &#123;</div><div class="line">        <span class="keyword">super</span>(speed);</div><div class="line">        <span class="keyword">this</span>.color = color;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let pony = <span class="keyword">new</span> <span class="type">Pony</span>(<span class="number">20</span>, <span class="symbol">'blu</span>e');</div><div class="line">console.log(pony.speed); <span class="comment">// 20</span></div></pre></td></tr></table></figure>
<h4 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h4><p>在ES5中当我们使用异步编程如ajax时我们通常会定义一些列的回调函数。</p>
<p>大量使用回调函数会严重影响代码的可读性，以及可维护性。陷入我们俗称的依赖地狱中</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">getUser(<span class="name">login</span>, function (<span class="name">user</span>) &#123;</div><div class="line">    getRights(<span class="name">user</span>, function (<span class="name">rights</span>) &#123;</div><div class="line">      updateMenu(<span class="name">rights</span>)<span class="comment">;</span></div><div class="line">    &#125;)<span class="comment">;</span></div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>在ES6中引用Promise的最主要目的就是为了简化我们的异步编程操作</p>
<p>对比如下基于promises我们的异步代码：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">getUser(login)</div><div class="line">    .<span class="keyword">then</span>(<span class="keyword">function</span> <span class="title"></span>(user) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="type">getRights(user)</span>;</div><div class="line">    &#125;)</div><div class="line">    .<span class="keyword">then</span>(<span class="keyword">function</span> <span class="title"></span>(rights) &#123;</div><div class="line">      updateMenu(rights);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>相比而言基于promises的代码具有更好的可读性</p>
<p>对于一个Promises对象而言，其包含三种基本状态：</p>
<ul>
<li>pending: 操作还未完成时</li>
<li>fulfilled： 操作完成并且成功</li>
<li>rejected： 操作失败时</li>
</ul>
<p>初始化一个Promises对象需要两个参数resilove和reject</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> getUser = <span class="function"><span class="keyword">function</span> (<span class="params">login</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">      <span class="comment">// async stuff, like fetching users from server, returning a response</span></div><div class="line">      <span class="keyword">if</span> (response.status === <span class="number">200</span>) &#123;</div><div class="line">        resolve(response.data);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        reject(<span class="string">'No user'</span>);</div><div class="line">&#125; &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>对Promises处于fulfilled状态时将会调用resolve函数，而当操作失败时则调用reject函数</p>
<p>一旦你创建完成一个promises对象之后</p>
<p>你就可以通过then方法注册一个回调函数</p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">getUser(login)</div><div class="line">    .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(user)</span> &#123;</span></div><div class="line">      console.<span class="built_in">log</span>(user);</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<p>另外一个有趣的用法是扁平化代码结构,当resolve函数的返回值同样是一个promises时</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> getUser(login)</div><div class="line">    .<span class="keyword">then</span>(<span class="keyword">function</span> <span class="title"></span>(user) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="type">getRights(user)</span> // getRights <span class="keyword">is</span> returning a promise</div><div class="line">        .<span class="keyword">then</span>(<span class="keyword">function</span> <span class="title"></span>(rights) &#123;</div><div class="line">          <span class="keyword">return</span> <span class="type">updateMenu(rights)</span>;</div><div class="line">        &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>可以简化成</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   getUser(login)</div><div class="line">    .<span class="keyword">then</span>(<span class="keyword">function</span> <span class="title"></span>(user) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="type">getRights(user)</span>; // getRights 返回一个 promise</div><div class="line">    &#125;)</div><div class="line">    .<span class="keyword">then</span>(<span class="keyword">function</span> <span class="title"></span>(rights) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="type">updateMenu(rights)</span>;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>对于异常处理，你可以通过一个函数处理所有promise的错误和异常</p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">getUser(login)</div><div class="line">    .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(user)</span> &#123;</span></div><div class="line">      <span class="keyword">return</span> getRights(user);</div><div class="line">    &#125;)</div><div class="line">    .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(rights)</span> &#123;</span></div><div class="line">      <span class="keyword">return</span> updateMenu(rights);</div><div class="line">    &#125;)</div><div class="line">    .<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> &#123;</span></div><div class="line">      console.<span class="built_in">log</span>(<span class="built_in">error</span>);</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>ES6中箭头函数也是一个非常有用的特性，它可以帮组我们大大简化我们的代码，尤其是对于回调函数以及匿名函数</p>
<p>匿名函数的情况</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">getUser(login)</div><div class="line">    .<span class="keyword">then</span>(<span class="keyword">function</span> <span class="title"></span>(user) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="type">getRights(user)</span>; // getRights <span class="keyword">is</span> returning a promise</div><div class="line">    &#125;)</div><div class="line">    .<span class="keyword">then</span>(<span class="keyword">function</span> <span class="title"></span>(rights) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="type">updateMenu(rights)</span>;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>可以简化成</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getUser(login)</div><div class="line">    .<span class="keyword">then</span>(user =&gt; getRights(user))</div><div class="line">    .<span class="keyword">then</span>(rights =&gt; updateMenu(rights))</div></pre></td></tr></table></figure>
<p>在回调函数当中我们经常会遇到this作用域的问题,在ES5中我们可以通过对重新定义变量指向this或则使用作用域bind</p>
<figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var maxFinder = &#123;</div><div class="line">    <span class="built_in">max</span>: <span class="number">0</span>,</div><div class="line">    find: <span class="function"><span class="keyword">function</span> (</span>numbers) &#123;</div><div class="line">      var <span class="built_in">self</span> = this;</div><div class="line">      numbers.forEach(</div><div class="line">        <span class="function"><span class="keyword">function</span> (</span>element) &#123;</div><div class="line">          <span class="keyword">if</span> (element &gt; <span class="built_in">self</span>.<span class="built_in">max</span>) &#123;</div><div class="line">            <span class="built_in">self</span>.<span class="built_in">max</span> = element;</div><div class="line">          &#125;</div><div class="line">&#125;); &#125;</div><div class="line">&#125;;</div><div class="line">maxFinder.find([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</div><div class="line"></div><div class="line">console.<span class="built_in">log</span>(maxFinder.<span class="built_in">max</span>);</div></pre></td></tr></table></figure>
<p>bind作用域</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> maxFinder = &#123;</div><div class="line">    <span class="attr">max</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">find</span>: <span class="function"><span class="keyword">function</span> (<span class="params">numbers</span>) </span>&#123;</div><div class="line">    numbers.forEach(</div><div class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (element &gt; <span class="keyword">this</span>.max) &#123;</div><div class="line">            <span class="keyword">this</span>.max = element;</div><div class="line">        &#125;</div><div class="line">    &#125;.bind(<span class="keyword">this</span>));</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">maxFinder.find([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(maxFinder.max);</div></pre></td></tr></table></figure>
<p>而在ES6中我们可以直接使用箭头函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> maxFinder = &#123;</div><div class="line">    <span class="attr">max</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">find</span>: <span class="function"><span class="keyword">function</span> (<span class="params">numbers</span>) </span>&#123;</div><div class="line">        numbers.forEach(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">if</span> (element &gt; <span class="keyword">this</span>.max) &#123;</div><div class="line">                <span class="keyword">this</span>.max = element;</div><div class="line">            &#125;</div><div class="line">        &#125;) ;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">maxFinder.find([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(maxFinder.max);</div></pre></td></tr></table></figure>
<h4 id="Sets-and-Maps"><a href="#Sets-and-Maps" class="headerlink" title="Sets and Maps"></a>Sets and Maps</h4><p>相比于ES5而言，在ES6中我们有了新的Set和Map来创建专门的数据结构</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> cedric = &#123; <span class="attribute">id:</span><span class="string"> 1, name</span>: <span class="string">'Cedric'</span> &#125;;</div><div class="line"><span class="keyword">let</span> users = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">users.set(cedric.id, cedric); <span class="comment">// adds a user</span></div><div class="line"><span class="built_in">console</span>.log(users.has(cedric.id)); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(users.size); <span class="comment">// 1</span></div><div class="line">users.delete(cedric.id); <span class="comment">// removes the user</span></div></pre></td></tr></table></figure>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> cedric = &#123; <span class="attribute">id:</span><span class="string"> 1, name</span>: <span class="string">'Cedric'</span> &#125;;</div><div class="line"><span class="keyword">let</span> users = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">users.add(cedric); <span class="comment">// adds a user</span></div><div class="line"><span class="built_in">console</span>.log(users.has(cedric)); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(users.size); <span class="comment">// 1</span></div><div class="line">users.delete(cedric); <span class="comment">// removes the user</span></div></pre></td></tr></table></figure>
<h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><p>在ES5当中对字符串进行格式化通常是一件比较麻烦的事情</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">let fullname</span> = <span class="string">'Miss '</span> + firstname + <span class="string">' '</span> + lastname;</div></pre></td></tr></table></figure>
<p>模板字符串可以帮组我们大大简化这个操作</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fullname = <span class="string">`Miss <span class="subst">$&#123;firstname&#125;</span> <span class="subst">$&#123;lastname&#125;</span>`</span>;</div></pre></td></tr></table></figure>
<h4 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h4><p>在过去原生JS一直缺乏模块管理机制，在过去我们经常听到CommonJS规范，以及AMD规范。响应的我们可以使用诸如RequireJS这样的工具来模拟模块管理。但所有的这些都不是实时上的标准</p>
<p>而现在在ES6中终于有了标准的原生模块管理机制</p>
<p>service.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">bet</span>(<span class="params">race, pony</span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">race</span>) </span>&#123;</div><div class="line"><span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用新的export关键字可以帮助我们快速定义对外暴露的两个函数</p>
<p>当我们需要在其它模块中使用service.js定义的函数时</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import &#123; <span class="keyword">bet, </span>start &#125; from <span class="string">'./races_service'</span><span class="comment">;</span></div><div class="line"><span class="keyword">bet(race, </span>pony1)<span class="comment">;</span></div><div class="line">start(race)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>同时在使用import导入模块时，我们还能设置响应的别名</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; start <span class="keyword">as</span> startRace &#125; <span class="keyword">from</span> <span class="string">'./service'</span>;</div><div class="line"></div><div class="line">startRace(race);</div></pre></td></tr></table></figure>
<p>当你需要使用模块提供的所有功能时，还可以使用“*”</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> racesService <span class="keyword">from</span> <span class="string">'./service'</span></div><div class="line">racesService.bet(race, pony1);</div><div class="line">racesService.start(race);</div></pre></td></tr></table></figure>
<p>如果你的模块只有一个方法,或者变量，或者类时可以直接使用export default</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pony.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Pony</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">// service.js</span></div><div class="line"><span class="keyword">import</span> Pony <span class="keyword">from</span> <span class="string">'./pony'</span>;</div></pre></td></tr></table></figure>
<h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;转换器&quot;&gt;&lt;a href=&quot;#转换器&quot; class=&quot;headerlink&quot; title=&quot;转换器&quot;&gt;&lt;/a&gt;转换器&lt;/h4&gt;&lt;p&gt;目前ES6并没有在主流浏览器上直接支持，如果想使用ES6的新特性需要使用转换器，将ES6的代码转换成ES5&lt;/p&gt;
&lt;ul&gt;
&lt;li
    
    </summary>
    
    
      <category term="web" scheme="http://yunlzheng.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>上网的正确姿势</title>
    <link href="http://yunlzheng.github.io/2016/05/20/the-right-way-to-network/"/>
    <id>http://yunlzheng.github.io/2016/05/20/the-right-way-to-network/</id>
    <published>2016-05-20T04:14:11.000Z</published>
    <updated>2016-12-20T07:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近苦于云梯的各种不稳定，在经历了几天无法正常上网的情况下，还是决定在digitalocean部署一个Shadowsocks的服务实例。</p>
<p>大致过程很简单：</p>
<p>在Digitalocean创建一台Ubuntu的实例：</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/digitalocean.png" alt=""></p>
<p>安装毕竟启动shadowsocks即可</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get <span class="keyword">install</span> python-pip</div><div class="line">pip <span class="keyword">install</span> shadowsocks</div></pre></td></tr></table></figure>
<p>添加配置文件/etc/shadowsocks.json</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"server"</span>:<span class="string">"my_server_ip"</span>,</div><div class="line">    <span class="attr">"server_port"</span>:<span class="number">8388</span>,</div><div class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</div><div class="line">    <span class="attr">"password"</span>:<span class="string">"barfoo!"</span>,</div><div class="line">    <span class="attr">"timeout"</span>:<span class="number">600</span>,</div><div class="line">    <span class="attr">"method"</span>:<span class="string">"table"</span>,</div><div class="line">    <span class="attr">"auth"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>启动服务或停止服务</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ssserver -c <span class="regexp">/etc/</span>shadowsocks.json -d start</div><div class="line"><span class="comment"># or</span></div><div class="line">ssserver -c <span class="regexp">/etc/</span>shadowsocks.json -d stop</div></pre></td></tr></table></figure>
<p>完成服务器启动之后，本机安装一个<a href="https://shadowsocks.org/en/download/clients.html" target="_blank" rel="external">ShadowsocksX客户端即可</a></p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/local_config.png" alt=""></p>
<p>这里配置你的服务器IP地址，端口，以及密码即可。</p>
<p>完成后ShadowsocksX默认在本地的1080端口建立代理服务，这个时候你就可以使用诸如chrome的SwitchySharp在浏览器中通过代理上网</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/SwitchySharp_config.png" alt=""></p>
<p>另外通过在SwitchySharp配置切换规则我们可以自动完成对不同域名网站的访问方式切换。</p>
<p>另外可以使用Github的<a href="https://github.com/gfwlist/gfwlist" target="_blank" rel="external">https://github.com/gfwlist/gfwlist</a>项目，该相互维护了一个官方的已被屏蔽的网站列表。</p>
<p>添加Online Rule List可以避免大部分的手动规则设置</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/SwitchySharp_config2.png" alt=""></p>
<p>大致如此。</p>
<h3 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h3><blockquote>
<p>另外关于DigitalOcean的计费模式</p>
</blockquote>
<p>另外关于DigitalOcean的计费模式的计费是按时计费，按照你开通的VPS使用时间来计费，当你删除VPS液滴后将会停止计费（关机还会照样计费）</p>
<p>所以在科学上网的同时，我们还要进行一些简单的计划经济手段，方式很简单，无外乎通过自动化的手段去创建一个Shadowsocs的实例，按需创建/销毁即可.</p>
<p>这里给一个例子，基于digitalocean api可以通过python创建和销毁实例。这里用fabric包装了一下，大致两个命令：</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fab create_droplet:<span class="built_in">token</span>=&lt;your digitalOcean <span class="built_in">token</span>&gt; <span class="meta"># 创建droplet并且安装运行shadowsocks</span></div><div class="line">fab destroy_all:<span class="built_in">token</span>=&lt;your digitalOcean <span class="built_in">token</span>&gt; <span class="meta"># 销毁所有的，所有的实例</span></div></pre></td></tr></table></figure>
<p>实例代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> digitalocean</div><div class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> *</div><div class="line"></div><div class="line">env.use_ssh_config = <span class="keyword">True</span></div><div class="line">env.user = <span class="string">'root'</span></div><div class="line"></div><div class="line"><span class="meta">@task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_droplet</span><span class="params">(token, name=<span class="string">"shadowsocks-instance"</span>, image=<span class="string">"ubuntu-14-04-x64"</span>, region=<span class="string">"nyc3"</span>)</span>:</span></div><div class="line"></div><div class="line">    droplet = digitalocean.Droplet(</div><div class="line">        token=token,</div><div class="line">        name=name,</div><div class="line">        region=region, <span class="comment"># New York 2</span></div><div class="line">        image=image, <span class="comment"># Ubuntu 14.04 x64</span></div><div class="line">        size_slug=<span class="string">'512mb'</span>,  <span class="comment"># 512MB</span></div><div class="line">        backups=<span class="keyword">False</span>,</div><div class="line">        ssh_keys=list_sshkeys(token))</div><div class="line">    droplet.create()</div><div class="line"></div><div class="line">    status = <span class="string">""</span></div><div class="line">    <span class="keyword">while</span> status != <span class="string">"completed"</span>:</div><div class="line">        actions = droplet.get_actions()</div><div class="line">        <span class="keyword">for</span> action <span class="keyword">in</span> actions:</div><div class="line">            action.load()</div><div class="line">            <span class="comment"># Once it shows complete, droplet is up and running</span></div><div class="line">            status = action.status</div><div class="line">            <span class="keyword">print</span> <span class="string">"&gt;&gt;&gt;&#123;0&#125;"</span>.format(action.status)</div><div class="line"></div><div class="line">    droplet.load()</div><div class="line">    ip_address = droplet.ip_address</div><div class="line">    <span class="keyword">print</span> <span class="string">"start provision shadowsocks instance in: &#123;0&#125;"</span>.format(ip_address)</div><div class="line">    execute(provision_shadownsocks, ip_address=ip_address, hosts=[ip_address])</div><div class="line"></div><div class="line"><span class="meta">@task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">provision_shadownsocks</span><span class="params">(ip_address)</span>:</span></div><div class="line">    run(<span class="string">"echo start provision"</span>)</div><div class="line">    run(<span class="string">"apt-get update"</span>)</div><div class="line">    run(<span class="string">"apt-get install -y python-pip"</span>)</div><div class="line">    run(<span class="string">"pip install shadowsocks"</span>)</div><div class="line">    put(<span class="string">"shadowsocks.json"</span>, <span class="string">"/etc/shadowsocks.json"</span>)</div><div class="line">    run(<span class="string">"ssserver -c /etc/shadowsocks.json -d start"</span>)</div><div class="line"></div><div class="line"><span class="meta">@task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">destroy_all</span><span class="params">(token)</span>:</span></div><div class="line">    <span class="keyword">for</span> droplet <span class="keyword">in</span> list_droplets(token):</div><div class="line">        droplet.destroy()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_sshkeys</span><span class="params">(token)</span>:</span></div><div class="line">    manager = digitalocean.Manager(token=token)</div><div class="line">    <span class="keyword">return</span> [ssh_key.id <span class="keyword">for</span> ssh_key <span class="keyword">in</span> manager.get_all_sshkeys()]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_droplets</span><span class="params">(token)</span>:</span></div><div class="line">    manager = digitalocean.Manager(token=token)</div><div class="line">    my_droplets = manager.get_all_droplets()</div><div class="line">    <span class="keyword">return</span> my_droplets</div></pre></td></tr></table></figure>
<p>备注：如果要在本机运行这个代码需要将ssh的StrictHostKeyChecking禁用掉:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#~/.ssh/config</span></div><div class="line"><span class="attribute">StrictHostKeyChecking</span> <span class="literal">no</span></div></pre></td></tr></table></figure>
<p>另外shadowsocks.json是从本地上传，需要的代码相同的路径创建shadowsocks.json文件,例如</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"server"</span>:<span class="string">"0.0.0.0"</span>,</div><div class="line">  <span class="attr">"server_port"</span>:<span class="number">8388</span>,</div><div class="line">  <span class="attr">"local_port"</span>:<span class="number">1080</span>,</div><div class="line">  <span class="attr">"password"</span>:<span class="string">"barfoo!"</span>,</div><div class="line">  <span class="attr">"timeout"</span>:<span class="number">600</span>,</div><div class="line">  <span class="attr">"method"</span>:<span class="string">"table"</span>,</div><div class="line">  <span class="attr">"auth"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近苦于云梯的各种不稳定，在经历了几天无法正常上网的情况下，还是决定在digitalocean部署一个Shadowsocks的服务实例。&lt;/p&gt;
&lt;p&gt;大致过程很简单：&lt;/p&gt;
&lt;p&gt;在Digitalocean创建一台Ubuntu的实例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;
    
    </summary>
    
    
      <category term="Others" scheme="http://yunlzheng.github.io/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>python与鸭子类型</title>
    <link href="http://yunlzheng.github.io/2016/05/19/python-with-polymorphism/"/>
    <id>http://yunlzheng.github.io/2016/05/19/python-with-polymorphism/</id>
    <published>2016-05-19T06:44:59.000Z</published>
    <updated>2016-12-20T07:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子</p>
</blockquote>
<h3 id="动态且强类型的Python"><a href="#动态且强类型的Python" class="headerlink" title="动态且强类型的Python"></a>动态且强类型的Python</h3><p>动态且强类型，如何理解？</p>
<p>在Python命令行中，如果我们输入以下代码，结果如何？</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; variable = <span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; variable = <span class="string">'123'</span></div></pre></td></tr></table></figure>
<p>上面的代码在Python当中是绝对合法的，那是不是意味着对象variable的类型被改变了呢？ 答案是“不是”，首先variable本身并不是一个对象，它只是一个引用。在第一行中我们创建了一个integer对象，并且将其绑定到variable这个名称中，而第二行我们创建了一个新的string对象，并且将其重新绑定到variable中，当没有任何引用关联到第一个integer对象那么这个对象的引用计数就会变成0，将会出发python的垃圾回收机制。</p>
<p>综上所述，说Python是动态类型是因为我们在使用变量过程中可以不关心引用的真正类型，直到最后我们真正调用时；说Python是强类型，是因为在Python中对象本身的类型是不可以改变的。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</div><div class="line">x = choice([<span class="string">'Hello'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'e'</span>, <span class="string">'e'</span>]])</div><div class="line">x.<span class="keyword">count</span>(<span class="string">'e'</span>)</div></pre></td></tr></table></figure>
<p>在Python当中我们会尽量避免使用诸如type, isinstance以及issubckass等函数，因为当使用这个函数时，会毁掉你代码的多态性，在Python当中真正重要的事情是关心如何让对象按照你所希望的方式工作，不管它是否是正确的类型。</p>
<p>这就涉及到另外一个动态语言的概念“鸭子类型”，正如开篇所提到的那句话“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子”</p>
<h3 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h3><p>在鸭子类型的编程形式当中，类型不是我们关心的第一要素，真正重要的在于这个对象的行为。</p>
<p>我们以静态类型语言当中的加法为例子，在静态语言当中我们通常只能对于相同类型的对象进行加法运算。假如使用了不同类型的对象进行加法运算编辑器将会直接提示错误。</p>
<p>而在Python当中只要对象实现了<strong>add</strong>方法，那么就意味着这个对象是可以进行加法运算的:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, val)</span></span>:</div><div class="line">         <span class="keyword">self</span>.val = val</div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(<span class="keyword">self</span>, other)</span></span>:</div><div class="line">         <span class="keyword">return</span> <span class="keyword">self</span>.__class_<span class="number">_</span>(<span class="keyword">self</span>.val+other.val)</div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">         <span class="keyword">return</span> str(<span class="keyword">self</span>.val)</div><div class="line"></div><div class="line">a = A(<span class="number">2</span>)</div><div class="line">b = A(<span class="number">3</span>)</div><div class="line">print a + b</div></pre></td></tr></table></figure>
<p>类似于<strong>add</strong>,还包括诸如<strong><strong>getitem</strong></strong> <strong><strong>setitem</strong></strong> 等方法都是同样的道理</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">print a[<span class="number">0</span>]</div><div class="line"># 等价于</div><div class="line">print <span class="type">list</span>.__getitem__(a, <span class="number">0</span>)</div></pre></td></tr></table></figure>
<p>这里鸭子类型的产生是由于在Python当中我们对a使用“索引”操作时，我们并不用整整关心a的正是类型，我们只需要关心a所引用的对象是否包含<strong>getitem</strong>这样的方法。</p>
<h3 id="继承与鸭子类型"><a href="#继承与鸭子类型" class="headerlink" title="继承与鸭子类型"></a>继承与鸭子类型</h3><p>在Java当中我们使用接口来定义行为，通过继承超类实现代码共享。而在Python当中由于鸭子类型的存在，除了代码共享以外(如mixin)我们很少有对继承的需要：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">quck</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"duck qucking"</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">walk</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"duck is walking"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreenDuck</span><span class="params">(Duck)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">quck</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"green duck is qucking."</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonWithDuckSkil</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">quck</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"em~ i'm not a real duck"</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">walk</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"All peope can waking."</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">duck_game</span><span class="params">(duck)</span>:</span></div><div class="line">  duck.quck()</div><div class="line">  duck.walk()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">  duck = Duck()</div><div class="line">  greenDuck = GreenDuck()</div><div class="line">  people = PersonWithDuckSkil()</div><div class="line"></div><div class="line">  duck_game(duck)</div><div class="line">  duck_game(greenDuck)</div><div class="line">  duck_game(people)</div></pre></td></tr></table></figure>
<p>基于鸭子类型实现完全由程序员自身进行控制，在增加了灵活性的同时还需要程序员自身的更高要求，虽然没有语言层面的约束，但是还是要保持心中有“接口”的状态。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;动态且强类型的Python&quot;&gt;&lt;a href=&quot;#动态且强类型的Python&quot; class=&quot;headerli
    
    </summary>
    
    
      <category term="python" scheme="http://yunlzheng.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python查漏补缺</title>
    <link href="http://yunlzheng.github.io/2016/04/21/basic_python/"/>
    <id>http://yunlzheng.github.io/2016/04/21/basic_python/</id>
    <published>2016-04-21T13:28:49.000Z</published>
    <updated>2016-12-20T07:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python文件头"><a href="#Python文件头" class="headerlink" title="Python文件头"></a>Python文件头</h3><ul>
<li>设置脚本执行解释器路径</li>
</ul>
<p>告诉操作系统执行脚本时调用/usr/bin下的python解释器</p>
<figure class="highlight d"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/python</span></div></pre></td></tr></table></figure>
<p>防止在/usr/bin路径下不存在python解释器的情况，从env设置中查找Python安装路径，再调用相应路径下的解释器</p>
<figure class="highlight d"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env python</span></div></pre></td></tr></table></figure>
<ul>
<li>设置脚本脚本编码格式</li>
</ul>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># coding=utf-8</span></div></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># -*- coding: utf-8 -*-</span></div></pre></td></tr></table></figure>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul>
<li>单行注释</li>
</ul>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># This is comment</span></div></pre></td></tr></table></figure>
<ul>
<li>多行注释</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">'''</div><div class="line">This is mutil line comment</div><div class="line">'''</div></pre></td></tr></table></figure>
<ul>
<li>函数说明</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_func</span><span class="params">()</span>:</span></div><div class="line">  <span class="string">'This is function doc you can show it by some_func.__doc__'</span></div><div class="line">  <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><ul>
<li>序列解包</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">values = <span class="number">1.</span> <span class="number">2.</span> <span class="number">3</span> # This is tuple</div><div class="line">x, y, z = values</div></pre></td></tr></table></figure>
<ul>
<li>相等性和同一性</li>
</ul>
<p>is运算符判定同一性而不是相等性</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">x</span> = <span class="attr">y</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="attr">z</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="attr">x</span> == y <span class="comment"># True</span></div><div class="line"><span class="attr">x</span> == z <span class="comment"># True</span></div><div class="line">x is y <span class="comment"># True</span></div><div class="line">x is z <span class="comment"># False</span></div></pre></td></tr></table></figure>
<ul>
<li>列表与迭代</li>
</ul>
<p>当需要迭代一个巨大的序列时xrange会比range更高效，range函数一次产生整个序列，而xrange一次只创建一个数</p>
<p>实现原理可以参考：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">irange</span>(<span class="title">object</span>):</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, start, <span class="keyword">end</span>, step=<span class="number">1</span>)</span></span>:</div><div class="line">        <span class="keyword">self</span>.start = start</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">end</span> = <span class="keyword">end</span></div><div class="line">        <span class="keyword">self</span>.step = step</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.start + <span class="keyword">self</span>.step &gt;= <span class="keyword">self</span>.<span class="symbol">end:</span></div><div class="line">            raise StopIteration</div><div class="line">        <span class="keyword">self</span>.start = <span class="keyword">self</span>.start + <span class="keyword">self</span>.step</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.start</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> irange(<span class="number">1</span>, <span class="number">10</span>):</div><div class="line">        print x</div></pre></td></tr></table></figure>
<ul>
<li>编号迭代</li>
</ul>
<p>使用enumerate可以迭代索引-值</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> <span class="keyword">index</span>, <span class="keyword">str</span> in enumerate(strings):</div><div class="line">  pass</div></pre></td></tr></table></figure>
<ul>
<li>in <scope> 消除exec和evel的全局污染</scope></li>
</ul>
<p>限制exec执行的作用域只存在于scope当中</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</div><div class="line">scope = &#123;&#125;</div><div class="line"><span class="keyword">exec</span> <span class="string">'sqrt = 1'</span> <span class="keyword">in</span> scope</div><div class="line">scope[<span class="string">'sqrt'</span>] <span class="comment"># 1</span></div></pre></td></tr></table></figure>
<p>为evel提供命名空间</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scope = &#123;&#125;</div><div class="line">scope[<span class="string">'x'</span>] = <span class="number">2</span></div><div class="line">scope[<span class="string">'y'</span>] = <span class="number">3</span></div><div class="line"><span class="function"><span class="title">eval</span><span class="params">(<span class="string">'x*y'</span>, scope)</span></span></div></pre></td></tr></table></figure>
<h3 id="函数参数参数"><a href="#函数参数参数" class="headerlink" title="函数参数参数"></a>函数参数参数</h3><ul>
<li>收集参数<em>和*</em></li>
</ul>
<p>python函数定义时的参数可以分为位置参数和关键字参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(greeting, name)</span>:</span></div><div class="line">  <span class="keyword">pass</span></div><div class="line"></div><div class="line">hello(<span class="string">"welcome"</span>, name=<span class="string">'world'</span>)</div></pre></td></tr></table></figure>
<p>使用*收集其余的位置参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_func</span><span class="params">(*args)</span>:</span></div><div class="line">  <span class="keyword">pass</span> <span class="comment"># args is tuple</span></div><div class="line"></div><div class="line">some_func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div></pre></td></tr></table></figure>
<p>使用**收集其余的关键字参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_func</span><span class="params">(*kargs)</span>:</span></div><div class="line">  <span class="keyword">pass</span> <span class="comment">#kargs is dict</span></div><div class="line"></div><div class="line">some_func(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</div></pre></td></tr></table></figure>
<ul>
<li>参数分配<em>和*</em></li>
</ul>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">params = (<span class="number">1</span>, <span class="number">2</span>)</div><div class="line">some_func(<span class="name">*params</span>)</div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">params = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;</div><div class="line"><span class="function"><span class="title">some_func</span><span class="params">(**params)</span></span></div></pre></td></tr></table></figure>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul>
<li>私有化</li>
</ul>
<p>Python并没有真正的私有化支持</p>
<p>使用双下划线,类内部使用双下划线开始的名称都被翻译为’_<classname>__<methodname>‘</methodname></classname></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Some</span></span>:</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__pri_method</span></span>:</div><div class="line">    print <span class="symbol">'you</span> can call <span class="keyword">this</span> fake <span class="keyword">private</span> method'</div><div class="line"></div><div class="line">s = <span class="type">Some</span>()</div><div class="line">s._Some__pri_method()</div></pre></td></tr></table></figure>
<p>另外类的函数名称前包含单下划线的方法都不会被imports语句导入</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Python文件头&quot;&gt;&lt;a href=&quot;#Python文件头&quot; class=&quot;headerlink&quot; title=&quot;Python文件头&quot;&gt;&lt;/a&gt;Python文件头&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;设置脚本执行解释器路径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;告诉操作系统执行脚本
    
    </summary>
    
    
      <category term="python" scheme="http://yunlzheng.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python函数式编程</title>
    <link href="http://yunlzheng.github.io/2016/04/21/functional-programming-with-python/"/>
    <id>http://yunlzheng.github.io/2016/04/21/functional-programming-with-python/</id>
    <published>2016-04-21T13:28:49.000Z</published>
    <updated>2016-12-20T07:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introducation"><a href="#Introducation" class="headerlink" title="Introducation"></a>Introducation</h2><ul>
<li>Function Programming has a long history</li>
<li>List 1958</li>
<li>Renaissance: F#, Haskell, Erlang…</li>
<li>Used in industry<ul>
<li>Trading</li>
<li>Algorithmic</li>
<li>Telecommunication(Concurrency)</li>
</ul>
</li>
</ul>
<h2 id="Features-Of-Functional-Programming"><a href="#Features-Of-Functional-Programming" class="headerlink" title="Features Of Functional Programming"></a>Features Of Functional Programming</h2><ul>
<li>Everything is a function</li>
<li>Pure functions without side effects</li>
<li>Immutable data structures</li>
<li>Preserve state in functions</li>
<li>Recursion instead of loops / iteration</li>
</ul>
<h2 id="Advantages-of-Functional-Programming"><a href="#Advantages-of-Functional-Programming" class="headerlink" title="Advantages of Functional Programming"></a>Advantages of Functional Programming</h2><ul>
<li>Absence of side effects can make your programs more robust</li>
<li>Programs tend to be more modular come and typically in smaller building blocks</li>
<li>Better testable - call with same parameters always return same result</li>
<li>Focus on algorithms</li>
<li>Conceptional fit with parallel / concurrent programming</li>
<li>Live updates - Install new release while running</li>
</ul>
<h2 id="Disadvantages-of-Functional-Programming"><a href="#Disadvantages-of-Functional-Programming" class="headerlink" title="Disadvantages of Functional Programming"></a>Disadvantages of Functional Programming</h2><ul>
<li>Solutions to the same problem can look very different than procedural / object-oriented ones</li>
<li>Find good developers can be hard</li>
<li>Not equally useful for all types of problems</li>
<li>Input/output are side effects and need special treatment</li>
<li>Recursion is “an order of magnitude more complex” than loops/iteration</li>
<li>Immutable data structures may increase run times</li>
</ul>
<h2 id="Python’s-Functional-Features-Overview"><a href="#Python’s-Functional-Features-Overview" class="headerlink" title="Python’s Functional Features - Overview"></a>Python’s Functional Features - Overview</h2><ul>
<li>Pure functions (sort of)</li>
<li>Closures - hold state in functions</li>
<li>Functions as object and decorators</li>
<li>Immutable data types</li>
<li>Lazy evaluation - generators</li>
<li>List(dictionary, set) comprehensions</li>
<li>functions, itertools, lambda, map, filter</li>
<li>Recursion - try to avoid, recursion limit has a reason</li>
</ul>
<h1 id="Pure-Functions-No-Side-Effects"><a href="#Pure-Functions-No-Side-Effects" class="headerlink" title="Pure Functions - No Side Effects"></a>Pure Functions - No Side Effects</h1><ul>
<li>No side effect, return value only</li>
<li>“Shallow copy” problem</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dp_pure</span><span class="params">(data)</span>:</span></div><div class="line">  <span class="string">"""</span></div><div class="line">  Returen copty times two.</div><div class="line">  """</div><div class="line">  <span class="keyword">return</span> data * <span class="number">2</span></div></pre></td></tr></table></figure>
<ul>
<li>An ooverloaded * that modifies data or causes other side effects would make the function un-pure</li>
<li>No guarantee of pureness</li>
<li>Pure functions by convention</li>
</ul>
<h2 id="Side-effects"><a href="#Side-effects" class="headerlink" title="Side effects"></a>Side effects</h2><ul>
<li>Side effects are common</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_side_effect</span><span class="params">(my_list)</span>:</span></div><div class="line">  <span class="string">"""</span></div><div class="line">  Modify list appending 100.</div><div class="line">  """</div><div class="line">  my_list.append(<span class="number">100</span>)</div></pre></td></tr></table></figure>
<h2 id="Functions-are-Objects"><a href="#Functions-are-Objects" class="headerlink" title="Functions are Objects"></a>Functions are Objects</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span></span>:</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span></span>:</div><div class="line">  <span class="keyword">return</span> <span class="number">2</span></div></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;&gt; my_funcs = &#123;'a': func1, 'b': func2&#125;</div><div class="line">&gt;&gt;&gt;&gt; my_funcs[<span class="string">'a'</span>](<span class="link"></span>)</div><div class="line">&gt;&gt;&gt;&gt; my_funcs[<span class="string">'b'</span>](<span class="link"></span>)</div></pre></td></tr></table></figure>
<ul>
<li>Everything is an object</li>
</ul>
<h2 id="Closures-and-“Currying”"><a href="#Closures-and-“Currying”" class="headerlink" title="Closures and “Currying”"></a>Closures and “Currying”</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(outer_arg)</span></span>:</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(inner_arg)</span></span>:</div><div class="line">    <span class="keyword">return</span> inner_arg * outer_arg</div><div class="line">  <span class="keyword">return</span> inner</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt;&gt; func = outer[<span class="number">10</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt;&gt; func(<span class="number">5</span>）</div><div class="line"><span class="meta">&gt;&gt;</span>&gt;&gt; func.__closure_<span class="number">_</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt;&gt; func.__closure_<span class="number">_</span>[<span class="number">0</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt;&gt; func.__closure_<span class="number">_</span>[<span class="number">0</span>].cell_contents</div></pre></td></tr></table></figure>
<h2 id="Partail-Functions"><a href="#Partail-Functions" class="headerlink" title="Partail Functions"></a>Partail Functions</h2><ul>
<li>Module functools offers some tools for the Functional approach</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line">def <span class="function"><span class="keyword">func</span><span class="params">(a, b, <span class="built_in">c</span>)</span></span>:</div><div class="line">  <span class="keyword">return</span> a,b,<span class="built_in">c</span></div><div class="line"></div><div class="line">&gt;&gt;&gt;&gt; p_func = functools.partial(<span class="function"><span class="keyword">func</span>, 10)</span></div><div class="line">&gt;&gt;&gt;&gt; <span class="title">p_func</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></div><div class="line"><span class="number">10</span> <span class="number">3</span> <span class="number">4</span></div><div class="line">&gt;&gt;&gt;&gt; p_func = functools.partial(<span class="function"><span class="keyword">func</span>, 10, 12)</span></div><div class="line">&gt;&gt;&gt;&gt; <span class="title">p_func</span><span class="params">(<span class="number">3</span>)</span></div><div class="line"><span class="number">10</span> <span class="number">12</span> <span class="number">3</span></div></pre></td></tr></table></figure>
<h2 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def loop(n):</div><div class="line">  <span class="keyword">for</span> x in xrange(<span class="keyword">int</span>(n)):</div><div class="line">    a = 1+1</div><div class="line"></div><div class="line">def recures(a):</div><div class="line">  <span class="keyword">if</span> a &lt;= 0:</div><div class="line">    <span class="keyword">return</span></div><div class="line">  a = 1 + 1</div><div class="line">  recurse(<span class="keyword">int</span>(n) - 1)</div></pre></td></tr></table></figure>
<h2 id="Recursion-Time-it-in-IPython"><a href="#Recursion-Time-it-in-IPython" class="headerlink" title="Recursion - Time it in IPython"></a>Recursion - Time it in IPython</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">%timeit <span class="keyword">loop</span>(le3)</div><div class="line"><span class="number">10000</span> loops, best <span class="keyword">of</span> <span class="number">3</span>:<span class="number">48</span> us per <span class="keyword">loop</span></div><div class="line"></div><div class="line">%timeit recurse(le3)</div><div class="line"><span class="number">1000</span> loops, best <span class="keyword">of</span> <span class="number">3</span>: <span class="number">687</span> us per <span class="keyword">loop</span></div></pre></td></tr></table></figure>
<ul>
<li>sys.setrecursionalimit(int(le6)) and %timeit recurse(le5) segfaulted my IPython kernel</li>
</ul>
<h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><ul>
<li>Allow versy limited anonymous functions</li>
<li>Expressions only, no statements</li>
<li>Past discussion to exclude it from Python 3</li>
<li>Useful for callbacks</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_callback</span><span class="params">(callback, arg)</span></span>:</div><div class="line">  <span class="keyword">return</span> callback(arg)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; use_callback(lambda <span class="symbol">arg:</span> arg * <span class="number">2</span>, <span class="number">10</span>)</div><div class="line"><span class="number">20</span></div></pre></td></tr></table></figure>
<h2 id="Lambda-Not-Essential"><a href="#Lambda-Not-Essential" class="headerlink" title="Lambda - Not Essential"></a>Lambda - Not Essential</h2><ul>
<li>Always possible to add two extra lines</li>
<li>Write a function with name and docstring</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(arg)</span>:</span></div><div class="line">  <span class="string">"""</span></div><div class="line">  Double the argument.</div><div class="line">  """</div><div class="line">  <span class="keyword">return</span> arg * <span class="number">2</span></div><div class="line"></div><div class="line">&gt;&gt;&gt;&gt; use_callback(double, <span class="number">10</span>)</div></pre></td></tr></table></figure>
<h2 id="List-Comprehensions-instead-of-map"><a href="#List-Comprehensions-instead-of-map" class="headerlink" title="List Comprehensions instead of map"></a>List Comprehensions instead of map</h2><ul>
<li>Typical use of map</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="keyword">map</span>(lambda <span class="keyword">ar</span><span class="variable">g:</span> arg * <span class="number">2</span>, <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">6</span>))</div><div class="line">[<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]</div></pre></td></tr></table></figure>
<ul>
<li>Replace with list comprehension</li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[x * <span class="number">2</span> for x in range(<span class="number">2</span>, <span class="number">6</span>)]</div><div class="line">[<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]</div></pre></td></tr></table></figure>
<h2 id="List-Comprehensions-instead-of-filter"><a href="#List-Comprehensions-instead-of-filter" class="headerlink" title="List Comprehensions instead of filter"></a>List Comprehensions instead of filter</h2><ul>
<li>Typical use of filter</li>
</ul>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; filter(<span class="name">lambda</span> x: x &gt; <span class="number">10</span>, range(<span class="number">5</span>, <span class="number">16</span>))</div></pre></td></tr></table></figure>
<ul>
<li>Replace with list comprehension</li>
</ul>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">5</span>, <span class="number">16</span>) <span class="keyword">if</span> x &gt; <span class="number">10</span>]</div></pre></td></tr></table></figure>
<h2 id="Decorators"><a href="#Decorators" class="headerlink" title="Decorators"></a>Decorators</h2><ul>
<li>Application of closures</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">  @functools.wraps(func)</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">new_func</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'decorator was here'</span></div><div class="line">    <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">  <span class="keyword">return</span> new_func</div><div class="line"></div><div class="line"><span class="meta">@decorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></div><div class="line">  <span class="keyword">return</span> a + b</div><div class="line"></div><div class="line">add(<span class="number">2</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure>
<h2 id="Immutable-Data-Types-Tuples-Instead-of-Lists"><a href="#Immutable-Data-Types-Tuples-Instead-of-Lists" class="headerlink" title="Immutable Data Types - Tuples Instead of Lists"></a>Immutable Data Types - Tuples Instead of Lists</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">my_list = range(<span class="number">10</span>)</div><div class="line">my_list</div><div class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</div><div class="line">my_tuple = tuple(my_list)</div><div class="line">my_tuple</div><div class="line">(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)</div></pre></td></tr></table></figure>
<ul>
<li>Contradicts the usage recommendation<ul>
<li>Lists == elements of the same kind</li>
<li>Tuple == “named” elements</li>
</ul>
</li>
</ul>
<h2 id="Immutable-Data-Types-Freeze-Sets"><a href="#Immutable-Data-Types-Freeze-Sets" class="headerlink" title="Immutable Data Types - Freeze Sets"></a>Immutable Data Types - Freeze Sets</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">my_set = set(range(<span class="number">5</span>))</div><div class="line">my_set</div><div class="line">set([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</div><div class="line">my_frozenset = frozenset(my_set)</div><div class="line">my_frozenset</div><div class="line">forzenset([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</div></pre></td></tr></table></figure>
<ul>
<li>Can be used as dictionary keys</li>
</ul>
<h2 id="Not-Only-Functional"><a href="#Not-Only-Functional" class="headerlink" title="Not Only Functional"></a>Not Only Functional</h2><ul>
<li>Pure functional programs can be difficult to implement</li>
<li>Combine with procedural and object-oriented program parts</li>
<li>Choose right tool, for the task at hand</li>
<li>Develop a feeling where a functional approach can be beneficial</li>
</ul>
<h2 id="Avoid-Side-effects"><a href="#Avoid-Side-effects" class="headerlink" title="Avoid Side effects"></a>Avoid Side effects</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="string">"""</span></div><div class="line">  Example for init-only definitions</div><div class="line">  """</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    self.attr1 = self._make_attr1()</div><div class="line">    self.attr2 = self._make_attr2()</div><div class="line"></div><div class="line"><span class="meta">  @staticmethod</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_make_sttr1</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Do mant things to create att1</div><div class="line">    """</div><div class="line">    attr1 = []</div><div class="line">    <span class="keyword">return</span> attr1</div></pre></td></tr></table></figure>
<ul>
<li>Set all attributes in <strong>init</strong> (Pylint will remind you)</li>
<li>Actual useful application of static methods</li>
<li>Fewer side effects than setting attributes outside <strong>init</strong></li>
<li>Your beloved classes and instances are still here</li>
<li>Inheritance without overriding <strong>init</strong> and use super,child class implements own <strong>make_attr1()</strong></li>
</ul>
<h2 id="Freeze-Classes"><a href="#Freeze-Classes" class="headerlink" title="Freeze Classes"></a>Freeze Classes</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reader</span>(<span class="title">object</span>):</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">    <span class="keyword">self</span>.data = <span class="keyword">self</span>._read()</div><div class="line"></div><div class="line">  @staticmethod</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_read</span><span class="params">()</span></span>:</div><div class="line">    data = []</div><div class="line">    with open(<span class="string">'data.txt'</span>) as <span class="symbol">fobj:</span></div><div class="line">      <span class="keyword">for</span> line <span class="keyword">in</span> <span class="symbol">fobj:</span></div><div class="line">        data.append(tuple(line.split()))</div><div class="line">    <span class="keyword">return</span> tuple(data)</div></pre></td></tr></table></figure>
<ul>
<li>Mutable data structures are useful for reading data</li>
<li>“Freeze” to get read-only version</li>
<li>No future, unwanted modifications possible</li>
</ul>
<h2 id="Freeze-Classes-One-Liner-Version"><a href="#Freeze-Classes-One-Liner-Version" class="headerlink" title="Freeze Classes - One Liner Version"></a>Freeze Classes - One Liner Version</h2><ul>
<li>Still kind of readable</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reader</span>(<span class="title">object</span>):</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">    <span class="keyword">self</span>.data = <span class="keyword">self</span>._read()</div><div class="line"></div><div class="line">  @staticmethod</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_read</span><span class="params">()</span></span>:</div><div class="line">    <span class="keyword">return</span> tuple(tuple(line.split()) <span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">'data.txt'</span>))</div></pre></td></tr></table></figure>
<h2 id="Stepwise-Freezing-and-Thawing-I"><a href="#Stepwise-Freezing-and-Thawing-I" class="headerlink" title="Stepwise Freezing and Thawing I"></a>Stepwise Freezing and Thawing I</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrozenUnFrozen</span>(<span class="title">object</span>):</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">    <span class="keyword">self</span>.__repr = &#123;&#125;</div><div class="line">    <span class="keyword">self</span>.__frozen = False</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(<span class="keyword">self</span>, key)</span></span>:</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.__repr[key]</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(<span class="keyword">self</span>, key, value)</span></span>:</div><div class="line">    <span class="keyword">if</span> <span class="keyword">self</span>.<span class="symbol">__frozen:</span></div><div class="line">      raise KeyError(<span class="string">'Cannot change key %r'</span> % key)</div><div class="line">    <span class="keyword">self</span>.__repr[key] = value</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">freeze</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">    <span class="keyword">self</span>.__frozen = True</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">unfreeze</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">    <span class="keyword">self</span>.__forzen = False</div></pre></td></tr></table></figure>
<h2 id="Stepwise-Freezing-and-Thawing-II"><a href="#Stepwise-Freezing-and-Thawing-II" class="headerlink" title="Stepwise Freezing and Thawing II"></a>Stepwise Freezing and Thawing II</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt;&gt; fuf = FrozenUnFrozen()</div><div class="line"><span class="meta">&gt;&gt;</span>&gt;&gt; fuf[<span class="string">'a'</span>] = <span class="number">100</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt;&gt; fuf[<span class="string">'a'</span>]</div><div class="line"><span class="number">100</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt;&gt; fuf.freeze()</div><div class="line"><span class="meta">&gt;&gt;</span>&gt;&gt; fuf[<span class="string">'a'</span>] = <span class="number">100</span></div><div class="line">Traceback (most recent cell lest):</div><div class="line"><span class="symbol">KeyError:</span> Cannot change key <span class="string">'a'</span><span class="string">"</span></div><div class="line">&gt;&gt;&gt;&gt; fuf['a']</div><div class="line">100</div><div class="line">&gt;&gt;&gt;&gt; fuf.unfreeze()</div><div class="line">&gt;&gt;&gt;&gt; fuf['a'] = 100</div></pre></td></tr></table></figure>
<h2 id="Use-Case-for-Freezing"><a href="#Use-Case-for-Freezing" class="headerlink" title="Use Case for Freezing"></a>Use Case for Freezing</h2><ul>
<li>Legacy code: Where are data modified?</li>
<li>Complex systems: Detect unwanted modifications</li>
</ul>
<h2 id="Immutable-Data-Structures-Counter-Arguments"><a href="#Immutable-Data-Structures-Counter-Arguments" class="headerlink" title="Immutable Data Structures - Counter Arguments"></a>Immutable Data Structures - Counter Arguments</h2><ul>
<li>Some algorithms maybe diffcult to implement</li>
<li>Can be rather inefficient - repeated re-allocation of memory<ul>
<li>Antipattern string concatanation</li>
</ul>
</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt;&gt; s += <span class="string">'text'</span></div></pre></td></tr></table></figure>
<ul>
<li>Try this in Jypthon and (standrad-)PyPy</li>
</ul>
<h2 id="Lazy-Evaluation"><a href="#Lazy-Evaluation" class="headerlink" title="Lazy Evaluation"></a>Lazy Evaluation</h2><ul>
<li>Iterators and generators</li>
</ul>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; [ x * <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">xrange</span>(<span class="number">5</span>)]</div><div class="line">&gt;&gt;&gt; ( x * <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">xrange</span>(<span class="number">5</span>))</div><div class="line"></div><div class="line">&gt;&gt;&gt; <span class="built_in">sum</span>(x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">xrange</span>(<span class="number">10</span>))</div></pre></td></tr></table></figure>
<ul>
<li>Saves memory and possibly CPU time</li>
</ul>
<h2 id="Itertools-“Lazy-Programmers-are-Good-Programmers”"><a href="#Itertools-“Lazy-Programmers-are-Good-Programmers”" class="headerlink" title="Itertools - “Lazy Programmers are Good Programmers”"></a>Itertools - “Lazy Programmers are Good Programmers”</h2><ul>
<li>Module itertools offers tools for the work with iteratoes</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">it.izip(<span class="string">'abc'</span>, <span class="string">'xyz'</span>)</div><div class="line">&lt;itertools<span class="selector-class">.izp</span> <span class="selector-tag">object</span> at <span class="number">0</span>x00FA9FS0&gt;</div><div class="line"><span class="function"><span class="title">list</span><span class="params">(it.izip(<span class="string">'abc'</span>, <span class="string">'xyz'</span>)</span></span>)</div><div class="line">[(<span class="string">'a'</span>, <span class="string">'x'</span>), (<span class="string">'b'</span>,<span class="string">'y'</span>,(<span class="string">'c'</span>,<span class="string">'z'</span>))]</div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">list</span><span class="params">(it.islice(iter(range(<span class="number">10</span>)</span></span>), None, <span class="number">8</span>, <span class="number">2</span>))</div><div class="line">[<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>]</div><div class="line"><span class="function"><span class="title">range</span><span class="params">(<span class="number">10</span>)</span></span>[:<span class="number">8</span>:<span class="number">2</span>]</div><div class="line">[<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>]</div></pre></td></tr></table></figure>
<h2 id="Pipelining-Chaining-Commands"><a href="#Pipelining-Chaining-Commands" class="headerlink" title="Pipelining -Chaining Commands"></a>Pipelining -Chaining Commands</h2><ul>
<li>Generators make good pipelines</li>
<li>Useful for workflow problems</li>
<li>Example parsing of a log file</li>
</ul>
<h2 id="Generators-Pull"><a href="#Generators-Pull" class="headerlink" title="Generators - Pull"></a>Generators - Pull</h2><ul>
<li>Log file:</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">35</span></div><div class="line"><span class="number">29</span></div><div class="line"><span class="number">75</span></div><div class="line"><span class="number">36</span></div><div class="line"><span class="number">28</span></div><div class="line"><span class="number">54</span></div><div class="line"># comment</div><div class="line"><span class="number">54</span></div><div class="line"><span class="number">56</span></div></pre></td></tr></table></figure>
<h2 id="Generators-Pull-Import"><a href="#Generators-Pull-Import" class="headerlink" title="Generators - Pull - Import"></a>Generators - Pull - Import</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> <span class="built_in">time</span></div></pre></td></tr></table></figure>
<h2 id="Generators-Pull-Read-File"><a href="#Generators-Pull-Read-File" class="headerlink" title="Generators - Pull - Read File"></a>Generators - Pull - Read File</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">def read_forever(fobj):</div><div class="line">  counter = <span class="number">0</span></div><div class="line">  <span class="keyword">while</span> True:</div><div class="line">    <span class="keyword">line</span> = fobj.readLine()</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">line</span>:</div><div class="line">      <span class="built_in">time</span>.<span class="built_in">sleep</span>(<span class="number">0.1</span>)</div><div class="line">      <span class="keyword">continue</span></div><div class="line">    yield <span class="keyword">line</span></div></pre></td></tr></table></figure>
<h2 id="Generators-Pull-Filter-Out-Comment-lines"><a href="#Generators-Pull-Filter-Out-Comment-lines" class="headerlink" title="Generators - Pull - Filter Out Comment lines"></a>Generators - Pull - Filter Out Comment lines</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def filter_comments(<span class="keyword">lines</span>):</div><div class="line">  <span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> <span class="keyword">lines</span>:</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">line</span>.strip().startwith(<span class="string">"#"</span>):</div><div class="line">      yield <span class="built_in">line</span></div></pre></td></tr></table></figure>
<h2 id="Generators-Pull-Convert-Numbers"><a href="#Generators-Pull-Convert-Numbers" class="headerlink" title="Generators - Pull - Convert Numbers"></a>Generators - Pull - Convert Numbers</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def get_number(<span class="keyword">lines</span>):</div><div class="line">  <span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> <span class="keyword">lines</span>:</div><div class="line">    yield int(<span class="built_in">line</span>.<span class="built_in">split</span>()[<span class="number">-1</span>])</div></pre></td></tr></table></figure>
<h2 id="Generators-Pull-Initialize-the-Process-I"><a href="#Generators-Pull-Initialize-the-Process-I" class="headerlink" title="Generators - Pull - Initialize  the Process I"></a>Generators - Pull - Initialize  the Process I</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">def show_sum(file_name = <span class="string">'oyr.txt'</span>):</div><div class="line">  <span class="keyword">lines</span> = read_forevery(<span class="built_in">open</span>(file_name))</div><div class="line">  filtered_lines = filter_comments(<span class="keyword">lines</span>)</div><div class="line">  numbers = get_number(filtered_lines)</div><div class="line">  sum_ = <span class="number">0</span></div><div class="line">  <span class="keyword">try</span>:</div><div class="line">    <span class="keyword">for</span> <span class="built_in">number</span> <span class="keyword">in</span> numbers:</div><div class="line">      sum_ += <span class="built_in">number</span></div><div class="line">      sys.<span class="keyword">stdout</span>.<span class="built_in">write</span>(<span class="string">'sum: %d\r'</span> % sum_)</div><div class="line">      sys.<span class="keyword">stdout</span>.flush</div><div class="line">  except KeyboardInterrupt:</div><div class="line">    print <span class="string">'Sum:'</span>, sum_</div></pre></td></tr></table></figure>
<h2 id="Coroutines-Push"><a href="#Coroutines-Push" class="headerlink" title="Coroutines - Push"></a>Coroutines - Push</h2><ul>
<li>Log file:<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Error: </span>78</div><div class="line">DEBUG: 72</div><div class="line">WAN: 99</div><div class="line">CRITICAL: 97</div><div class="line"><span class="keyword">Error: </span>78</div><div class="line"><span class="keyword">Error: </span>89</div><div class="line"><span class="keyword">Error: </span>46</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Coroutines-Push-Initialize-with-a-Decorator"><a href="#Coroutines-Push-Initialize-with-a-Decorator" class="headerlink" title="Coroutines - Push -Initialize with a Decorator"></a>Coroutines - Push -Initialize with a Decorator</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">def init_coroutine(<span class="function"><span class="keyword">func</span>):</span></div><div class="line">  <span class="title">functools</span>.<span class="title">wraps</span><span class="params">(<span class="keyword">func</span>)</span></div><div class="line">  def <span class="keyword">init</span>(*args, **kwargs):</div><div class="line">    gen = <span class="function"><span class="keyword">func</span><span class="params">(*args, **kwargs)</span></span></div><div class="line">    next(gen)</div><div class="line">    <span class="keyword">return</span> gen</div><div class="line">  <span class="keyword">return</span> <span class="keyword">init</span></div></pre></td></tr></table></figure>
<h2 id="Coroutines-Push-Read-the-File"><a href="#Coroutines-Push-Read-the-File" class="headerlink" title="Coroutines - Push - Read the File"></a>Coroutines - Push - Read the File</h2><p>def read_forever(fobj, target):<br>  counter = 0<br>  while True:<br>    line = fobj.readline()<br>    if not line:<br>      time.sleep(0.1)<br>      continue<br>    target.send(line)</p>
<h2 id="Coroutines-Push-Filter-Out-Comments"><a href="#Coroutines-Push-Filter-Out-Comments" class="headerlink" title="Coroutines - Push - Filter Out Comments"></a>Coroutines - Push - Filter Out Comments</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@init_coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_comments</span><span class="params">(target)</span>:</span></div><div class="line">  <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    line = <span class="keyword">yield</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> line.strip().startwith(<span class="string">'#'</span>):</div><div class="line">      target.send(line)</div></pre></td></tr></table></figure>
<h2 id="Coroutines-Push-Convert-Numbers"><a href="#Coroutines-Push-Convert-Numbers" class="headerlink" title="Coroutines - Push - Convert Numbers"></a>Coroutines - Push - Convert Numbers</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">@init_coroutine</span></div><div class="line">def get_number(targets):</div><div class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</div><div class="line">    line = yield</div><div class="line">    level, <span class="built_in">number</span> = line.split(<span class="string">':'</span>)</div><div class="line">    <span class="built_in">number</span> = <span class="built_in">int</span>(<span class="built_in">number</span>)</div><div class="line">    tagets[level].<span class="built_in">send</span>(<span class="built_in">number</span>)</div></pre></td></tr></table></figure>
<h2 id="Coroutines-Push-Consumer-I"><a href="#Coroutines-Push-Consumer-I" class="headerlink" title="Coroutines - Push - Consumer I"></a>Coroutines - Push - Consumer I</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@init_coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fatal</span><span class="params">()</span>:</span></div><div class="line">  sum_ = <span class="number">0</span></div><div class="line">  <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    value = <span class="keyword">yield</span></div><div class="line">    sum_ += value</div><div class="line">    sys.stdout.write(<span class="string">'FATAL  sum:%7d\s'</span> % sum_)</div><div class="line">    sys.stdout.flush()</div></pre></td></tr></table></figure>
<h2 id="Coroutines-Push-Consumer-II"><a href="#Coroutines-Push-Consumer-II" class="headerlink" title="Coroutines - Push - Consumer II"></a>Coroutines - Push - Consumer II</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@init_coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fatal</span><span class="params">()</span>:</span></div><div class="line">  sum_ = <span class="number">0</span></div><div class="line">  <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    value = <span class="keyword">yield</span></div><div class="line">    sum_ += value</div><div class="line">    sys.stdout.write(<span class="string">'CRITICAL  sum:%7d\s'</span> % sum_)</div></pre></td></tr></table></figure>
<h2 id="Coroutines-Push-All-Consumers"><a href="#Coroutines-Push-All-Consumers" class="headerlink" title="Coroutines - Push - All Consumers"></a>Coroutines - Push - All Consumers</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">TARGETS = &#123;</div><div class="line">  <span class="string">'CRITICAL'</span>: critical<span class="comment">()</span>,</div><div class="line">  <span class="string">'DEBUG'</span>: debug<span class="comment">()</span>,</div><div class="line">  <span class="string">'FATAL'</span>: fatal<span class="comment">()</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Conroutines-Push-Initialize"><a href="#Conroutines-Push-Initialize" class="headerlink" title="Conroutines - Push - Initialize"></a>Conroutines - Push - Initialize</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_sum</span><span class="params">(file_name=<span class="string">'out.txt'</span>)</span></span>:</div><div class="line">  read_forever(open(file_name), filter_comments(get_number(TARGETS)))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span>:</div><div class="line">  show_sum(sys.argv[<span class="number">1</span>])</div><div class="line"><span class="string">``</span></div><div class="line"></div><div class="line"><span class="comment">## Conroutines - Push - Initialize</span></div></pre></td></tr></table></figure>
<p>def show_sum(file_name=’out.txt’):<br>  read_forever(open(file_name), filter_comments(get_number(TARGETS)))</p>
<p>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>  show_sum(sys.argv[1])<br>``</p>
<h2 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h2><ul>
<li>Python offers useful functional features</li>
<li>But it is no pure functional language</li>
<li>For some tasks the functional approach works veru well</li>
<li>For some others much less</li>
<li>Combine and switch back and forth with oo and procedural style<br>&amp; “Stay pythonic, be pragmatic”</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introducation&quot;&gt;&lt;a href=&quot;#Introducation&quot; class=&quot;headerlink&quot; title=&quot;Introducation&quot;&gt;&lt;/a&gt;Introducation&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Function Programming
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Consul In Practice 1 [概述]</title>
    <link href="http://yunlzheng.github.io/2016/04/21/consul-in-practice-01/"/>
    <id>http://yunlzheng.github.io/2016/04/21/consul-in-practice-01/</id>
    <published>2016-04-21T02:57:01.000Z</published>
    <updated>2016-12-20T07:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Background-Info"><a href="#Background-Info" class="headerlink" title="Background Info"></a>Background Info</h2><p>项目基本信息：</p>
<ul>
<li>MicroServices架构基于Spring Cloud框架实现；</li>
<li>除了系统自身的4个核心服务外，还包含其他的第三方服务如Mysql, Mongo以及其它开源软件等</li>
<li>当前系统部署方式基于Docker完成系统核心服务以及第三方服务的部署，配合使用Docker Compose以及Ansible完成应用的自动化部署</li>
<li>包含3个基本的环境Dev环境，UAT环境，Prod环境</li>
</ul>
<h2 id="Consul-In-Practice"><a href="#Consul-In-Practice" class="headerlink" title="Consul In Practice"></a>Consul In Practice</h2><h3 id="1-As-Service-Discovery"><a href="#1-As-Service-Discovery" class="headerlink" title="1, As Service Discovery"></a>1, As Service Discovery</h3><p>使用开发模式我们可以快速验证Consul提供的相关能力</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">consul agent -dev -config-<span class="keyword">dir</span> /etc/consul.<span class="built_in">d</span></div></pre></td></tr></table></figure>
<p>Consul中我们非常方便的创建和定义服务，例如通过在/etc/consul.d/中创建文件sonarqube.json</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"service"</span>: &#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"sonarqube"</span>,</div><div class="line">    <span class="attr">"tags"</span>: [<span class="string">"dev"</span>],</div><div class="line">    <span class="attr">"port"</span>: <span class="number">9000</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完成服务定义之后：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">consul reload</span></div></pre></td></tr></table></figure>
<p>可以重新加载服务配置文件，从Consul UI中我们可以查看到我们的服务实例</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/consul-ui.png" alt=""></p>
<p>完成服务注册之后我们便可以通过Consul提供的API去查询服务实例</p>
<p>例如我们可以通过<strong>HTTP API</strong>查询到sonarqube服务实例的相关信息：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">curl http:<span class="regexp">//</span>localhost:<span class="number">8500</span><span class="regexp">/v1/</span>catalog<span class="regexp">/service/</span>web</div><div class="line"></div><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>:<span class="string">"agent-two"</span>,</div><div class="line">    <span class="string">"Address"</span>:<span class="string">"xxx.xxx.xxx"</span>,</div><div class="line">    <span class="string">"ServiceID"</span>:<span class="string">"web"</span>,</div><div class="line">    <span class="string">"ServiceName"</span>:<span class="string">"web"</span>,</div><div class="line">    <span class="string">"ServiceTags"</span>:[<span class="string">"dev"</span>],</div><div class="line">    <span class="string">"ServiceAddress"</span>:<span class="string">""</span>,</div><div class="line">    <span class="string">"ServicePort"</span>:<span class="number">9900</span>,</div><div class="line">    <span class="string">"ServiceEnableTagOverride"</span>:false,</div><div class="line">    <span class="string">"CreateIndex"</span>:<span class="number">515</span>,</div><div class="line">    <span class="string">"ModifyIndex"</span>:<span class="number">516</span></div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>除此之外Consul还提供了内置的DNS服务，DNS服务的默认访问端口为8600，通过DNS服务我们可以通过域名’[serviceName].service.consul’的方式直接访问我们的服务实例:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">dig</span> @<span class="keyword">127</span>.<span class="keyword">0</span>.<span class="keyword">0</span>.<span class="keyword">1</span> -p <span class="number">8600</span> sonarqube.service.consul</div><div class="line"></div><div class="line">; &lt;&lt;&gt;&gt; <span class="selector-tag">DiG</span> 9<span class="selector-class">.9</span><span class="selector-class">.4-RedHat-9</span><span class="selector-class">.9</span><span class="selector-class">.4-29</span><span class="selector-class">.el7_2</span><span class="selector-class">.1</span> &lt;&lt;&gt;&gt; @<span class="keyword">127</span>.<span class="keyword">0</span>.<span class="keyword">0</span>.<span class="keyword">1</span> -p <span class="number">8600</span> sonarqube.service.consul</div><div class="line">; (1 <span class="selector-tag">server</span> <span class="selector-tag">found</span>)</div><div class="line">;; <span class="selector-tag">global</span> <span class="selector-tag">options</span>: +<span class="selector-tag">cmd</span></div><div class="line">;; <span class="selector-tag">Got</span> <span class="selector-tag">answer</span>:</div><div class="line">;; <span class="selector-tag">-</span>&gt;&gt;<span class="selector-tag">HEADER</span>&lt;&lt;<span class="selector-tag">-</span> <span class="selector-tag">opcode</span>: <span class="selector-tag">QUERY</span>, <span class="selector-tag">status</span>: <span class="selector-tag">NOERROR</span>, <span class="selector-tag">id</span>: 21563</div><div class="line">;; <span class="selector-tag">flags</span>: <span class="selector-tag">qr</span> <span class="selector-tag">aa</span> <span class="selector-tag">rd</span>; <span class="selector-tag">QUERY</span>: 1, <span class="selector-tag">ANSWER</span>: 1, <span class="selector-tag">AUTHORITY</span>: 0, <span class="selector-tag">ADDITIONAL</span>: 0</div><div class="line">;; <span class="selector-tag">WARNING</span>: <span class="selector-tag">recursion</span> <span class="selector-tag">requested</span> <span class="selector-tag">but</span> <span class="selector-tag">not</span> <span class="selector-tag">available</span></div><div class="line"></div><div class="line">;; <span class="selector-tag">QUESTION</span> <span class="selector-tag">SECTION</span>:</div><div class="line">;<span class="selector-tag">sonarqube</span><span class="selector-class">.service</span><span class="selector-class">.consul</span>.	<span class="selector-tag">IN</span>	<span class="selector-tag">A</span></div><div class="line"></div><div class="line">;; <span class="selector-tag">ANSWER</span> <span class="selector-tag">SECTION</span>:</div><div class="line"><span class="selector-tag">sonarqube</span><span class="selector-class">.service</span><span class="selector-class">.consul</span>. 0	<span class="selector-tag">IN</span>	<span class="selector-tag">A</span>	10<span class="selector-class">.174</span><span class="selector-class">.231</span><span class="selector-class">.41</span></div><div class="line"></div><div class="line">;; <span class="selector-tag">Query</span> <span class="selector-tag">time</span>: 0 <span class="selector-tag">msec</span></div><div class="line">;; <span class="selector-tag">SERVER</span>: 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-id">#8600</span>(127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>)</div><div class="line">;; <span class="selector-tag">WHEN</span>: <span class="selector-tag">Thu</span> <span class="selector-tag">Apr</span> 21 12<span class="selector-pseudo">:23</span><span class="selector-pseudo">:26</span> <span class="selector-tag">CST</span> 2016</div><div class="line">;; <span class="selector-tag">MSG</span> <span class="selector-tag">SIZE</span>  <span class="selector-tag">rcvd</span>: 82</div></pre></td></tr></table></figure>
<p>或者结合使用服务的tag标签[tagName].[serviceName].service.consul的方式访问服务实例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">dig</span> @<span class="keyword">127</span>.<span class="keyword">0</span>.<span class="keyword">0</span>.<span class="keyword">1</span> -p <span class="number">8600</span> dev.sonarqube.service.consul</div><div class="line"></div><div class="line">; &lt;&lt;&gt;&gt; <span class="selector-tag">DiG</span> 9<span class="selector-class">.9</span><span class="selector-class">.4-RedHat-9</span><span class="selector-class">.9</span><span class="selector-class">.4-29</span><span class="selector-class">.el7_2</span><span class="selector-class">.1</span> &lt;&lt;&gt;&gt; @<span class="keyword">127</span>.<span class="keyword">0</span>.<span class="keyword">0</span>.<span class="keyword">1</span> -p <span class="number">8600</span> dev.sonarqube.service.consul</div><div class="line">; (1 <span class="selector-tag">server</span> <span class="selector-tag">found</span>)</div><div class="line">;; <span class="selector-tag">global</span> <span class="selector-tag">options</span>: +<span class="selector-tag">cmd</span></div><div class="line">;; <span class="selector-tag">Got</span> <span class="selector-tag">answer</span>:</div><div class="line">;; <span class="selector-tag">-</span>&gt;&gt;<span class="selector-tag">HEADER</span>&lt;&lt;<span class="selector-tag">-</span> <span class="selector-tag">opcode</span>: <span class="selector-tag">QUERY</span>, <span class="selector-tag">status</span>: <span class="selector-tag">NXDOMAIN</span>, <span class="selector-tag">id</span>: 17333</div><div class="line">;; <span class="selector-tag">flags</span>: <span class="selector-tag">qr</span> <span class="selector-tag">aa</span> <span class="selector-tag">rd</span>; <span class="selector-tag">QUERY</span>: 1, <span class="selector-tag">ANSWER</span>: 0, <span class="selector-tag">AUTHORITY</span>: 1, <span class="selector-tag">ADDITIONAL</span>: 0</div><div class="line">;; <span class="selector-tag">WARNING</span>: <span class="selector-tag">recursion</span> <span class="selector-tag">requested</span> <span class="selector-tag">but</span> <span class="selector-tag">not</span> <span class="selector-tag">available</span></div><div class="line"></div><div class="line">;; <span class="selector-tag">QUESTION</span> <span class="selector-tag">SECTION</span>:</div><div class="line">;<span class="selector-tag">dev</span><span class="selector-class">.sonarqube</span><span class="selector-class">.service</span><span class="selector-class">.consul</span>. <span class="selector-tag">IN</span>	<span class="selector-tag">A</span></div><div class="line"></div><div class="line">;; <span class="selector-tag">AUTHORITY</span> <span class="selector-tag">SECTION</span>:</div><div class="line"><span class="selector-tag">consul</span>.			0	<span class="selector-tag">IN</span>	<span class="selector-tag">SOA</span>	<span class="selector-tag">ns</span><span class="selector-class">.consul</span>. <span class="selector-tag">postmaster</span><span class="selector-class">.consul</span>. 1461212746 3600 600 86400 0</div><div class="line"></div><div class="line">;; <span class="selector-tag">Query</span> <span class="selector-tag">time</span>: 0 <span class="selector-tag">msec</span></div><div class="line">;; <span class="selector-tag">SERVER</span>: 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-id">#8600</span>(127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>)</div><div class="line">;; <span class="selector-tag">WHEN</span>: <span class="selector-tag">Thu</span> <span class="selector-tag">Apr</span> 21 12<span class="selector-pseudo">:25</span><span class="selector-pseudo">:46</span> <span class="selector-tag">CST</span> 2016</div><div class="line">;; <span class="selector-tag">MSG</span> <span class="selector-tag">SIZE</span>  <span class="selector-tag">rcvd</span>: 119</div></pre></td></tr></table></figure>
<p>你还可以通过在启动consul是使用–domain参数设定域名规则</p>
<h3 id="2-As-Service-Monitor"><a href="#2-As-Service-Monitor" class="headerlink" title="2, As Service Monitor"></a>2, As Service Monitor</h3><p>同时当应用以服务为单位向外部暴露接口之后，需要对各个服务的状态进行监控，Consul同样可以非常方便的让我们能够对服务状态进行监控.</p>
<p>同样以sonarqube为例子，通过check属性我们可以自定义所需要的监控方式。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"service"</span>: &#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"sonarqube"</span>,</div><div class="line">    <span class="attr">"tags"</span>: [<span class="string">"server"</span>],</div><div class="line">    <span class="attr">"port"</span>: <span class="number">9000</span>,</div><div class="line">    <span class="attr">"check"</span>: &#123;<span class="attr">"script"</span>: <span class="string">"curl localhost:9000 &gt;/dev/null 2&gt;&amp;1"</span>, <span class="attr">"interval"</span>: <span class="string">"10s"</span>&#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了通过script脚本的形式进行服务的健康检查，Consule还支持一下方式：</p>
<p>HTTP状态检查:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"check"</span>: &#123;</div><div class="line">    <span class="attr">"id"</span>: <span class="string">"api"</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"HTTP API on port 5000"</span>,</div><div class="line">    <span class="attr">"http"</span>: <span class="string">"http://localhost:5000/health"</span>,</div><div class="line">    <span class="attr">"interval"</span>: <span class="string">"10s"</span>,</div><div class="line">    <span class="attr">"timeout"</span>: <span class="string">"1s"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>TCP状态检查：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"check"</span>: &#123;</div><div class="line">    <span class="attr">"id"</span>: <span class="string">"ssh"</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"SSH TCP on port 22"</span>,</div><div class="line">    <span class="attr">"tcp"</span>: <span class="string">"localhost:22"</span>,</div><div class="line">    <span class="attr">"interval"</span>: <span class="string">"10s"</span>,</div><div class="line">    <span class="attr">"timeout"</span>: <span class="string">"1s"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>TTL检查:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"check"</span>: &#123;</div><div class="line">    <span class="attr">"id"</span>: <span class="string">"web-app"</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"Web App Status"</span>,</div><div class="line">    <span class="attr">"notes"</span>: <span class="string">"Web app does a curl internally every 10 seconds"</span>,</div><div class="line">    <span class="attr">"ttl"</span>: <span class="string">"30s"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Docker容器监控：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="attr">"check"</span>: &#123;</div><div class="line">    <span class="attr">"id"</span>: <span class="string">"mem-util"</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"Memory utilization"</span>,</div><div class="line">    <span class="attr">"docker_container_id"</span>: <span class="string">"f972c95ebf0e"</span>,</div><div class="line">    <span class="attr">"shell"</span>: <span class="string">"/bin/bash"</span>,</div><div class="line">    <span class="attr">"script"</span>: <span class="string">"/usr/local/bin/check_mem.py"</span>,</div><div class="line">    <span class="attr">"interval"</span>: <span class="string">"10s"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-Key-Vale-Store"><a href="#3-Key-Vale-Store" class="headerlink" title="3, Key/Vale Store"></a>3, Key/Vale Store</h3><p>Consul支持开放的K/V存储，你可以用在动态配置，特性开关，调度， 集群等等任何你需要使用的地方，同时Consul提供的HTTP API可以让你非常易于使用</p>
<blockquote>
<p>本篇不详细说明该特性，后续会详细讨论在集中式配置管理中的应用</p>
</blockquote>
<h3 id="4-As-DataCenters"><a href="#4-As-DataCenters" class="headerlink" title="4, As DataCenters"></a>4, As DataCenters</h3><p>在实际软件交付过程中我们会涉及到另外一个问题，多环境的管理，以当前自己所在的项目为例，在交付过程中会涉及到3个基本的环境Dev, UAT以及Prod环境。各个环境独立部署了所有的服务，Cosul的多数据中心能力可以很好的对多个环境进行统一的管理和监控；</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/multi-data-center.png" alt=""></p>
<p>以下我们假设以Dev和UAT两个DataCenter为例</p>
<ul>
<li>DEV DataCenter:</li>
</ul>
<p>在Node1上启动Consul Server</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">consul agent -server  -bootstrap-expect <span class="number">1</span>  -data-dir /tmp/consul -node=agent-one -config-dir /etc/consul.d -bind <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span>  -client <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> -ui -dc=dev</div></pre></td></tr></table></figure>
<p>在Node2上启动Consul Agent</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">consul agent -data-dir /tmp/consul -<span class="keyword">node</span><span class="title">=agent-two</span> -config-dir /etc/consul.d -<span class="attr">bind=</span><span class="number">192.168</span>.<span class="number">0.3</span> -<span class="attr">dc=</span>dev</div></pre></td></tr></table></figure>
<p>加入到Consul Server</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">consul</span> <span class="selector-tag">join</span> 192<span class="selector-class">.168</span><span class="selector-class">.0</span><span class="selector-class">.2</span></div></pre></td></tr></table></figure>
<p>此时在Node1或者Node2上检查当前集群信息</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">consul</span> <span class="selector-tag">members</span></div><div class="line"></div><div class="line"><span class="selector-tag">agent-one</span>  192<span class="selector-class">.168</span><span class="selector-class">.0</span><span class="selector-class">.2</span><span class="selector-pseudo">:8301</span>  <span class="selector-tag">alive</span>   <span class="selector-tag">server</span>  0<span class="selector-class">.6</span><span class="selector-class">.4</span>  2         <span class="selector-tag">dev</span></div><div class="line"><span class="selector-tag">agent-two</span>  192<span class="selector-class">.168</span><span class="selector-class">.0</span><span class="selector-class">.3</span><span class="selector-pseudo">:8301</span>  <span class="selector-tag">alive</span>   <span class="selector-tag">client</span>  0<span class="selector-class">.6</span><span class="selector-class">.4</span>  2         <span class="selector-tag">dev</span></div></pre></td></tr></table></figure>
<ul>
<li>UAT DataCenter:</li>
</ul>
<p>在Node3上启动Consul Server</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">consul agent -server  -bootstrap-expect <span class="number">1</span>  -data-dir /tmp/consul -<span class="keyword">node</span><span class="title">=agent-three</span> -config-dir /etc/consul.d -bind <span class="number">192.168</span>.<span class="number">2.2</span> -<span class="attr">dc=</span>uat</div></pre></td></tr></table></figure>
<ul>
<li>关联Dev和UAT DataCenter</li>
</ul>
<p>在Node1上：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">consul</span> <span class="selector-tag">members</span> <span class="selector-tag">-wan</span></div><div class="line"></div><div class="line"><span class="selector-tag">agent-one</span>  192<span class="selector-class">.168</span><span class="selector-class">.0</span><span class="selector-class">.2</span><span class="selector-pseudo">:8301</span>  <span class="selector-tag">alive</span>   <span class="selector-tag">server</span>  0<span class="selector-class">.6</span><span class="selector-class">.4</span>  2         <span class="selector-tag">dev</span></div></pre></td></tr></table></figure>
<p> 通过命令</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">consul</span> <span class="selector-tag">join</span> <span class="selector-tag">-wan</span> 192<span class="selector-class">.168</span><span class="selector-class">.2</span><span class="selector-class">.2</span></div></pre></td></tr></table></figure>
<p>通过Consul UI集中式管理多个环境的信息</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/consul-multi-center-web-ui.png" alt="/images/consul-multi-center-web-ui.png"></p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>这篇主要目的是用于介绍一下Consul的基本特性</p>
<p>在后续还会继续考虑：</p>
<ul>
<li>使用Consul替换Spring Cloud作为服务发现和注册平台；</li>
<li>与Docker集成完成服务的自动发现和注册；</li>
<li>基于Consul的KV特性完成系统的中心化配置管理</li>
</ul>
<p>未完待续……</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Background-Info&quot;&gt;&lt;a href=&quot;#Background-Info&quot; class=&quot;headerlink&quot; title=&quot;Background Info&quot;&gt;&lt;/a&gt;Background Info&lt;/h2&gt;&lt;p&gt;项目基本信息：&lt;/p&gt;
&lt;ul&gt;
&lt;
    
    </summary>
    
    
      <category term="consul" scheme="http://yunlzheng.github.io/tags/consul/"/>
    
  </entry>
  
  <entry>
    <title>（译）Why Ramda</title>
    <link href="http://yunlzheng.github.io/2016/04/16/why-ramda-translate/"/>
    <id>http://yunlzheng.github.io/2016/04/16/why-ramda-translate/</id>
    <published>2016-04-16T03:37:51.000Z</published>
    <updated>2016-12-20T07:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>当buzzdecafe最近向大家介绍了Ramda之后，这里基本上存在两种截然不同的反应。那些已经习惯在Javascript或者其它语言中使用函数式编程的人大部分反应是“Cool”. 他们可能会感到兴奋或者只是注意到Ramda可能作为另一个工具，并且他们理解这是什么。</p>
<p>而另一类的人的反应则是:Huh?这是什么鬼？</p>
<p>对于那些不适用函数式编程的人而言，Ramda似乎并没有存在的意义。而且它大部分的能力已经被Underscore以及LoDash实现了。</p>
<p>当然，对于那些想要保持使用OO编码风格的人而言，他们并没有错。Ramda并不能向你提供太多的帮助。</p>
<p>当时它确实提供了另外一种截然不同编码风格，是一种纯粹的函数式编程语言的风格。Ramda使得你可以轻松的通过功能组合构建复杂逻辑。需要注意的是对于任何允许你通过组合函数的库都能使你可以完成功能组合；这里的关键问题在于，“如果让它变得简单”。</p>
<p>接下来，让我们来看看Ramda是如何工作的。</p>
<p>“TODO List”似乎经常用于比较不同的Web框架，所以我们也会使用这个例子来向大家展示Ramda的能力；首先我们想要能够过滤TODO列表中已经完成的项。</p>
<p>使用原生的Array方法，我们可能写出这样的代码:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> incompleteTasks = tasks.filter(<span class="function"><span class="keyword">function</span><span class="params">(task)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> !tasks.complete;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>而使用LoDash,这个将会更简单</p>
<figure class="highlight golo"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> incompleteTasks = _.<span class="keyword">filter</span>(tasks, &#123;complete: <span class="literal">false</span>&#125;)</div></pre></td></tr></table></figure>
<p>在这些例子中我们都将能够得到过滤后的列表。</p>
<p>而在Ramda中，我们可能通过这种方式：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> incomplete = <span class="type">R</span>.<span class="built_in">filter</span>(<span class="type">R</span>.<span class="keyword">where</span>(&#123;complete: <span class="literal">false</span>&#125;));</div></pre></td></tr></table></figure>
<p>你有注意到他们的区别吗？在代码当中没有涉及到任何的任务列表，Ramda代码只提供了一个函数。</p>
<p>为了能够得到过滤后的task集合，我们仍然需要在调用该函数时提供task列表。</p>
<p>由于我们当前得到的是一个函数，所以我们可以非常轻易的将它运用在其他任何的数据操作当中。想想一下如果我们已经存在一个函数叫<code>groupByUser</code>,这个函数可以更具用户对TODO列表进行分组，那么现在我们可以非常简单的创建一个新的函数：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> activeByUser = R.compose(groupByUser, incomplete)</div></pre></td></tr></table></figure>
<p>这个函数可以帮助我们过滤出所有的未完成的task列表，并且按照用户进行组合。</p>
<p>当然，由于这个函数功能本身非常简单。如果愿意，我们也可以写出同样功能的代码如下：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> activeByUser = <span class="function"><span class="keyword">function</span><span class="params">(tasks)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> groupByUser(incomplete(tasks))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>组合作为函数式编程的关键技术，可以让我们实现相同功能的同时，避免手动就组合不同的函数功能。让我们来看看当我们想要给这个函数添加一些新功能时会发生什么？ 如果我们需要按照截止时间对TODO列表进行排序？</p>
<figure class="highlight tp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var sortUserTaks = <span class="keyword">R</span>.compose(<span class="keyword">R</span>.map(<span class="keyword">R</span>.sortBy(<span class="keyword">R</span>.prop(<span class="string">"dueDate"</span>))), activeByUser)</div></pre></td></tr></table></figure>
<h3 id="All-in-one"><a href="#All-in-one" class="headerlink" title="All in one?"></a>All in one?</h3><p>细心的读者可能已经注意到了我们的compose函数允许多个参数，所以为什么我们通过一个调用来完成以上的功能？</p>
<figure class="highlight tp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var sortUserTasks = <span class="keyword">R</span>.compose(<span class="keyword">R</span>.mapObj(<span class="keyword">R</span>.sortBy(<span class="keyword">R</span>.prop(<span class="string">'dueDate'</span>))), groupByUser, <span class="keyword">R</span>.filter(<span class="keyword">R</span>.where(&#123;complete: false&#125;)))</div></pre></td></tr></table></figure>
<p>我的回答是，如果这里没有任何其他地方需要调用中间函数activeByUser以及incomplete可能是你这样使用的理由之一。但是这样会使得我们的函数非常难于调试，并且并没有为我们的diamante增加任何的可读性。</p>
<p>事实上，我想说的是我们在一个函数内容使用了相当复杂的内容，并且这部分内容是可能服用的，所以如果按照下面的方式来完成同样的功能可能会更好。</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var sortByDate</span> = R.sortBy(R.prop(<span class="string">'dueDate'</span>));</div><div class="line"><span class="attribute">var sortUserTasks</span> = R.compose(R.mapObj(sortByDate), activeByUser);</div></pre></td></tr></table></figure>
<p>现在我们可以在任何需要通过due date对task进行排序的地方使用sortByDate这个函数了（事实上，我们基本上可以对于任何对象中包含dueDate的对象集合进行排序）</p>
<p>Oh, 但是等等，是不是有人说过我们需要通过逆序的方式来对due date进行排序呢？</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var sortByDateDescend</span> = R.compose(R.reverse, sortByDate);</div><div class="line"><span class="attribute">var sortUserTasks</span> = R.compose(R.mapObj(sortByDateDescend), activeByUser);</div></pre></td></tr></table></figure>
<p>当然如果我们事先知道我们需要通过逆序的方式对列表进行排序，我们可能只会声明一个sortByDayeDescend的方法，但是我个人更习惯于保持着两个方法，这样可以防止需求改变对代码的影响，当然这都取决于你自己。</p>
<h3 id="Where’s-the-Data"><a href="#Where’s-the-Data" class="headerlink" title="Where’s the Data?"></a>Where’s the Data?</h3><p>到目前为止我们还没有使用任何的实际数据. 那这里到底发生了什么? 在没有数据的情况下进行了数据处理，这里恐怕需要你的一点耐心来理解这个事情。 当你使用函数式编程时，你的所有函数形成的是一个管道，每一个函数处理完数据之后就将结果传递给下一个函数，直到所有流程处理完后你才得到你所需要的结果。</p>
<p>到目前为止我们所构建的只是一个函数的集合</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1. <span class="selector-tag">incomplete</span>: <span class="selector-attr">[Task]</span> <span class="selector-tag">-</span>&gt; <span class="selector-attr">[Task]</span></div><div class="line">2. <span class="selector-tag">sortByDate</span>: <span class="selector-attr">[Task]</span> <span class="selector-tag">-</span>&gt; <span class="selector-attr">[Task]</span></div><div class="line">3. <span class="selector-tag">sortByDateDescend</span>: <span class="selector-attr">[Task]</span> <span class="selector-tag">-</span>&gt; <span class="selector-attr">[Task]</span></div><div class="line">4. <span class="selector-tag">activeByUser</span>: <span class="selector-attr">[Task]</span> <span class="selector-tag">-</span>&gt; &#123;<span class="attribute">String</span>: [Task]&#125;</div><div class="line">5. <span class="selector-tag">sortUserTasks</span>: &#123;<span class="attribute">String</span>: [Task]&#125; <span class="selector-tag">-</span>&gt; &#123;<span class="attribute">String</span>: [Task]&#125;</div></pre></td></tr></table></figure>
<p>虽然我们已经使用之前创建的函数构造了一个新的函数sortUserTasks， 并且这些函数都有明确的用途。 而这里我们似乎掩盖了一些事情，我们只是告诉你假如我们已经有了一个函数gourpByUser并且通过这个函数构建了activeByUser; 但是我们并没有真正的看到这个函数。 那么我们如何构建一个呢？</p>
<p>这里是一种可能性：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var groupByUser</span> = R.partition(R.prop(<span class="string">'username'</span>));</div></pre></td></tr></table></figure>
<p>partition函数使用了Ramda提供的<em>reduce</em>, Ramda中的<em>reduce</em>与<em>Array.prototype.reduce</em>非常像是。在其他的许多函数式编程语言当中，也被称为<em>fold1</em>。 这里我们并不打算深入的讨论这个特性。 prop(‘username’)依次从每个对象中解析”username”属性，而partition函数将包含相同key的项添加到子列表当中</p>
<p>（这里是是不是通过一个闪亮的新函数分散了你的注意力？目前为止我还不打算提及真正的数据，抱歉，但是值得期待的是接下来马上又会有更多的强大的函数出现）</p>
<h3 id="But-Wait-There’s-More"><a href="#But-Wait-There’s-More" class="headerlink" title="But Wait, There’s More"></a>But Wait, There’s More</h3><p>我们可以接着处理数据，直到我们满意为止，如果我们想象选取前5个列表元素，那么我们可以使用Ramda的take函数。所以如果我们要一次得到每一个用户的前5个列表项我们可以像下面这样处理：</p>
<figure class="highlight tp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var topFiveUserTasks = <span class="keyword">R</span>.compose(<span class="keyword">R</span>.mapObj(<span class="keyword">R</span>.take(<span class="number">5</span>)), sortUserTasks);</div></pre></td></tr></table></figure>
<p>我们还可以只返回对象的属性的子集，比如我们只需要task项的title和due date，在这个数据结构中username是明显对于的属性，并且我们也并不需要其它系统知道这些属性。</p>
<p>这里我们可以使用Ramda提供的类似于SQL的select函数，这里我们叫做project:</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var importantFields</span> = R.project([<span class="string">'title'</span>, <span class="string">'dueDate'</span>]);</div><div class="line"><span class="attribute">var topDataAllUsers</span> = R.compose(R.mapObj(importantFields), topFiveUserTasks);</div></pre></td></tr></table></figure>
<p>我们在这里创建的这些函数似乎可以非常轻易的在其它的需要类似TODO应用的系统中进行复用。现在我们回顾一下我们完成的所有代码，如下所示：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="attribute">var incomplete</span> = R.filter(R.where(&#123;complete: false&#125;));</div><div class="line"><span class="attribute">var sortByDate</span> = R.sortBy(R.prop(<span class="string">'dueDate'</span>));</div><div class="line"><span class="attribute">var sortByDateDescend</span> = R.compose(R.reverse, sortByDate);</div><div class="line"><span class="attribute">var importantFields</span> = R.project([<span class="string">'title'</span>, <span class="string">'dueDate'</span>]);</div><div class="line"><span class="attribute">var groupByUser</span> = R.partition(R.prop(<span class="string">'username'</span>));</div><div class="line"><span class="attribute">var activeByUser</span> = R.compose(groupByUser, incomplete);</div><div class="line"><span class="attribute">var topDataAllUsers</span> = R.compose(R.mapObj(R.compose(importantFields,</div><div class="line">    R.take(5), sortByDateDescend)), activeByUser);</div></pre></td></tr></table></figure>
<h3 id="All-Right-Already-My-I-See-Some-Data"><a href="#All-Right-Already-My-I-See-Some-Data" class="headerlink" title="All Right, Already! My I See Some Data?"></a>All Right, Already! My I See Some Data?</h3><p>是的，当然可以。</p>
<p>现在已经是时候将数据导入我们的函数当中。但是需要注意的一点是，这些函数都接收相同的数据类型，一个TODO对象的集合。我们并没有明确的支出这个TODO的具体数据结构，但是我们清楚他们至少应该包含以下属性：</p>
<ul>
<li>complete: Boolean</li>
<li>dueDate: String, 满足 YYYY-MM-DD格式</li>
<li>title: String</li>
<li>userName: String</li>
</ul>
<p>那么如果我们有了一个 tasks的集合，我们如何使用呢？ 非常简单：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var results</span> = topDataAllUsers(tasks);</div></pre></td></tr></table></figure>
<p>就是这样？</p>
<p>恐怕确实是的，results对象可能的结构如下所示：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attribute">Michael</span>: [</div><div class="line">        &#123;<span class="attribute">dueDate</span>: <span class="string">'2014-06-22'</span>, <span class="attribute">title</span>: <span class="string">'Integrate types with main code'</span>&#125;,</div><div class="line">        &#123;<span class="attribute">dueDate</span>: <span class="string">'2014-06-15'</span>, <span class="attribute">title</span>: <span class="string">'Finish algebraic types'</span>&#125;,</div><div class="line">        &#123;<span class="attribute">dueDate</span>: <span class="string">'2014-06-06'</span>, <span class="attribute">title</span>: <span class="string">'Types infrastucture'</span>&#125;,</div><div class="line">        &#123;<span class="attribute">dueDate</span>: <span class="string">'2014-05-24'</span>, <span class="attribute">title</span>: <span class="string">'Separating generators'</span>&#125;,</div><div class="line">        &#123;<span class="attribute">dueDate</span>: <span class="string">'2014-05-17'</span>, <span class="attribute">title</span>: <span class="string">'Add modulo function'</span>&#125;</div><div class="line">    ],</div><div class="line">    <span class="attribute">Richard</span>: [</div><div class="line">        &#123;<span class="attribute">dueDate</span>: <span class="string">'2014-06-22'</span>, <span class="attribute">title</span>: <span class="string">'API documentation'</span>&#125;,</div><div class="line">        &#123;<span class="attribute">dueDate</span>: <span class="string">'2014-06-15'</span>, <span class="attribute">title</span>: <span class="string">'Overview documentation'</span>&#125;</div><div class="line">    ],</div><div class="line">    <span class="attribute">Scott</span>: [</div><div class="line">        &#123;<span class="attribute">dueDate</span>: <span class="string">'2014-06-22'</span>, <span class="attribute">title</span>: <span class="string">'Complete build system'</span>&#125;,</div><div class="line">        &#123;<span class="attribute">dueDate</span>: <span class="string">'2014-06-15'</span>, <span class="attribute">title</span>: <span class="string">'Determine versioning scheme'</span>&#125;,</div><div class="line">        &#123;<span class="attribute">dueDate</span>: <span class="string">'2014-06-09'</span>, <span class="attribute">title</span>: <span class="string">'Add `mapObj`'</span>&#125;,</div><div class="line">        &#123;<span class="attribute">dueDate</span>: <span class="string">'2014-06-05'</span>, <span class="attribute">title</span>: <span class="string">'Fix `and`/`or`/`not`'</span>&#125;,</div><div class="line">        &#123;<span class="attribute">dueDate</span>: <span class="string">'2014-06-01'</span>, <span class="attribute">title</span>: <span class="string">'Fold algebra branch back in'</span>&#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有趣的是，你还可以在incomplete函数中使用，用过过滤列表：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var incompleteTasks</span> = incomplete(tasks);</div></pre></td></tr></table></figure>
<p>也许就会得到如下的结果：</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        username: <span class="symbol">'Scott</span>',</div><div class="line">        title: <span class="symbol">'Add</span> `mapObj`',</div><div class="line">        dueDate: <span class="symbol">'2014-06-09</span>',</div><div class="line">        complete: false,</div><div class="line">        effort: <span class="symbol">'low</span>',</div><div class="line">        priority: <span class="symbol">'medium</span>'</div><div class="line">    &#125;, &#123;</div><div class="line">        username: <span class="symbol">'Michael</span>',</div><div class="line">        title: <span class="symbol">'Finish</span> algebraic types',</div><div class="line">        dueDate: <span class="symbol">'2014-06-15</span>',</div><div class="line">        complete: true,</div><div class="line">        effort: <span class="symbol">'high</span>',</div><div class="line">        priority: <span class="symbol">'high</span>'</div><div class="line">    &#125; /*, ... */</div><div class="line">]</div></pre></td></tr></table></figure>
<p>当然同样可以使用这个集合应用到sortBydate，sortByDateDescend，importantFields，byUser或者是activeByUser。 因为他们都支持同样的数据结构，一个tasks的集合。通过简单的组合我们就可以构建一个庞大的工具集合</p>
<h3 id="New-Requirements"><a href="#New-Requirements" class="headerlink" title="New Requirements"></a>New Requirements</h3><p>在刚才的游戏当中，你已经学会了根据你的需求为函数添加新的特性。 你需要过滤所有的tasks并且按照用户组成集合，接着运行同样的过滤，排序并且获得特定用户的tasks列表，之后将生成的列表与之前产生的username产生mapping.</p>
<p>这些所有的逻辑目前都嵌套在topDataAllUsers当中，这个可能将我们的函数组合功能显得太激进了。但是我们可以非常轻易的对这个函数进行重构。正如平时一样，最困难的事情其实是如何给我们的新函数去一个好的名字。”gloss”可能并不合适，但是现在正是深夜，我已经尽力了。</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var gloss</span> = R.compose(importantFields, R.take(5), sortByDateDescend);</div><div class="line"><span class="attribute">var topData</span> = R.compose(gloss, incomplete);</div><div class="line"><span class="attribute">var topDataAllUsers</span> = R.compose(R.mapObj(gloss), activeByUser);</div><div class="line"><span class="attribute">var byUser</span> = R.use(R.filter).over(R.propEq(<span class="string">"username"</span>));</div></pre></td></tr></table></figure>
<p>接下来当你可以这样进行调用：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var results = topData(<span class="name">byUser</span>('Scott', tasks))</div></pre></td></tr></table></figure>
<h3 id="I-just-Want-My-Data-Thanks"><a href="#I-just-Want-My-Data-Thanks" class="headerlink" title="I just Want My Data, Thanks"></a>I just Want My Data, Thanks</h3><p>“好了，好了，这些功能确实很酷，但是现在我只想得到我的数据。 我不希望产生一堆只是在将来产生数据的函数，或者我能不能直接使用Ramda?”</p>
<p>当然可以。</p>
<p>来让我们看看我们最先完成的函数：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> incomplete = <span class="type">R</span>.<span class="built_in">filter</span>(<span class="type">R</span>.<span class="keyword">where</span>(&#123;complete: <span class="literal">false</span>&#125;))</div></pre></td></tr></table></figure>
<p>那么我们如何将这个转换一下然后得到我们需要的数据呢？ 非常简单：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> incompleteTasks = <span class="type">R</span>.<span class="built_in">filter</span>(<span class="type">R</span>.<span class="keyword">where</span>(&#123;complete: <span class="literal">false</span>&#125;), tasks);</div></pre></td></tr></table></figure>
<p>上面的方式对于我们刚才所有的其他函数都适用：只需要在调用时将tasks作为最后一个参数，这个时候你就能得到你所需要的数据。</p>
<h3 id="What-Just-Happened"><a href="#What-Just-Happened" class="headerlink" title="What Just Happened?"></a>What Just Happened?</h3><p>这是Ramda的另外一个主要的特定。所有Ramda提供的函数都是自动柯里化的。 这就意味着如果在调用函数时没有提供函数的所有参数，我们将只是返回给你一个新的函数，而这个函数所需的参数则是之前未调用未提供的参数。 所以对于<em>filter</em>函数，在定义时涉及到两个参数，一个是数组array，另外一个是用于过滤数组的布尔函数function。 在第一个班中中，我们并没有向filter提供values参数，所以filter只是简单的返回一个以array为参数的数组的新函数。 而在第二个版本中，我们在调用时传入了array参数，这个时候filter将会使用布尔函数进行计算，过滤出我们所需要的结果。</p>
<p>自动柯里化是的Ramda的函数以及function-first, data-last的API涉及使得Ramda能够非常容易的实现函数组合的编程风格。</p>
<p>更多的关于Ramda柯里化得资料可以参考一些其他的文章<a href="http://hughfdjackson.com/javascript/why-curry-helps/" target="_blank" rel="external">Why Curry Helps</a></p>
<h3 id="Come-On-Does-this-Stuff-Really-Work"><a href="#Come-On-Does-this-Stuff-Really-Work" class="headerlink" title="Come On, Does this Stuff Really Work?"></a>Come On, Does this Stuff Really Work?</h3><p>好吧，下面就是我们刚才讨论代码在JSFiddle中的运行结果：</p>
<script async src="//jsfiddle.net/CrossEye/Gk6uu/embed/"></script>

<p>简洁的代码也正是我们使用Ramda的另一个很好的理由。</p>
<h3 id="Using-Ramda"><a href="#Using-Ramda" class="headerlink" title="Using Ramda"></a>Using Ramda</h3><p>你可以通过Github或者NPM获得 Ramda的代码。</p>
<p>如果需要在Node中使用，只需要如下操作：</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> install ramda</div><div class="line"><span class="keyword">var</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</div></pre></td></tr></table></figure>
<p>如果想在浏览器中使用，只需要引入即可：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/yourCopyOf/ramda.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然我们也会尝试将Ramda尽快托管在某些CDN服务中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当buzzdecafe最近向大家介绍了Ramda之后，这里基本上存在两种截然不同的反应。那些已经习惯在Javascript或者其它语言中使用函数式编程的人大部分反应是“Cool”. 他们可能会感到兴奋或者只是注意到Ramda可能作为另一个工具，并且他们理解这是什么。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift中使用RESideMenu</title>
    <link href="http://yunlzheng.github.io/2015/09/20/residemenu-with-swift/"/>
    <id>http://yunlzheng.github.io/2015/09/20/residemenu-with-swift/</id>
    <published>2015-09-20T09:09:49.000Z</published>
    <updated>2016-12-20T07:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>RESideMenu是github上开源的一个Objective-c实现IOS侧滑菜单的组件库. 本文简单介绍一下如何在Swift中集成并且使用该第三发库</p>
<h2 id="添加RESideMenu依赖"><a href="#添加RESideMenu依赖" class="headerlink" title="添加RESideMenu依赖"></a>添加RESideMenu依赖</h2><p>在Podfile中添加一下内容</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">pod</span> <span class="string">'RESideMenu'</span>, <span class="string">'~&gt; 4.0.7'</span></div></pre></td></tr></table></figure>
<p>运行install命令即可下载并且编译依赖的第三方库</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">pod instal</span></div></pre></td></tr></table></figure>
<p>由于podfile中定义use_frameworks!，对于Objective-c实现的第三方库，我们不需要使用Header文件导入依赖，直接在Swift文件中import即可</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> RESideMenu</div></pre></td></tr></table></figure>
<h2 id="添加根视图控制器"><a href="#添加根视图控制器" class="headerlink" title="添加根视图控制器"></a>添加根视图控制器</h2><p>RESideMenu实现方式为，创建了一个父容器。 当中包含了3个子视图控制器：contentViewController,leftMenuViewController,rightMenuViewController。</p>
<p>并且提供了两个主要方法presendLeftMenuViewController和presendRightMenuViewController分别用户显示左菜单，以及显示右菜单</p>
<p>由RESideMenu控制并且实现3个子视图之前的切换</p>
<p>在Main.storyboard中添加相应的视图创建3个视图并且命名为Storyboard ID为LeftMenuViewController和ContentViewController</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/residemenu0.png" alt=""></p>
<p>创建RootViewController.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> RESideMenu</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootViewController</span>: <span class="title">RESideMenu</span>, <span class="title">RESideMenuDelegate</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">awakeFromNib</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.menuPreferredStatusBarStyle = <span class="type">UIStatusBarStyle</span>.<span class="type">LightContent</span></div><div class="line">        <span class="keyword">self</span>.contentViewShadowColor = <span class="type">UIColor</span>.blackColor();</div><div class="line">        <span class="keyword">self</span>.contentViewShadowOffset = <span class="type">CGSizeMake</span>(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">self</span>.contentViewShadowOpacity = <span class="number">0.6</span>;</div><div class="line">        <span class="keyword">self</span>.contentViewShadowRadius = <span class="number">12</span>;</div><div class="line">        <span class="keyword">self</span>.contentViewShadowEnabled = <span class="literal">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.contentViewController = <span class="keyword">self</span>.storyboard?.instantiateViewControllerWithIdentifier(<span class="string">"ContentViewController"</span>) <span class="keyword">as</span>! <span class="type">UIViewController</span></div><div class="line">        <span class="keyword">self</span>.leftMenuViewController = <span class="keyword">self</span>.storyboard?.instantiateViewControllerWithIdentifier(<span class="string">"LeftMenuViewController"</span>) <span class="keyword">as</span>! <span class="type">UIViewController</span></div><div class="line"></div><div class="line">        <span class="keyword">self</span>.backgroundImage = <span class="type">UIImage</span>(named: <span class="string">"MenuBackground"</span>)</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">    // MARK: - Navigation</div><div class="line"></div><div class="line">    // In a storyboard-based application, you will often want to do a little preparation before navigation</div><div class="line">    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) &#123;</div><div class="line">        // Get the new view controller using segue.destinationViewController.</div><div class="line">        // Pass the selected object to the new view controller.</div><div class="line">    &#125;</div><div class="line">    */</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="关联事件"><a href="#关联事件" class="headerlink" title="关联事件"></a>关联事件</h2><p>如下图所示，在ContentViewController中添加菜单按钮，并且右键关联点击事件即可</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/1.png" alt="http://7pn5d3.com1.z0.glb.clouddn.com/1.png"></p>
<p>运行效果如下</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/residemenu22.png" alt="http://7pn5d3.com1.z0.glb.clouddn.com/residemenu22.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主要内容&quot;&gt;&lt;/a&gt;主要内容&lt;/h2&gt;&lt;p&gt;RESideMenu是github上开源的一个Objective-c实现IOS侧滑菜单的组件库. 本文简单介绍一下如何在Sw
    
    </summary>
    
    
      <category term="swift" scheme="http://yunlzheng.github.io/tags/swift/"/>
    
      <category term="ios" scheme="http://yunlzheng.github.io/tags/ios/"/>
    
      <category term="xcode" scheme="http://yunlzheng.github.io/tags/xcode/"/>
    
  </entry>
  
  <entry>
    <title>XCode依赖管理刨坑记</title>
    <link href="http://yunlzheng.github.io/2015/09/20/use-cocoapods/"/>
    <id>http://yunlzheng.github.io/2015/09/20/use-cocoapods/</id>
    <published>2015-09-20T06:52:22.000Z</published>
    <updated>2016-12-20T07:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>笔者断断续续接触IOS开始有小几个月，中间也遇到了许多问题，这里主要记录一下与依赖管理相关的内容</p>
<h2 id="IOS依赖管理"><a href="#IOS依赖管理" class="headerlink" title="IOS依赖管理"></a>IOS依赖管理</h2><p>在进行程序开发过程中，我们经常会用到各种各样的开源工具。 比如IOS开发中经常使用的Alamofire。那这个时候我们如何在我们项目中使用这些第三方开源代码呢？</p>
<h3 id="手动管理"><a href="#手动管理" class="headerlink" title="手动管理"></a>手动管理</h3><p>初入IOS坑，必须经历一下手动管理依赖的洗礼，</p>
<p>以Alamofire为例，我们可以使用git submodule来添加依赖</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git submodule <span class="built_in">add</span> http<span class="variable">s:</span>//github.<span class="keyword">com</span>/Alamofire/Alamofire.git</div></pre></td></tr></table></figure>
<p>之后的过程就是手动将Alamofire目录下的Alamofire.xcodeproj文件拖入到项目中</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/cocoapods1.png" alt="cocoapods1.png"></p>
<p>选择项目的Targets</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/cocoapods2.png" alt="cocoapods2.png"></p>
<p>在Embeded Binaries中添加依赖的包</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/cocoapods3.png" alt="cocoapods3.png"></p>
<blockquote>
<p>这里可以看到有连个Alamofire的包，两个中任意选择一个即可，上面的包是IOS，下面的包是给OSX的，选择即可</p>
</blockquote>
<p>上面的过程中其实忽略了很多其他的问题，包括依赖第三方包得版本，第三方包得Build target信息等等，所以你想真正用上Alamofire提供的功能还有很多曲折的路要走</p>
<p>总之手动管理XCode第三方依赖，缺失够折磨人得</p>
<h3 id="尝鲜之选Carthage"><a href="#尝鲜之选Carthage" class="headerlink" title="尝鲜之选Carthage"></a>尝鲜之选Carthage</h3><p>目前笔者已知的XCode依赖管理工具<a href="https://cocoapods.org/" target="_blank" rel="external">Cocoapods</a>和<a href="https://github.com/Carthage/Carthage" target="_blank" rel="external">Carthage</a>.</p>
<p>本着“选新不选旧”，”选轻不选重”的原则，笔者尝试使用了Carthage，</p>
<p>Carthage工具使用本身不复杂</p>
<p>Mac用户直接使用brew进行安装即可，其工作模式是根据用户提供的Cartfile定义的依赖，使用xcodebuild编译依赖的项目成framework包，再直接引入到项目中使用</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>carthage</div></pre></td></tr></table></figure>
<p>以Alamofire为例，我们只需要在项目根目录下创建Cartfile文件，并添加如下内容</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">github <span class="string">"Alamofire/Alamofire"</span><span class="function"> ~&gt;</span> <span class="number">2.0</span></div></pre></td></tr></table></figure>
<p>运行carthage update命令下载，并且编译依赖的项目</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 更新下载依赖</span></div><div class="line">carthage update</div><div class="line"><span class="meta"># 构建</span></div><div class="line">carthage build</div></pre></td></tr></table></figure>
<p>生成的目录结构如下：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="string">|- DemoApplication1.xcodeproj</span></div><div class="line"><span class="string">|- Cartfile</span></div><div class="line"><span class="string">|- Cartfile.resolved</span></div><div class="line"><span class="string">|- Carthage</span></div><div class="line">   <span class="string">|- Build</span></div><div class="line">      <span class="string">|- iOS</span></div><div class="line">        <span class="string">|- xxx.framework</span></div><div class="line">      <span class="string">|- Mac</span></div><div class="line">        <span class="string">|- xxx.framework</span></div><div class="line">   <span class="string">|- Checkouts</span></div><div class="line">      <span class="string">|- Alamofire</span></div></pre></td></tr></table></figure>
<p>之后就可以直接依赖Carthage/Build/IOS下的framework包即可</p>
<p>目前Carthage只支持Github源，并且至少的笔者本机进行使用时会出现各种错误信息，比如：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜  DemoApplication1 git:(master) ✗ carthage <span class="keyword">update</span></div><div class="line">*** Fetching Alamofire</div><div class="line">*** Checking <span class="keyword">out</span> Alamofire <span class="keyword">at</span> <span class="string">"2.0.1"</span></div><div class="line">*** xcodebuild <span class="keyword">output</span> can be <span class="keyword">found</span> <span class="keyword">in</span> /<span class="keyword">var</span>/folders/<span class="number">5</span>q/xkj0b13j7195yb_74vgymr2r0000gn/T/carthage-xcodebuild.NOiC68.log</div><div class="line">*** Building scheme <span class="string">"Alamofire watchOS"</span> <span class="keyword">in</span> Alamofire.xcworkspace</div><div class="line"><span class="number">2015</span><span class="number">-09</span><span class="number">-20</span> <span class="number">15</span>:<span class="number">43</span>:<span class="number">01.731</span> xcodebuild[<span class="number">3402</span>:<span class="number">86145</span>] [MT] iPhoneSimulator: SimVerifier returned: <span class="keyword">Error</span> <span class="keyword">Domain</span>=NSPOSIXErrorDomain Code=<span class="number">53</span> <span class="string">"Simulator verification failed."</span> UserInfo=<span class="number">0x7fc625dadf50</span> &#123;NSLocalizedFailureReason=A <span class="keyword">connection</span> <span class="keyword">to</span> the simulator verification service could <span class="keyword">not</span> be established., NSLocalizedRecoverySuggestion=Ensure that Xcode.app <span class="keyword">is</span> installed <span class="keyword">on</span> a volume <span class="keyword">with</span> ownership enabled., NSLocalizedDescription=Simulator verification failed.&#125;</div><div class="line">xcodebuild: <span class="keyword">error</span>: <span class="keyword">Failed</span> <span class="keyword">to</span> <span class="keyword">build</span> workspace Alamofire <span class="keyword">with</span> scheme Alamofire watchOS.</div><div class="line">	Reason: The run destination My Mac <span class="keyword">is</span> <span class="keyword">not</span> valid <span class="keyword">for</span> Running the scheme <span class="string">'Alamofire watchOS'</span>.</div><div class="line">A shell task <span class="keyword">failed</span> <span class="keyword">with</span> <span class="keyword">exit</span> code <span class="number">70</span></div></pre></td></tr></table></figure>
<p>以及其他的错误，所以在折腾了好一段之后，果断还是放弃了。</p>
<p>使用Carthage最终宣告失败</p>
<h3 id="老牌依赖管理工具Cocoapods"><a href="#老牌依赖管理工具Cocoapods" class="headerlink" title="老牌依赖管理工具Cocoapods"></a>老牌依赖管理工具Cocoapods</h3><p>在几经周折，还是回到老牌XCode依赖管理工具Cocoapods怀抱中，cocoapods是基于ruby实现的XCode依赖管理工具</p>
<p>安装使用如下命令即可：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem <span class="keyword">install</span> cocoapods</div></pre></td></tr></table></figure>
<p>在项目根目录下创建Podfile文件</p>
<p>添加以下内容</p>
<figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">source</span> <span class="string">'https://github.com/CocoaPods/Specs.git'</span></div><div class="line"><span class="keyword">platform</span> :ios, <span class="string">'8.0'</span></div><div class="line">use_frameworks!</div><div class="line"></div><div class="line">pod <span class="string">'Alamofire'</span>, <span class="string">'~&gt; 2.0'</span></div></pre></td></tr></table></figure>
<p>运行pod install即可下载并且编译相关的依赖文件</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Updating <span class="keyword">local</span> specs repositories</div><div class="line"></div><div class="line">CocoaPods 0.39.0.beta.4 is available.</div><div class="line">To <span class="keyword">update</span> <span class="keyword">use</span>: `sudo gem install cocoapods --pre`</div><div class="line">[!] This is a <span class="keyword">test</span> <span class="keyword">version</span> we'<span class="keyword">d</span> love you to try.</div><div class="line"></div><div class="line"><span class="keyword">For</span> <span class="keyword">more</span> information see http:<span class="comment">//blog.cocoapods.org</span></div><div class="line">and the CHANGELOG <span class="keyword">for</span> this <span class="keyword">version</span> http:<span class="comment">//git.io/BaH8pQ.</span></div><div class="line"></div><div class="line">Analyzing dependencies</div><div class="line">Downloading dependencies</div><div class="line">Installing Alamofire (2.0.1)</div><div class="line">Generating Pods project</div><div class="line">Integrating client project</div><div class="line"></div><div class="line">[!] Please <span class="keyword">close</span> any current Xcode sessions and <span class="keyword">use</span> `DemoApplication1.xcworkspace` <span class="keyword">for</span> this project from now <span class="keyword">on</span>.</div><div class="line">Sending stats</div></pre></td></tr></table></figure>
<p>Cocoapods会在当前目录下创建应用的xcworkspace，打开生成的workspace即可在项目中使用构建出的第三方项目</p>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/cocoapods5.png" alt=""></p>
<p>折腾到这里，基本上能够正常的使用Cocoapods管理并且使用第三方库</p>
<p>需要注意的一点是对于在Swift中使用Objective-c的第三方库，在Podfile文件中我们使用了,这样一个配置</p>
<figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use_frameworks!</div></pre></td></tr></table></figure>
<p>强制将第三方库作为framework使用</p>
<p>在一般情况下，我们使用-Bridging-Header.h文件我们可以导入Objective-c实现swift和objective-c的混合使用。<br>当添加了use_frameworks之后，pod会将objective-c的代码编译成framework,所以我们可以直接在项目的swift代码中使用import导入相应的库</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主要内容&quot;&gt;&lt;/a&gt;主要内容&lt;/h2&gt;&lt;p&gt;笔者断断续续接触IOS开始有小几个月，中间也遇到了许多问题，这里主要记录一下与依赖管理相关的内容&lt;/p&gt;
&lt;h2 id=&quot;I
    
    </summary>
    
    
      <category term="swift" scheme="http://yunlzheng.github.io/tags/swift/"/>
    
      <category term="ios" scheme="http://yunlzheng.github.io/tags/ios/"/>
    
      <category term="xcode" scheme="http://yunlzheng.github.io/tags/xcode/"/>
    
  </entry>
  
  <entry>
    <title>Code Review Guide</title>
    <link href="http://yunlzheng.github.io/2015/06/15/code-review-guide/"/>
    <id>http://yunlzheng.github.io/2015/06/15/code-review-guide/</id>
    <published>2015-06-15T13:30:15.000Z</published>
    <updated>2016-12-20T07:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>代码审查，作为一个团队的日常质量活动扮演着重要的作用。但是作为一个群体活动，必然需要参与者都遵守一套行为准则，避免将Code Review变成一场争论。得不偿失。<br>本文翻译自thoughtbot关于<a href="https://github.com/thoughtbot/guides/blob/master/code-review/README.md" target="_blank" rel="external">Code Review Guide</a></p>
<a id="more"></a>
<h2 id="作为参与者"><a href="#作为参与者" class="headerlink" title="作为参与者"></a>作为参与者</h2><ul>
<li>能够理解多种程序设计方案是可选的，需要讨论并且权衡你更喜欢哪一种，并且能够快速达成一致。</li>
<li>问问题，你为什么这么做？而不是你应该怎么做. (“你觉得 <code>:user_id</code>的命名怎么样?”)</li>
<li>要求澄清问题. (“我还不太明白，你能再讲清楚一点吗?”)</li>
<li>避免出现代码所有权的词汇 (“我的”, “不是我的”, “你的”)</li>
<li>假设每个人都是聪明的，善良的；避免使用指代人格相关的词汇(“笨蛋”，“愚蠢”)。</li>
<li>并不是每个人都能随时理解你的意图，表达经量明确不含糊。</li>
<li>要谦虚。</li>
<li>不要使用夸张性的词语. (“总是”, “从来”, “无休止的”, “绝不”)。</li>
<li>不要嘲讽。</li>
<li>表达你的真实意见。</li>
<li>面对面沟通，如果在沟通过程中出现太多“不明白”。</li>
</ul>
<h2 id="作为被审查者"><a href="#作为被审查者" class="headerlink" title="作为被审查者"></a>作为被审查者</h2><ul>
<li>感谢别人的意见。</li>
<li>对事不对人，审核的是代码而不是人。</li>
<li>解释那段代码为什么需要存在. (“It’s like that because of these reasons. Would it be more clear if I rename this class/file/method/variable?”)。</li>
<li>提取一些修改和重构的事作为故事卡来做。</li>
<li>把代码审查关联到Story。</li>
<li>Push commits based on earlier rounds of feedback as isolated commits to the<br>branch. Do not squash until the branch is ready to merge. Reviewers should be<br>able to read individual updates based on their earlier feedback.</li>
<li>尝试理解Reviewer的立场和意图。</li>
<li>经量对所有的评论做出回应。</li>
<li>等待，直到CI编译成功，并且单元测试通过才合并代码。</li>
</ul>
<h2 id="如何进行代码审核"><a href="#如何进行代码审核" class="headerlink" title="如何进行代码审核"></a>如何进行代码审核</h2><p>在理解这段代码为什么需要的基础上 (bug, user experience, refactoring). 再:</p>
<ul>
<li>Communicate which ideas you feel strongly about and those you don’t.</li>
<li>确定在简化代码的同时能够解决问题</li>
<li>如果讨论变得太抽象，就把这个问题挪到线下讨论，期间，让作者决定最终的实现方式</li>
<li>即使作者已经考虑过的问题，我们也可以提出不同的实现方式</li>
<li>尝试理解作者的立场和意图.</li>
<li>关闭pull request时使用”Ready to merge”的评论.</li>
</ul>
<blockquote>
<p>参考：<a href="https://github.com/thoughtbot/guides/blob/master/code-review/README.md" target="_blank" rel="external">https://github.com/thoughtbot/guides/blob/master/code-review/README.md</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码审查，作为一个团队的日常质量活动扮演着重要的作用。但是作为一个群体活动，必然需要参与者都遵守一套行为准则，避免将Code Review变成一场争论。得不偿失。&lt;br&gt;本文翻译自thoughtbot关于&lt;a href=&quot;https://github.com/thoughtbot/guides/blob/master/code-review/README.md&quot;&gt;Code Review Guide&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="翻译" scheme="http://yunlzheng.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Agile" scheme="http://yunlzheng.github.io/tags/Agile/"/>
    
  </entry>
  
  <entry>
    <title>React入坑指南</title>
    <link href="http://yunlzheng.github.io/2015/06/09/rock-with-react/"/>
    <id>http://yunlzheng.github.io/2015/06/09/rock-with-react/</id>
    <published>2015-06-09T12:08:18.000Z</published>
    <updated>2016-12-20T07:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>React.js 入坑记：快速上手，组件化，高复用，高性能。</p>
<a id="more"></a>
<h3 id="1-1，创建你的第一个React应用"><a href="#1-1，创建你的第一个React应用" class="headerlink" title="1.1，创建你的第一个React应用"></a>1.1，创建你的第一个React应用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build/JSXTransformer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/jsx"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">      <span class="keyword">var</span> HelloWorld = React.createClass(&#123;</div><div class="line">          <span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> (</div><div class="line">              <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line">            );</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      React.render(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">HelloWorld</span>/&gt;</span></span>,</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</div><div class="line">      );</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>在应用中使用React依赖两个文件react.js和JSXTransformer.js文件。一个是框架本身，另一个用于支持JSX语法；</strong></li>
<li><strong>React在组件中使用JSX语法（js和html混合语法），当然不用JSX也行；</strong></li>
<li><strong>当然官方也并不推荐你直接使用JSX语法,请参考<a href="http://facebook.github.io/react/docs/tooling-integration.html#jsx" target="_blank" rel="external">jsx预处理工工具</a>；</strong></li>
<li><strong>引用JSX脚本或者代码，script标签type为”text/jsx”;</strong></li>
</ul>
<h3 id="1-2，程序入口React-render"><a href="#1-2，程序入口React-render" class="headerlink" title="1.2，程序入口React.render()"></a>1.2，程序入口React.render()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">React.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"example"</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>React.render在React中算是程序的最基本入口，会将React模板转换为页面内容，添加到document.getElementById(“example”)当中，并且返回该组件的引用。</p>
<h3 id="1-3，创建组件React-createClass"><a href="#1-3，创建组件React-createClass" class="headerlink" title="1.3，创建组件React.createClass()"></a>1.3，创建组件React.createClass()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> HelloWorld = React.createClass(&#123;</div><div class="line">    <span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>React.createClass(object specification)方法将会根据specification创建一个组件类，一个组件必须要继承render方法，并且返回组件模板。创建完成组件之后我们就可以像应用html一样的使用组件。</p>
<ul>
<li><p>可以直接在render中使用;</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">React.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">HelloWorld</span>/&gt;</span></span></div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"example"</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
<li><p>也可以在其他组件中嵌套使用;</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Header = React.crrateClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">HelloWorld</span>/&gt;</span><span class="tag">&lt;<span class="name">HelloWorld</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>对于返回的内容必须要是闭合的子模板。如下所示：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#这是对的</span></div><div class="line"><span class="symbol">render:</span>function()&#123;</div><div class="line">  return (</div><div class="line">    <span class="params">&lt;ul&gt;</span><span class="params">&lt;li&gt;</span><span class="params">&lt;/li&gt;</span><span class="params">&lt;/ul&gt;</span></div><div class="line">  )</div><div class="line">&#125;</div><div class="line"><span class="meta"># 这是错的</span></div><div class="line"><span class="symbol">render:</span>function()&#123;</div><div class="line">  return (</div><div class="line">    <span class="params">&lt;div&gt;</span><span class="params">&lt;/div&gt;</span></div><div class="line">    <span class="params">&lt;div&gt;</span><span class="params">&lt;/div&gt;</span></div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2，组件详解"><a href="#2，组件详解" class="headerlink" title="2，组件详解"></a>2，组件详解</h2><h3 id="2-1，组件的属性this-props"><a href="#2-1，组件的属性this-props" class="headerlink" title="2.1，组件的属性this.props"></a>2.1，组件的属性this.props</h3><p>通过React.createClass()方法我们可以创建自己的组件，和组件本身的使用和直接使用html标签是非常相似的。最主要的区别在于组件的属性值可以是一个javascript对象（JSX语法）</p>
<p>在组件内使用this.props.attributeName可以获取到组件特定属性的值。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Menu = React.createClass(&#123;</div><div class="line">  render: function()&#123;</div><div class="line">    <span class="keyword">var</span> className = <span class="keyword">this</span>.props.active ? <span class="string">"active"</span> : <span class="string">""</span>;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;li className=&#123;className&#125;&gt;</div><div class="line">        &lt;a href=&#123;<span class="keyword">this</span>.props.href&#125;&gt;&lt;i className=&#123;<span class="keyword">this</span>.props.icon&#125;/&gt;&#123;<span class="keyword">this</span>.props.value&#125;&lt;/a&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">React.render(</div><div class="line">  &lt;Menu active=&#123;<span class="literal">true</span>&#125; href=<span class="string">'/login'</span> icon=<span class="string">'fa fa-weixin'</span> value=<span class="string">'登录'</span>/&gt;</div><div class="line">);</div></pre></td></tr></table></figure>
<blockquote>
<p>Tips：JSX支持javascript和html的混合语法。在JSX模板解析过程中,当遇到{}则使用js语法进行解析，其他则以html语法解析</p>
</blockquote>
<h3 id="2-2，-获取组件子节点内容this-props-children"><a href="#2-2，-获取组件子节点内容this-props-children" class="headerlink" title="2.2， 获取组件子节点内容this.props.children"></a>2.2， 获取组件子节点内容this.props.children</h3><p>既然我们可以像使用html标签一样的去使用React组件，那么一定是能够通过如下形式使用组件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Menus</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Menu</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Menu</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Menu</span>&gt;</span>归档<span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Menus</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在React中我们可以使用{this.props.children}获取组件中的子内容</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Menu = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">'normal'</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> Menus = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">React.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Menus</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">Menu</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Menu</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Menu</span>&gt;</span>归档<span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Menus</span>&gt;</span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"menus"</span>)</div><div class="line">)</div></pre></td></tr></table></figure>
<blockquote>
<p>Tips: 由于class和for是javascript的关键字，所以在JSX模板中使用className和htmlFor</p>
</blockquote>
<h3 id="2-3-遍历"><a href="#2-3-遍历" class="headerlink" title="2.3, 遍历"></a>2.3, 遍历</h3><p>上面的Menus菜单的例子，在实际情况中菜单一般会根据当前状态比如用户是否登录动态的现实菜单项目。重写上面的例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Menu = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;this.props.link&#125;</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> Menus = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> menus = <span class="keyword">this</span>.props.items.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Menu</span> <span class="attr">link</span>=<span class="string">&#123;item.link&#125;</span>&gt;</span>&#123;item.text&#125;<span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></span></div><div class="line">      )</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;menus&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">React.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Menus</span> <span class="attr">items</span>=<span class="string">&#123;[</span></span></span></div><div class="line">    &#123;<span class="attr">text:</span>'首页',<span class="attr">link:</span>'/'&#125;,</div><div class="line">    &#123;<span class="attr">text:</span>'博客',<span class="attr">link:</span>'/<span class="attr">blogs</span>'&#125;,</div><div class="line">    &#123;<span class="attr">text:</span>'归档',<span class="attr">link:</span>'<span class="attr">artive</span>'&#125;</div><div class="line">  ]&#125;&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">Menus</span>&gt;</span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"menus"</span>)</div><div class="line">)</div></pre></td></tr></table></figure>
<p>这里我们为Menus创建了一个items属性，该属性是一个数组，用来保存菜单项。</p>
<p>在Menus组件中我们通过this.props.items获取到菜单项的数组，这个使用js的map方法遍历items,每一次遍历返回一个Menu对象。最终返回一个ReactElement的数组menus. 从而实现动态的创建菜单列表。</p>
<h3 id="2-4，组件的生命周期与事件处理"><a href="#2-4，组件的生命周期与事件处理" class="headerlink" title="2.4，组件的生命周期与事件处理"></a>2.4，组件的生命周期与事件处理</h3><p>到目前为止，我们可以通过render去加载组件，并且可以通过this.props去获取组件相关的属性以及子内容。但是对于组件而言props是不可变的。但是对于一个组件而言它通常是会包含多种状态，<br>例如以Button为例子，就有enable和disabled的状态。</p>
<p>在React中，每一个组件都包含一个<strong>this.state</strong>属性，当通过<strong>this.setState()</strong> 方法设置组件的状态之后，React都会调用Render方法重绘组件。而在这个过程中React将会通过diff算法比较虚拟的DOM树与实际的DOM并且只变更之间差异的部分，从而保证高性能的局部刷新。</p>
<p>而对于每一个组件而言，都有其主要的生命周期主要包含以下3各部分：</p>
<ul>
<li>Mounting： 组件将要插入到DOM当中；<br>对应的处理函数：<ul>
<li>getInitialState()：object在组件mounted之前调用，返回组件的初始状态</li>
<li>componentWillMount()</li>
<li>componentDidMount()</li>
</ul>
</li>
<li>Updating：组件在重绘render时(必要时)；<ul>
<li>componentWillReceiveProps()</li>
<li>shouldComponentUpdate()</li>
<li>componentWillUpdate()</li>
<li>componentDidUpdate()</li>
</ul>
</li>
<li>Unmounting：组件将会从DOM众移除时；<ul>
<li>componentWillUnmount</li>
</ul>
</li>
</ul>
<blockquote>
<p>Tips: Javascrippt是基于事件驱动模型，假如在连续两次<strong>this.setState()</strong> 之后，React发现DOM没有变更，此时React并不会触发render方法</p>
</blockquote>
<p>在介绍完组件的生命周期以及状态state之后，我们遍可以根据这些方法创建一个有状态的组件。 同样是针对Menus和Menu组件，我们希望当点击Menu菜单项时能够设置该菜单项为active的状态。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Menu = React.createClass(&#123;</div><div class="line">  <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="comment">//调用回调函数</span></div><div class="line">    event.preventDefault();</div><div class="line">    <span class="keyword">this</span>.props.onSelect(<span class="keyword">this</span>.props.link);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&#123;this.props.active&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;this.props.link&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> Menus = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">link</span>: <span class="string">'/'</span>&#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params">link</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">link</span>: link&#125;)</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">var</span> menus = <span class="keyword">this</span>.props.items.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">      <span class="comment">// 将Menus的handleClick方法作为回调函数，用以触发Menus的重绘</span></div><div class="line">      <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Menu</span> <span class="attr">link</span>=<span class="string">&#123;item.link&#125;</span> <span class="attr">active</span>=<span class="string">&#123;that.state.link</span> == <span class="string">item.link&#125;</span> <span class="attr">onSelect</span>=<span class="string">&#123;that.handleClick&#125;</span>&gt;</span>&#123;item.text&#125;<span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></span></div><div class="line">      )</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;menus&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Menus组件：</p>
<p>针对Menus组件我们覆盖了getInitialState()方法，返回Menus组件的初始状态为{link:’/‘}。</p>
<p>同时添加了自定义的handleClick方法，传入link参数。在handleClick方法中我们使用this.setState方法。假如该方法被调用组件就会触发Render事件进行重绘。</p>
<p>Menu组件：</p>
<p>对于Menu组件我们添加了两个新的属性active和onSelect，分别用于设置Menu组件的class以及点击后的毁掉。 而这里我们的回调函数就是Menus组件的handleClick方法。这样当Menu点击时我们能够触发Menus的setState方法，对菜单进行重绘。</p>
<blockquote>
<p>在React中每一个组件事件上就是一个状态机，当状态发生变化时。组件触发render事件，对组件进行重绘</p>
</blockquote>
<h3 id="2-5，与Dom的交互"><a href="#2-5，与Dom的交互" class="headerlink" title="2.5，与Dom的交互"></a>2.5，与Dom的交互</h3><p>除此之外，当组件处于mounted状态时，我们可以通过React.findDOMNode()方法获取实际的DOM对象，此方法特别适用于处理诸如表单提交时，需要获取表单内容的情况。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Component = React.createClass(&#123;</div><div class="line">  handleSubmit: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    React.findDOMNode(<span class="keyword">this</span>.refs.InputText).value.trim();</div><div class="line">  &#125;,</div><div class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        &lt;form&gt;</div><div class="line">          &lt;input type=<span class="string">"text"</span> ref=<span class="string">"InputText"</span>/&gt;</div><div class="line">          &lt;button type=<span class="string">"submit"</span> value=<span class="string">"提交"</span> onClick=&#123;<span class="keyword">this</span>.handleSubmit&#125;/&gt;</div><div class="line">        &lt;/form&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="3，组件化的开发模式，复用，复用还是复用"><a href="#3，组件化的开发模式，复用，复用还是复用" class="headerlink" title="3，组件化的开发模式，复用，复用还是复用"></a>3，组件化的开发模式，复用，复用还是复用</h2><p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/blog_react_cpmponents.png" alt=""></p>
<p>以一个简单页面，当我们使用React将页面组件化之后，对于一个新的页面而言我们要做的事情就是进行组装。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> PageOne = React.createClass(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Header</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Menus</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Header</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">SomeForm</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Footer</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">&#125;);</div><div class="line">React.render(</div><div class="line">    PageOne,</div><div class="line">    document.getElementById('pageOne')</div><div class="line">);</div></pre></td></tr></table></figure>
<p>当然如果在另外一个页面我们也可以通过同样的方式，通过组件定义一个新的页面。</p>
<blockquote>
<p>Tips：用React是做单页应用还是多页应用？ 何苦呢，又不是只会用js一种语言，对于前段框架的使用我跟喜欢服务器端模板与前段模板混合的模式，各取所长。</p>
</blockquote>
<h2 id="5，结论"><a href="#5，结论" class="headerlink" title="5，结论"></a>5，结论</h2><p>通过组件化的开发方式，我们可以将我们的关注点从一个复杂的应用逻辑，转变对每一个组件本身。 同时组件化也以为着更小的功能块，以及更好的可测试性。 当然对于React本身而言其上手快，易学习以及诸如React Native这样的Mobile开发框架，相信React的路一定会走的非常顺畅。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React.js 入坑记：快速上手，组件化，高复用，高性能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="react.js" scheme="http://yunlzheng.github.io/tags/react-js/"/>
    
      <category term="web" scheme="http://yunlzheng.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>使用docker-compose进行python开发</title>
    <link href="http://yunlzheng.github.io/2015/06/06/dev-python-with-docker-compose/"/>
    <id>http://yunlzheng.github.io/2015/06/06/dev-python-with-docker-compose/</id>
    <published>2015-06-06T03:33:42.000Z</published>
    <updated>2016-12-20T07:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>Docker提供了容器级别的资源隔离，由于Python的外部依赖管理中存在的问题。我们通常会使用virtualenv来对不同的项目创建其唯一的依赖环境。这时利用Docker进行Python开发可以轻松解决不同Python项目之间的依赖隔离问题。</p>
<p>作为应用程序我们通常需要依赖于多种外部服务比如数据库，缓存服务等等。Docker-compose就是在Docker容器的基础之上，提供了统一的容器编排语言。可以让你更轻松的利用Docker构建你的应用环境</p>
<a id="more"></a>
<p><img src="http://7pn5d3.com1.z0.glb.clouddn.com/blogoctopus_blocks_die.png" alt=""></p>
<h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><p>我们使用requirements.txt定义我们的第三方python包依赖</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># requirements.txt</span></div><div class="line"><span class="attribute">Flask</span></div><div class="line">flask-assets</div></pre></td></tr></table></figure>
<p>Project-Root<br>   |– static<br>   |– templates<br>   |– server.py<br>   |– requirements.txt<br>   |– Dockerfile<br>   |– docker-compose.yml</p>
<p>编写Dockerfile内容如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span></div><div class="line"><span class="keyword">ADD</span><span class="bash"> . /app</span></div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y python-dev python-pip</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r requirements.txt</span></div><div class="line"><span class="keyword">CMD</span><span class="bash"> server.py</span></div></pre></td></tr></table></figure>
<p>在Dockerfile中我们主要目的是通过requirements.txt文件安装第三方的Python库依赖。利用Docker的容器隔离我们可以忽略掉很多我们在本地开发中需要使用的东西比如virtualenv</p>
<h2 id="编排我们的Docker容器"><a href="#编排我们的Docker容器" class="headerlink" title="编排我们的Docker容器"></a>编排我们的Docker容器</h2><p>由于案例中应用程序依赖了mongodb作为数据存储服务，以及redis作为缓存服务。在一般情况下作为开发团队要么我们搭建统一的mongodb,要不就每个人在开发机上单独部署。<br>而在Docker中我们则不在需要做这么多无用的事情。 Docker官方提供了大量的基础容器，基本涵盖了日常开发中我们需要的大部分依赖。 在<a href="https://hub.docker.com/" target="_blank" rel="external">https://hub.docker.com/</a>我们可以搜索到我们需要的基础镜像。</p>
<p>比如mongodb以及redis，在docker-hub上官方都提供了容器话的服务。</p>
<p>以redis容器为例，我们在本地搭建redis服务要做的事情主要包括两步。</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker pull redis:latest</div><div class="line">docker <span class="keyword">run</span><span class="bash"> <span class="_">-d</span> -p 63775:63775 redis</span></div></pre></td></tr></table></figure>
<p>这个时候我们就可以通过访问0.0.0.0:63775来访问我们的redis服务器了。</p>
<p>我们也可以通过Docker原生的命令来连接我们的应用容器和redis容器，以使我们的代码能够正常的访问redis服务</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">run</span><span class="bash"> --name some-app --link some-redis:redis <span class="_">-d</span> application-that-uses-redis</span></div></pre></td></tr></table></figure>
<p>而事实上我们可以使用更加简化的方式来定义我们的容器组合管理，使用Docker-compose（前身Fig）来定义我们的容器组合关系</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">web</span>:</div><div class="line"> <span class="attribute">build</span>: .</div><div class="line"> <span class="attribute">ports</span>:</div><div class="line">  - <span class="number">5000</span>:<span class="number">5000</span></div><div class="line"> <span class="attribute">links</span>:</div><div class="line">  - redis</div><div class="line">  - mongo</div><div class="line"> <span class="attribute">working_dir</span>: /app</div><div class="line"> <span class="attribute">volumes</span>:</div><div class="line">  - .:/app</div><div class="line"> <span class="attribute">command</span>: python server.py</div><div class="line"><span class="attribute">redis</span>:</div><div class="line"> <span class="attribute">image</span>: <span class="attribute">redis</span>:latest</div><div class="line"><span class="attribute">mongo</span>:</div><div class="line"> <span class="attribute">image</span>: mongo</div></pre></td></tr></table></figure>
<p>这里我们定义了3个容器web，redis,mongo。 其中web容器是通过当前目录的Dockerfile进行构建，同时将当前目录挂在到/app目录。 而redis和mongo则直接使用官方进行。<br>通过使用links我们可以在web容器中直接通过 ‘redis:6375’以及’mongo:21707’直接访问相应的服务。</p>
<h2 id="开始Coding吧"><a href="#开始Coding吧" class="headerlink" title="开始Coding吧"></a>开始Coding吧</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">docker-compose up</span></div></pre></td></tr></table></figure>
<p>Docker会根据当前的目录下得Dockerfile构建基础镜像，并且使用python server.py运行程序，并且运行redis以及mongo服务。<br>同时由于使用了volumes挂载了本地目录到/app，此时如果我们是开启的Debug模式，我们就可以直接在本地使用你喜欢的文本编辑器去编写代码。<br>并且更新的代码能够实时被重新加载。</p>
<p>当然在使用Docker中最漫长的过程就是，下镜像，下镜像&amp;下镜像。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker提供了容器级别的资源隔离，由于Python的外部依赖管理中存在的问题。我们通常会使用virtualenv来对不同的项目创建其唯一的依赖环境。这时利用Docker进行Python开发可以轻松解决不同Python项目之间的依赖隔离问题。&lt;/p&gt;
&lt;p&gt;作为应用程序我们通常需要依赖于多种外部服务比如数据库，缓存服务等等。Docker-compose就是在Docker容器的基础之上，提供了统一的容器编排语言。可以让你更轻松的利用Docker构建你的应用环境&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://yunlzheng.github.io/tags/Docker/"/>
    
      <category term="Docker-compose" scheme="http://yunlzheng.github.io/tags/Docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>Java轻量级模板引擎Thymeleaf</title>
    <link href="http://yunlzheng.github.io/2015/03/17/template-engine-thymeleaf/"/>
    <id>http://yunlzheng.github.io/2015/03/17/template-engine-thymeleaf/</id>
    <published>2015-03-17T07:02:11.000Z</published>
    <updated>2016-12-20T07:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>Thymeleaf是一个开源的Java模板引擎库。</p>
<p>它的核心目标是提供一种优雅的，结构良好的的方式去创建我们所需要的模板。</p>
<p>为了实现这个目标Thymeleaf全部基于XML标签和属性去定义模板的处理逻辑，而不是想其他模板引擎一样在模板中编写逻辑代码。<br>所以Thymeleaf项目与其他模板引擎的最大优势，其模板文件本身也是一个格式良好的HTML文件，并且可以直接被浏览器打开。改变了在传统模板引擎下前端设计人员和后端开发人员的协作方式，能有效的提高工作效率。</p>
<!--图片1， 传统模板引擎工作方式 VS Thymeleaf模板引擎工作方式-->
<p>其实根据上面提到的内容Thymeleaf非常适合去处理XHTML/HTML5这类模板。当然也可以处理其他任何的XML模板</p>
<h2 id="为什么要选择Thymeleaf"><a href="#为什么要选择Thymeleaf" class="headerlink" title="为什么要选择Thymeleaf?"></a>为什么要选择Thymeleaf?</h2><table>
<thead>
<tr>
<th>模板引擎</th>
<th>支持的文件格式</th>
</tr>
</thead>
<tbody>
<tr>
<td>Thymeleaf</td>
<td>XML/HTML/XHTML/HTML5</td>
</tr>
<tr>
<td>Freemaker</td>
<td>任何类型</td>
</tr>
<tr>
<td>Velo<em>*</em></td>
<td>任何类型</td>
</tr>
</tbody>
</table>
<p>相比于其他模板引擎，Thymeleaf只专注于XML，这使得它能一非常优雅的方式去处理我们的前端网页模板。 所以如果你是希望为你的Web应用引入一款模板引擎Thymeleaf是不二选择，如果你是还需要处理其他类型的模板那么Thymeleaf并不适合你。</p>
<p>JSP Tag Library:</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">form:inputText</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div></pre></td></tr></table></figure>
<p>Thymeleaf template:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">￼￼&lt;<span class="selector-tag">input</span> type=<span class="string">"text"</span> name=<span class="string">"userName"</span> value=<span class="string">"James Carrot"</span> <span class="selector-tag">th</span>:value=<span class="string">"$&#123;user.name&#125;"</span> /&gt;</div></pre></td></tr></table></figure>
<p>对比以上两个例子，我们可以知道基于Thymeleaf的模板，即使在模板引擎处理之前也能正确的被浏览器解析并且显示。</p>
<p>如果需要，你可以让你的设计人员和开发人员在同一套模板文件上工作，从而减少了将静态原型转换为模板文件的工作量。</p>
<h2 id="表达式语句"><a href="#表达式语句" class="headerlink" title="表达式语句"></a>表达式语句</h2><p>对于Thymeleaf模板引擎而言，第一步需要理解的就是表达式和字面量。</p>
<p>表达式主要包含以下几种类型：</p>
<ul>
<li>“${…} 变量表达式：用于获取对象的值；”</li>
<li>“*{…} 属性选择表达式： 一般与th:with配合使用用于简化表达式内容；”</li>
<li>“#{…} 用于获取国际化配置文件内容 messages.properties；”</li>
<li>“@{…} 链接表达式： 由thymeleaf模板引擎负责解析应用的ContextPath”</li>
</ul>
<p>在表达式中的字面量有包含：</p>
<p>文本字面量，数字字面量，bool字面量，Null字面量等。相应的也支持直接在表达式中进行boolean运算，数学运算，字符串操作等。</p>
<p>通过灵活的组合和使用表达式内容我们可以非常方便的获取所需的信息</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">‘user <span class="keyword">is</span> <span class="keyword">type</span> <span class="type">of </span>’ + ( $(user.isAdmin())? ‘Administrator’ ：($(user.<span class="keyword">type</span> <span class="type">?: </span>‘Unkown’)))</div></pre></td></tr></table></figure>
<h2 id="面向原型的模板设计"><a href="#面向原型的模板设计" class="headerlink" title="面向原型的模板设计"></a>面向原型的模板设计</h2><blockquote>
<p>因为专一所以美丽</p>
</blockquote>
<p>最开始我们已经说过Thymeleaf是只针对xml的模板引擎，所以它完全遵循xml的语法，而不是添加额外的控制语法。<br>在处理基于Thymeleaf的网页模板时我们可以非常方便的使用其提供的xml标签设置模板的行为。<br>诸如去设置input的value属性：</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">“submit”</span> <span class="attr">value</span>=<span class="string">“Subscribe</span> <span class="attr">me</span>!” <span class="attr">th:attr</span>=<span class="string">“value</span>=<span class="string">#</span></span></span><span class="template-variable">&#123;submit&#125;</span><span class="xml"><span class="tag">”&gt;</span></span></div></pre></td></tr></table></figure>
<p>直接用浏览器打开时，模板可以被浏览器正常打开，当然如果经过服务器端处理后，就会更具我们动态注入的值而变化。</p>
<p>或者是这样一次设置多个属性值：</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">“logo.png”</span> <span class="attr">th:attr</span>=<span class="string">“title</span>=<span class="string">#</span></span></span><span class="template-variable">&#123;logo&#125;</span><span class="xml"><span class="tag">,<span class="attr">alt</span>=<span class="string">#</span></span></span><span class="template-variable">&#123;logo&#125;</span><span class="xml"><span class="tag">” &gt;</span></span></div></pre></td></tr></table></figure>
<p>当然，th:attr处理可能并不是那么优美，所以thymeleaf支持所有html属性的直接设置</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">“submit”</span> <span class="attr">value</span>=<span class="string">“Subscribe</span> <span class="attr">me</span>!” <span class="attr">th:value</span>=<span class="string">“#</span></span></span><span class="template-variable">&#123;submit&#125;</span><span class="xml"><span class="tag">”&gt;</span></span></div></pre></td></tr></table></figure>
<p>或者这样</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">“logo.png”</span> <span class="attr">th:alt-title</span>=<span class="string">“#</span></span></span><span class="template-variable">&#123;logo&#125;</span><span class="xml"><span class="tag">” &gt;</span></span></div></pre></td></tr></table></figure>
<blockquote>
<p>HTML5 Friendly</p>
</blockquote>
<p>当然，它更可以这样:</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">“logo.png”</span> <span class="attr">data-th-src</span>=<span class="string">“#</span></span></span><span class="template-variable">&#123;logo&#125;</span><span class="xml"><span class="tag">” &gt;</span></span></div></pre></td></tr></table></figure>
<p>提供基于标准html5的语法。</p>
<blockquote>
<p>循环</p>
</blockquote>
<p>在原型设计阶段我们通常会包含大量的用于测试界面的网页内容，比如这样：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>NAME<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>PRICE<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>IN STOCK<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>Fresh Sweet Basil<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>4.99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"odd"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>Italian Tomato<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>1.25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>no<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>Yellow Bell Pepper<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>2.50<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"odd"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>Old Cheddar<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>18.75<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p>所以采用thymeleaf时，我们可以这样：</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>NAME<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>PRICE<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>IN STOCK<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tbody</span> <span class="attr">th:remove</span>=<span class="string">"all-but-first"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"people : $</span></span><span class="template-variable">&#123;peoples&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span> <span class="attr">th:text</span>=<span class="string">"$</span></span><span class="template-variable">&#123;people.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Fresh Sweet Basil<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span> <span class="attr">th:text</span>=<span class="string">"people.srlary"</span>&gt;</span>4.99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"odd"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>Italian Tomato<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>1.25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>no<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>Yellow Bell Pepper<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>2.50<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"odd"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>Old Cheddar<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>18.75<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">rowspan</span>=<span class="string">"1"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>天下武功为快不破</p>
</blockquote>
<p>正式由于Thymeleaf采用了如此自然的基于xml的语法，以及对html的良好的支持，可以让我们更快更好的完成对于应用的开发工作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Thymeleaf是一个开源的Java模板引擎库。&lt;/p&gt;
&lt;p&gt;它的核心目标是提供一种优雅的，结构良好的的方式去创建我们所需要的模板。&lt;/p&gt;
&lt;p&gt;为了实现这个目标Thymeleaf全部基于XML标签和属性去定义模板的处理逻辑，而不是想其他模板引擎一样在模板中编写逻辑代
    
    </summary>
    
    
      <category term="Java" scheme="http://yunlzheng.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack创建Windows镜像</title>
    <link href="http://yunlzheng.github.io/2015/02/10/openstack-create-windows-images/"/>
    <id>http://yunlzheng.github.io/2015/02/10/openstack-create-windows-images/</id>
    <published>2015-02-10T02:09:00.000Z</published>
    <updated>2016-12-20T07:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于OpenStack的镜像创建官方已经提供了非常详细的说明，这里主要是记录一下如何使用KVM创建Windows系列镜像的基本过程；本文以创建Window7为例，其他版本类似，不同之处会在案例中进行说明；</p>
<a id="more"></a>
<h2 id="1，准备基础环境"><a href="#1，准备基础环境" class="headerlink" title="1，准备基础环境"></a>1，准备基础环境</h2><ul>
<li>系统环境：ubuntu 14.04</li>
<li>window7版本iso源文件；</li>
<li>virtio驱动程序virtio-win-0.1-94.iso（下载地址：<a href="http://alt.fedoraproject.org/pub/alt/virtio-win/latest/）；" target="_blank" rel="external">http://alt.fedoraproject.org/pub/alt/virtio-win/latest/）；</a></li>
</ul>
<h2 id="2，安装相关软件包"><a href="#2，安装相关软件包" class="headerlink" title="2，安装相关软件包"></a>2，安装相关软件包</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-<span class="keyword">get</span> install vncviewer kvm qemu-kvm</div></pre></td></tr></table></figure>
<p>注意：由于使用到KVM需要打开主机的Intel VT-x/EPT支持，否则无法使用kvm模块</p>
<h2 id="3，创建windows7镜像"><a href="#3，创建windows7镜像" class="headerlink" title="3，创建windows7镜像"></a>3，创建windows7镜像</h2><p>这里默认建立具有20G存储空间的镜像,在实际使用中假如没有提供Cinder存储服务，虚拟机的磁盘空间往往不能满足使用需求</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qemu-<span class="selector-tag">img</span> create -f qcow windows7<span class="selector-class">.qcow2</span> <span class="number">20</span>G</div></pre></td></tr></table></figure>
<p>使用kvm创建虚拟机</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kvm -<span class="keyword">m</span> 2048 -<span class="keyword">no</span>-reboot -<span class="keyword">boot</span> <span class="keyword">order</span>=<span class="keyword">d</span> -drive <span class="keyword">file</span>=windows7.qcow2,<span class="keyword">if</span>=virtio,<span class="keyword">boot</span>=off -drive <span class="keyword">file</span>=windows7.iso,media=cdrom,<span class="keyword">boot</span>=<span class="keyword">on</span> -drive <span class="keyword">file</span>=virtio-<span class="keyword">win</span>-0.1-94.iso,media=cdrom,<span class="keyword">boot</span>=off -<span class="keyword">net</span> nic,model=virtio -nographic -vnc :1</div></pre></td></tr></table></figure>
<p>ubuntu examples:</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">kvm -<span class="keyword">m</span> 1024 -cdrom ubuntu-14.04.1-desktop-amd64.iso -drive <span class="keyword">file</span>=ubuntu-14.04-desktop-amd64.qcow2 -<span class="keyword">boot</span> <span class="keyword">d</span> -nographic -vnc :2</div><div class="line"># restart</div><div class="line">kvm -<span class="keyword">m</span> 1024 -drive <span class="keyword">file</span>=ubuntu-14.04-desktop-amd64.qcow2 -<span class="keyword">boot</span> <span class="keyword">d</span> -nographic -vnc :2</div></pre></td></tr></table></figure>
<p>之后可以通过vnc客户端连接到虚拟机</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">vncviewer</span> <span class="comment"># localhost:1</span></div></pre></td></tr></table></figure>
<p>进入之后实际上就和我们安装操作系统的流程一致，安装windows7操作系统即可。</p>
<ul>
<li>安装中的第一个问题就是提示找不到任何磁盘安装操作系统，这里就是virtio发挥作用的地方之一</li>
</ul>
<p><img src="http://filehost.qiniudn.com/openstack-images-windows-001.png" alt=""></p>
<p>点击加载驱动程序，确认</p>
<p><img src="http://filehost.qiniudn.com/openstack-images-windows-002.png" alt=""></p>
<p>按理来说应该是选择WIN7目录下的AMD64,不过似乎window2008和这个兼容也没出什么问题。</p>
<p>这里实际上需要根据你当前的操作系统类型和架构进行选择即可</p>
<p><img src="http://filehost.qiniudn.com/openstack-windows-windows-004.png" alt=""></p>
<p>加载完成驱动之后，就可以开始继续我们的windows操作系统的安装</p>
<p><img src="http://filehost.qiniudn.com/penstack-images-windows-005.png" alt=""><br><img src="http://filehost.qiniudn.com/openstack-images-window-007.png" alt=""></p>
<h2 id="4，安装网卡驱动程序"><a href="#4，安装网卡驱动程序" class="headerlink" title="4，安装网卡驱动程序"></a>4，安装网卡驱动程序</h2><p>当完成系统安装之后，你会惊喜的发现windows系统找不到本地网络驱动设备，也就是说这个镜像依然无法在opensatck中正常使用。</p>
<p>这是virtio发挥作用的第二个地方，安装网卡驱动。 你只需要进入windows的设备管理器，你会发现网卡设备上的一个黄色感叹号，点击安装驱动程序即可。</p>
<p>当然驱动程序你可以在CDROM下面找到自己相应版本的操作系统驱动程序即可。 这里就不截图了（mei de jie）。</p>
<h2 id="5，开放windows部分防火墙"><a href="#5，开放windows部分防火墙" class="headerlink" title="5，开放windows部分防火墙"></a>5，开放windows部分防火墙</h2><p>由于OpenStack使用到安装组（Securiyu Group进行安装管理），所以对于windows的操作系统镜像需要至少打开TCP3389和ICMP。</p>
<h2 id="6，加载文件内容"><a href="#6，加载文件内容" class="headerlink" title="6，加载文件内容"></a>6，加载文件内容</h2><p>在完成基础的镜像制作之后（操作系统安装，网卡驱动安装），我们往往需要对虚拟机镜像进行一些其他操作诸如：激活操作系统，安装软件等定制化。 这时候需要我们能上传文件到虚拟机内部。</p>
<p>此时采取的策略与加载virto驱动相识，我们实现创建好一个iso文件，并包含我们必要的文件内容。 在使用kvm启动虚拟机时以CDROM的方式加载ISO文件即可</p>
<h3 id="6-1，创建临时文件目录"><a href="#6-1，创建临时文件目录" class="headerlink" title="6.1，创建临时文件目录"></a>6.1，创建临时文件目录</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> /tmp/<span class="built_in">directory</span></div></pre></td></tr></table></figure>
<p>将需要的文件保存到/tmp/directory目录下，建议按照不同操作系统分目录如：</p>
<hr>
<ul>
<li>window7<br>|– amd64<br>|– x86</li>
<li>window8<br>|– amd64<br>|– x86</li>
</ul>
<h3 id="6-2，将目录保存为iso文件，如-tmp-cd-iso"><a href="#6-2，将目录保存为iso文件，如-tmp-cd-iso" class="headerlink" title="6.2，将目录保存为iso文件，如/tmp/cd.iso"></a>6.2，将目录保存为iso文件，如/tmp/cd.iso</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkisofs -o <span class="regexp">/tmp/</span>cd.iso  <span class="regexp">/tmp/</span>directory</div></pre></td></tr></table></figure>
<h3 id="6-3，将cd-iso作为CDROM加载到虚拟机"><a href="#6-3，将cd-iso作为CDROM加载到虚拟机" class="headerlink" title="6.3，将cd.iso作为CDROM加载到虚拟机"></a>6.3，将cd.iso作为CDROM加载到虚拟机</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kvm -<span class="keyword">m</span> 2048 -<span class="keyword">no</span>-reboot -<span class="keyword">boot</span> <span class="keyword">order</span>=<span class="keyword">d</span> -drive <span class="keyword">file</span>=windows7.qcow2,<span class="keyword">if</span>=virtio,<span class="keyword">boot</span>=off -drive <span class="keyword">file</span>=virtio-<span class="keyword">win</span>-0.1-94.iso,media=cdrom -drive <span class="keyword">file</span>=<span class="keyword">cd</span>.iso,media=cdrom -<span class="keyword">net</span> nic,model=virtio -nographic -vnc :1</div></pre></td></tr></table></figure>
<p><img src="http://filehost.qiniudn.com/kvm-load-file.png" alt=""></p>
<h2 id="7，导入"><a href="#7，导入" class="headerlink" title="7，导入"></a>7，导入</h2><p>接下来你就可以使用glance的cli命令上传镜像到OpenStack并且进行测试了。</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">glance </span><span class="string">image-create </span><span class="built_in">--name</span> <span class="string">"windows7-x86_64"</span> <span class="built_in">--disk-format</span> <span class="string">qcow2 </span><span class="built_in">--container-format</span> <span class="string">bare </span><span class="built_in">--is-public</span> <span class="string">True </span><span class="built_in">--progress</span> &lt; <span class="string">windows7.</span><span class="string">qcow2</span></div></pre></td></tr></table></figure>
<p>对于不同类型版本的windows操作系统，只需要选择相应的驱动程序即可。 Enjoy Your OpenStack;</p>
<h2 id="8，其他"><a href="#8，其他" class="headerlink" title="8，其他"></a>8，其他</h2><p>For Linux 安装官方文档制作Linux虚拟机时，文档提供的shell脚本有部分错误，修改如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># This script will be executed *after* all the other init scripts.</span></div><div class="line"><span class="comment"># You can put your own initialization stuff in here if you don't</span></div><div class="line"><span class="comment"># want to do the full Sys V style init stuff.</span></div><div class="line"><span class="keyword">if</span> [ ! <span class="_">-d</span> /root/.ssh ]; <span class="keyword">then</span></div><div class="line">mkdir -p /root/.ssh</div><div class="line">chmod 700 /root/.ssh</div><div class="line"><span class="keyword">fi</span></div><div class="line">ATTEMPTS=30</div><div class="line">FAILED=0</div><div class="line"><span class="keyword">while</span> [ ! <span class="_">-f</span> /root/.ssh/authorized_keys ]; <span class="keyword">do</span></div><div class="line">curl <span class="_">-f</span> http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key &gt; /tmp/metadata-key 2&gt;/dev/null</div><div class="line"><span class="keyword">if</span> [ \$? <span class="_">-eq</span> 0 ]; <span class="keyword">then</span></div><div class="line">cat /tmp/metadata-key &gt;&gt; /root/.ssh/authorized_keys</div><div class="line">chmod 0600 /root/.ssh/authorized_keys</div><div class="line">restorecon /root/.ssh/authorized_keys</div><div class="line">rm <span class="_">-f</span> /tmp/metadata-key</div><div class="line"><span class="built_in">echo</span> <span class="string">"Successfully retrieved public key from instance metadata"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"*****************"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"AUTHORIZED KEYS"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"*****************"</span></div><div class="line">cat /root/.ssh/authorized_keys</div><div class="line"><span class="built_in">echo</span> <span class="string">"*****************"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line">touch /var/loc/subsys/<span class="built_in">local</span></div><div class="line"></div><div class="line">/sbin/black_box.sh &gt;&gt; /var/<span class="built_in">log</span>/bbox.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于OpenStack的镜像创建官方已经提供了非常详细的说明，这里主要是记录一下如何使用KVM创建Windows系列镜像的基本过程；本文以创建Window7为例，其他版本类似，不同之处会在案例中进行说明；&lt;/p&gt;
    
    </summary>
    
    
      <category term="openstack" scheme="http://yunlzheng.github.io/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack Console 设计</title>
    <link href="http://yunlzheng.github.io/2015/02/01/openstack-novnc-architecture/"/>
    <id>http://yunlzheng.github.io/2015/02/01/openstack-novnc-architecture/</id>
    <published>2015-01-31T16:00:34.000Z</published>
    <updated>2016-12-20T07:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于使用过OpenStack的用户，我们第一次操作虚拟机都可能是直接通过OpenStack Dashbord管理控制台提供的Web vnc来进行使用。</p>
<p>如图所示，我们可以很方便的使用该功能，对虚拟机进行管理和配置；</p>
<a id="more"></a>
<p><img src="http://filehost.qiniudn.com/dashbord_console.png" alt=""></p>
<h2 id="OpenStack虚拟化"><a href="#OpenStack虚拟化" class="headerlink" title="OpenStack虚拟化"></a>OpenStack虚拟化</h2><p>对于OpenStack而言，OpenStack并不直接提供虚拟化技术实现，而是直接使用现虚拟化技术如QEMU，KVM，XenServer等。</p>
<p>对于KVM和QEMU我们可以通过如下命令在操作系统上运行一台虚拟机。</p>
<p>以在Linux上直接使用kvm创建windows虚拟机为例</p>
<p>定义虚拟机Disk</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qemu-<span class="selector-tag">img</span> create -f qcow windows7<span class="selector-class">.qcow2</span> <span class="number">20</span>G</div></pre></td></tr></table></figure>
<p>使用kvm导入ISO镜像，并且安装操作系统</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kvm -<span class="keyword">m</span> 2048 -<span class="keyword">no</span>-reboot -<span class="keyword">boot</span> <span class="keyword">order</span>=<span class="keyword">d</span> -drive <span class="keyword">file</span>=windows7.qcow2,<span class="keyword">if</span>=virtio,<span class="keyword">boot</span>=off -drive <span class="keyword">file</span>=windows7.iso,media=cdrom,<span class="keyword">boot</span>=<span class="keyword">on</span> -drive <span class="keyword">file</span>=virtio-<span class="keyword">win</span>-0.1-94.iso,media=cdrom,<span class="keyword">boot</span>=off -<span class="keyword">net</span> nic,model=virtio -nographic -vnc :1</div></pre></td></tr></table></figure>
<p>此时我们指定了虚拟机的模式为-nographic 并且指定了vnc端口，这个时我们就可以通过localhost:1访问到该虚拟机</p>
<p>而对OpenStack而言，OpenStak更多是作为上层的管理者负责管理和控制地城的虚拟化技术</p>
<p>当我们使用nova命令创建一台虚拟机之后</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">nova list</div><div class="line"></div><div class="line"><span class="code">+--------------------------------------+</span>---------------------<span class="code">+--------+</span>------------<span class="code">+-------------+</span>---------------------------------------------+</div><div class="line"><span class="section">| ID                                   | Name                | Status | Task State | Power State | Networks                                    |</span></div><div class="line">+--------------------------------------+---------------------+--------+------------+-------------+---------------------------------------------+</div><div class="line"><span class="section">| c75adb4f-c554-4fa2-962e-35fef3367041 | centos-test         | ACTIVE | -          | Running     | internal-network=192.168.0.50, 10.74.149.23 |</span></div><div class="line">+--------------------------------------+---------------------+--------+------------+-------------+---------------------------------------------+</div></pre></td></tr></table></figure>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">nova show c75adb4f-c554-4fa2-962e-35fef3367041</div><div class="line"></div><div class="line">+--------------------------------------+-------------------------------------------------------------+</div><div class="line">|<span class="string"> Property                             </span>|<span class="string"> Value                                                       </span>|</div><div class="line">+--------------------------------------+-------------------------------------------------------------+</div><div class="line">|<span class="string"> OS-DCF:diskConfig                    </span>|<span class="string"> AUTO                                                        </span>|</div><div class="line">|<span class="string"> OS-EXT-AZ:availability_zone          </span>|<span class="string"> hp-server                                                   </span>|</div><div class="line">|<span class="string"> OS-EXT-SRV-ATTR:host                 </span>|<span class="string"> compute02                                                   </span>|</div><div class="line">|<span class="string"> OS-EXT-SRV-ATTR:hypervisor_hostname  </span>|<span class="string"> compute02                                                   </span>|</div><div class="line">|<span class="string"> OS-EXT-SRV-ATTR:instance_name        </span>|<span class="string"> instance-00000044                                           </span>|</div><div class="line">|<span class="string"> OS-EXT-STS:power_state               </span>|<span class="string"> 1                                                           </span>|</div><div class="line">|<span class="string"> OS-EXT-STS:task_state                </span>|<span class="string"> -                                                           </span>|</div><div class="line">|<span class="string"> OS-EXT-STS:vm_state                  </span>|<span class="string"> active                                                      </span>|</div><div class="line">|<span class="string"> OS-SRV-USG:launched_at               </span>|<span class="string"> 2015-02-06T06:03:24.000000                                  </span>|</div><div class="line">|<span class="string"> OS-SRV-USG:terminated_at             </span>|<span class="string"> -                                                           </span>|</div><div class="line">|<span class="string"> accessIPv4                           </span>|<span class="string">                                                             </span>|</div><div class="line">|<span class="string"> accessIPv6                           </span>|<span class="string">                                                             </span>|</div><div class="line">|<span class="string"> config_drive                         </span>|<span class="string">                                                             </span>|</div><div class="line">|<span class="string"> created                              </span>|<span class="string"> 2015-02-06T06:02:37Z                                        </span>|</div><div class="line">|<span class="string"> flavor                               </span>|<span class="string"> m1.small (2)                                                </span>|</div><div class="line">|<span class="string"> hostId                               </span>|<span class="string"> dddad0cc7fcd1cad5eeb87ea7bad2a9f31d690d8955d73b998e2ba5c    </span>|</div><div class="line">|<span class="string"> id                                   </span>|<span class="string"> c75adb4f-c554-4fa2-962e-35fef3367041                        </span>|</div><div class="line">|<span class="string"> image                                </span>|<span class="string"> centOS_6.5_x86_64_en (d923120e-5a1f-417f-b627-36320215f8be) </span>|</div><div class="line">|<span class="string"> internal-network network             </span>|<span class="string"> 192.168.0.50, 10.74.149.23                                  </span>|</div><div class="line">|<span class="string"> key_name                             </span>|<span class="string"> -                                                           </span>|</div><div class="line">|<span class="string"> metadata                             </span>|<span class="string"> &#123;&#125;                                                          </span>|</div><div class="line">  |<span class="string"> name                                 </span>|<span class="string"> centos-test                                                 </span>|</div><div class="line">  |<span class="string"> os-extended-volumes:volumes_attached </span>|<span class="string"> []                                                          </span>|</div><div class="line">  |<span class="string"> progress                             </span>|<span class="string"> 0                                                           </span>|</div><div class="line">  |<span class="string"> security_groups                      </span>|<span class="string"> default                                                     </span>|</div><div class="line">  |<span class="string"> status                               </span>|<span class="string"> ACTIVE                                                      </span>|</div><div class="line">  |<span class="string"> tenant_id                            </span>|<span class="string"> 52941cb7e81644c1a32fb087b83d83b6                            </span>|</div><div class="line">  |<span class="string"> updated                              </span>|<span class="string"> 2015-02-06T06:02:40Z                                        </span>|</div><div class="line">  |<span class="string"> user_id                              </span>|<span class="string"> 33aef1cf867d48468fc295ac46296953                            </span>|</div><div class="line">  +--------------------------------------+-------------------------------------------------------------+</div></pre></td></tr></table></figure>
<p>同样OpenStack调用了libvirt接口利用底层虚拟化技术Provider创建了一台虚拟设备，我们可以在计算节点上查看qemu进程，如下所示，只是参数比起我们自己使用qemu会相对负责许多，因为涉及到诸如网络信息的配置等</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ps -ef|grep qemu</span></div><div class="line">libvirt+  <span class="number">2711</span>     <span class="number">1</span>  <span class="number">6</span> <span class="number">14</span>:<span class="number">01</span> ?        <span class="number">00</span>:<span class="number">01</span>:<span class="number">02</span> /usr/bin/qemu-system-x86_64 -<span class="built_in">name</span> instance<span class="number">-00000043</span> -S -machine pc-i440fx-trusty,accel=kvm,usb=off -cpu Nehalem,+rdtscp,+dca,+pdcm,+xtpr,+tm2,+est,+vmx,+ds_cpl,+monitor,+dtes64,+pbe,+tm,+ht,+ss,+acpi,+ds,+vme -m <span class="number">512</span> -realtime mlock=off -smp <span class="number">1</span>,sockets=<span class="number">1</span>,cores=<span class="number">1</span>,threads=<span class="number">1</span> -uuid e6759873<span class="number">-7e62</span><span class="number">-4341</span><span class="number">-9</span>a35<span class="number">-39</span>a10d65fb12 -smbios type=<span class="number">1</span>,manufacturer=OpenStack Foundation,product=OpenStack Nova,<span class="built_in">version</span>=<span class="number">2014.1</span><span class="number">.3</span>,serial=<span class="number">35383339</span><span class="number">-3134</span><span class="number">-434e-4731</span><span class="number">-323353345756</span>,uuid=e6759873<span class="number">-7e62</span><span class="number">-4341</span><span class="number">-9</span>a35<span class="number">-39</span>a10d65fb12 -no-user-config -nodefaults -chardev socket,<span class="built_in">id</span>=charmonitor,path=/var/lib/libvirt/qemu/instance<span class="number">-00000043.</span>monitor,server,nowait -mon chardev=charmonitor,<span class="built_in">id</span>=monitor,mode=control -rtc base=utc,driftfix=slew -<span class="keyword">global</span> kvm-pit.lost_tick_policy=discard -no-hpet -no-shutdown -boot strict=<span class="keyword">on</span> -device piix3-usb-uhci,<span class="built_in">id</span>=usb,bus=pci<span class="number">.0</span>,addr=<span class="number">0x1</span><span class="number">.0</span>x2 -drive <span class="built_in">file</span>=/var/lib/nova/instances/e6759873<span class="number">-7e62</span><span class="number">-4341</span><span class="number">-9</span>a35<span class="number">-39</span>a10d65fb12/disk,<span class="keyword">if</span>=none,<span class="built_in">id</span>=drive-virtio-disk0,format=qcow2,cache=none -device virtio-blk-pci,scsi=off,bus=pci<span class="number">.0</span>,addr=<span class="number">0x4</span>,drive=drive-virtio-disk0,<span class="built_in">id</span>=virtio-disk0,bootindex=<span class="number">1</span> -netdev tap,fd=<span class="number">25</span>,<span class="built_in">id</span>=hostnet0,vhost=<span class="keyword">on</span>,vhostfd=<span class="number">26</span> -device virtio-net-pci,netdev=hostnet0,<span class="built_in">id</span>=net0,mac=fa:<span class="number">16</span>:<span class="number">3</span>e:<span class="number">59</span>:<span class="number">90</span>:<span class="number">96</span>,bus=pci<span class="number">.0</span>,addr=<span class="number">0x3</span> -chardev <span class="built_in">file</span>,<span class="built_in">id</span>=charserial0,path=/var/lib/nova/instances/e6759873<span class="number">-7e62</span><span class="number">-4341</span><span class="number">-9</span>a35<span class="number">-39</span>a10d65fb12/console.<span class="built_in">log</span> -device isa-serial,chardev=charserial0,<span class="built_in">id</span>=serial0 -chardev pty,<span class="built_in">id</span>=charserial1 -device isa-serial,chardev=charserial1,<span class="built_in">id</span>=serial1 -device usb-tablet,<span class="built_in">id</span>=input0 -vnc <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">1</span> -k en-us -device cirrus-vga,<span class="built_in">id</span>=video0,bus=pci<span class="number">.0</span>,addr=<span class="number">0x2</span> -device virtio-balloon-pci,<span class="built_in">id</span>=balloon0,bus=pci<span class="number">.0</span>,addr=<span class="number">0x5</span></div></pre></td></tr></table></figure>
<p>虚拟机的文件保存在/var/lib/nova/instances目录中。</p>
<p><img src="http://filehost.qiniudn.com/vnc_viewer.png" alt=""></p>
<p><img src="http://filehost.qiniudn.com/connect_to_vm.png" alt=""></p>
<h2 id="Nova-Console实现"><a href="#Nova-Console实现" class="headerlink" title="Nova Console实现"></a>Nova Console实现</h2><p>基于Libvirt对虚拟化技术的管控基础上，Nova项目提供了如下主要功能：</p>
<ul>
<li>API：提供外部访问Http访问接口</li>
<li>Compute Core：负责对虚拟化资源的生命周期管理</li>
<li>Networking for VMS：负责虚拟机的网络访问控制等及Nova-Network模式，适合小型的企业私有云，更多的场景还是考虑使用Neutron</li>
<li>Image management (EC2 scenario)：与Glance组件通讯负责镜像管理</li>
<li>Command-line clients and other interfaces： 提供命令行管理接口</li>
<li>Console interface：提供VNC以及NoVNC功能，方便管理和使用OpenStack虚拟机</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于使用过OpenStack的用户，我们第一次操作虚拟机都可能是直接通过OpenStack Dashbord管理控制台提供的Web vnc来进行使用。&lt;/p&gt;
&lt;p&gt;如图所示，我们可以很方便的使用该功能，对虚拟机进行管理和配置；&lt;/p&gt;
    
    </summary>
    
    
      <category term="openstack" scheme="http://yunlzheng.github.io/tags/openstack/"/>
    
  </entry>
  
</feed>
